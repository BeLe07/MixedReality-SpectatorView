{
  "api/Microsoft.MixedReality.PhotoCapture.CameraFrame.html": {
    "href": "api/Microsoft.MixedReality.PhotoCapture.CameraFrame.html",
    "title": "Class CameraFrame | MixedReality-SpectatorView Documentation",
    "keywords": "Class CameraFrame Represents a camera frame, with all format, resolution, properties and pixel data. When finished using a frame, call Release to return to pool. Inheritance Object CameraFrame Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.PhotoCapture Assembly : cs.temp.dll.dll Syntax public class CameraFrame Constructors CameraFrame() Ensures only pools can create frames Declaration protected CameraFrame() Fields refCount The actual SoftwareBitmap that was returned from the camera frame. Declaration protected int refCount Field Value Type Description Int32 Properties Exposure Exposure duration in seconds for this frame Declaration public double Exposure { get; set; } Property Value Type Description Double Extrinsics Camera extrinsics (pose) for this frame Declaration public CameraExtrinsics Extrinsics { get; set; } Property Value Type Description CameraExtrinsics FrameTime Exposure start time for this frame. This is a system relative value, and all frames from a single session can be compared to this value. Declaration public double FrameTime { get; set; } Property Value Type Description Double Gain Sensor gain for this frame Declaration public float Gain { get; set; } Property Value Type Description Single Intrinsics Camera intrinsics for this frame Declaration public CameraIntrinsics Intrinsics { get; set; } Property Value Type Description CameraIntrinsics PixelData Pixel data for this frame in PixelFormat Declaration public byte[] PixelData { get; set; } Property Value Type Description Byte [] PixelFormat Pixel format of this frame Declaration public PixelFormat PixelFormat { get; set; } Property Value Type Description PixelFormat RefCount Current ref count for the frame Declaration public int RefCount { get; } Property Value Type Description Int32 Resolution Resolution settings of this frame Declaration public CameraResolution Resolution { get; set; } Property Value Type Description CameraResolution Methods AddRef() Adds a reference to the camera frame Declaration public virtual void AddRef() Release() This must be called when finished with the frame Declaration public virtual void Release() Save(String) Saves the camera frame's contents to a provided file path Declaration public void Save(string filePath) Parameters Type Name Description String filePath"
  },
  "api/Microsoft.MixedReality.SpatialAlignment.SpatialCoordinateServiceBase-1.html": {
    "href": "api/Microsoft.MixedReality.SpatialAlignment.SpatialCoordinateServiceBase-1.html",
    "title": "Class SpatialCoordinateServiceBase<TKey> | MixedReality-SpectatorView Documentation",
    "keywords": "Class SpatialCoordinateServiceBase<TKey> Helper base class for ISpatialCoordinateService implementations. Inheritance Object DisposableBase SpatialCoordinateServiceBase<TKey> SpatialCoordinateServiceUnityBase<TKey> Implements ISpatialCoordinateService IDisposable Inherited Members DisposableBase.IsDisposed DisposableBase.ObjectName DisposableBase.Dispose() DisposableBase.OnUnmanagedDispose() DisposableBase.ThrowIfDisposed() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.SpatialAlignment Assembly : cs.temp.dll.dll Syntax public abstract class SpatialCoordinateServiceBase<TKey> : DisposableBase, ISpatialCoordinateService, IDisposable Type Parameters Name Description TKey They key for the ISpatialCoordinate . Fields disposedCTS Declaration protected readonly CancellationTokenSource disposedCTS Field Value Type Description CancellationTokenSource knownCoordinates Declaration protected readonly ConcurrentDictionary<TKey, ISpatialCoordinate> knownCoordinates Field Value Type Description ConcurrentDictionary <TKey, ISpatialCoordinate > Properties IsTracking Gets or sets whether this coordinate service should be discovering/tracking coordinates. Declaration public bool IsTracking { get; } Property Value Type Description Boolean KnownCoordinates Gets a set of all known coordinates to this service. Declaration public IEnumerable<ISpatialCoordinate> KnownCoordinates { get; } Property Value Type Description IEnumerable < ISpatialCoordinate > SupportsDiscovery Declaration protected virtual bool SupportsDiscovery { get; } Property Value Type Description Boolean Methods OnDiscoverCoordinatesAsync(CancellationToken, TKey[]) Implement this method for the logic begin and end tracking (when CancellationToken is cancelled). Declaration protected abstract Task OnDiscoverCoordinatesAsync(CancellationToken cancellationToken, TKey[] idsToLocate = null) Parameters Type Name Description CancellationToken cancellationToken TKey[] idsToLocate Returns Type Description Task OnManagedDispose() Declaration protected override void OnManagedDispose() Overrides DisposableBase.OnManagedDispose() OnNewCoordinate(TKey, ISpatialCoordinate) Adds a coordinate to be tracked by this service. Declaration protected void OnNewCoordinate(TKey id, ISpatialCoordinate spatialCoordinate) Parameters Type Name Description TKey id ISpatialCoordinate spatialCoordinate OnRemoveCoordinate(TKey) Removes a tracked coordinate from this service. Declaration protected void OnRemoveCoordinate(TKey id) Parameters Type Name Description TKey id The ide of the coordinate to remove. Remarks Will throw if coordinate was not tracked by this service, checking is possible throuhg knownCoordinates field. TryCreateCoordinateAsync(Vector3, Quaternion, CancellationToken) Attempts to create a new coordinate with this service. Declaration public virtual Task<ISpatialCoordinate> TryCreateCoordinateAsync(Vector3 worldPosition, Quaternion worldRotation, CancellationToken cancellationToken) Parameters Type Name Description Vector3 worldPosition Quaternion worldRotation CancellationToken cancellationToken Returns Type Description Task < ISpatialCoordinate > The coordinate if the coordinate was succesfully created, otherwise null. TryDeleteCoordinateAsync(TKey, CancellationToken) Declaration public virtual Task<bool> TryDeleteCoordinateAsync(TKey key, CancellationToken cancellationToken) Parameters Type Name Description TKey key CancellationToken cancellationToken Returns Type Description Task < Boolean > TryDiscoverCoordinatesAsync(CancellationToken, TKey[]) Declaration public Task<bool> TryDiscoverCoordinatesAsync(CancellationToken cancellationToken, params TKey[] ids) Parameters Type Name Description CancellationToken cancellationToken TKey[] ids Returns Type Description Task < Boolean > TryGetKnownCoordinate(TKey, out ISpatialCoordinate) Declaration public bool TryGetKnownCoordinate(TKey id, out ISpatialCoordinate spatialCoordinate) Parameters Type Name Description TKey id ISpatialCoordinate spatialCoordinate Returns Type Description Boolean TryParse(String, out TKey) Declaration protected abstract bool TryParse(string id, out TKey result) Parameters Type Name Description String id TKey result Returns Type Description Boolean Events CoordinatedDiscovered Triggered when a new coordinate is discovered or created with this service. Declaration public event Action<ISpatialCoordinate> CoordinatedDiscovered Event Type Type Description Action < ISpatialCoordinate > Remarks It may not be in the IsLocated state if created locally. CoordinateRemoved Triggered when a new coordinate is removed from this service. Declaration public event Action<ISpatialCoordinate> CoordinateRemoved Event Type Type Description Action < ISpatialCoordinate > Explicit Interface Implementations ISpatialCoordinateService.TryDeleteCoordinateAsync(String, CancellationToken) Attempts to asynchronously delete a coordinate with this space given an Id. Declaration Task<bool> ISpatialCoordinateService.TryDeleteCoordinateAsync(string id, CancellationToken cancellationToken) Parameters Type Name Description String id The id representing the coordinate. CancellationToken cancellationToken Returns Type Description Task < Boolean > True if the coordinate was succesfully deleted. ISpatialCoordinateService.TryDiscoverCoordinatesAsync(CancellationToken, String[]) Begins search for coordinates, optionally priortizing a set of ids. Declaration Task<bool> ISpatialCoordinateService.TryDiscoverCoordinatesAsync(CancellationToken cancellationToken, string[] idsToLocate) Parameters Type Name Description CancellationToken cancellationToken The CancellationToken to be used for cancellation (stopping) of the discovery task. String [] idsToLocate Returns Type Description Task < Boolean > The set of coordinates discovered during this session. ISpatialCoordinateService.TryGetKnownCoordinate(String, out ISpatialCoordinate) Declaration bool ISpatialCoordinateService.TryGetKnownCoordinate(string id, out ISpatialCoordinate spatialCoordinate) Parameters Type Name Description String id ISpatialCoordinate spatialCoordinate Returns Type Description Boolean Implements ISpatialCoordinateService System.IDisposable"
  },
  "api/Microsoft.MixedReality.SpatialAlignment.ISpatialCoordinateService.html": {
    "href": "api/Microsoft.MixedReality.SpatialAlignment.ISpatialCoordinateService.html",
    "title": "Interface ISpatialCoordinateService | MixedReality-SpectatorView Documentation",
    "keywords": "Interface ISpatialCoordinateService This service is used to discover, track and create coordinates. Inherited Members IDisposable.Dispose() Namespace : Microsoft.MixedReality.SpatialAlignment Assembly : cs.temp.dll.dll Syntax public interface ISpatialCoordinateService : IDisposable Properties IsTracking Gets or sets whether this coordinate service should be discovering/tracking coordinates. Declaration bool IsTracking { get; } Property Value Type Description Boolean KnownCoordinates Gets a set of all known coordinates to this service. Declaration IEnumerable<ISpatialCoordinate> KnownCoordinates { get; } Property Value Type Description IEnumerable < ISpatialCoordinate > Methods TryCreateCoordinateAsync(Vector3, Quaternion, CancellationToken) Attempts to create a new coordinate with this service. Declaration Task<ISpatialCoordinate> TryCreateCoordinateAsync(Vector3 worldPosition, Quaternion worldRotation, CancellationToken cancellationToken) Parameters Type Name Description Vector3 worldPosition Quaternion worldRotation CancellationToken cancellationToken Returns Type Description Task < ISpatialCoordinate > The coordinate if the coordinate was succesfully created, otherwise null. TryDeleteCoordinateAsync(String, CancellationToken) Attempts to asynchronously delete a coordinate with this space given an Id. Declaration Task<bool> TryDeleteCoordinateAsync(string id, CancellationToken cancellationToken) Parameters Type Name Description String id The id representing the coordinate. CancellationToken cancellationToken Returns Type Description Task < Boolean > True if the coordinate was succesfully deleted. TryDiscoverCoordinatesAsync(CancellationToken, String[]) Begins search for coordinates, optionally priortizing a set of ids. Declaration Task<bool> TryDiscoverCoordinatesAsync(CancellationToken cancellationToken, params string[] idsToLocate) Parameters Type Name Description CancellationToken cancellationToken The CancellationToken to be used for cancellation (stopping) of the discovery task. String [] idsToLocate Returns Type Description Task < Boolean > The set of coordinates discovered during this session. TryGetKnownCoordinate(String, out ISpatialCoordinate) A key based lookup for a known coordinate. Declaration bool TryGetKnownCoordinate(string id, out ISpatialCoordinate spatialCoordinate) Parameters Type Name Description String id The identifier of the coordinate to look up. ISpatialCoordinate spatialCoordinate The out parameter that will be filled with found coordinate, or null otherwise. Returns Type Description Boolean Returns true if coordinate was found (known locally), false otherwise. Events CoordinatedDiscovered Triggered when a new coordinate is discovered or created with this service. Declaration event Action<ISpatialCoordinate> CoordinatedDiscovered Event Type Type Description Action < ISpatialCoordinate > Remarks It may not be in the IsLocated state if created locally. CoordinateRemoved Triggered when a new coordinate is removed from this service. Declaration event Action<ISpatialCoordinate> CoordinateRemoved Event Type Type Description Action < ISpatialCoordinate >"
  },
  "api/Microsoft.MixedReality.PhotoCapture.HoloLensCamera.html": {
    "href": "api/Microsoft.MixedReality.PhotoCapture.HoloLensCamera.html",
    "title": "Class HoloLensCamera | MixedReality-SpectatorView Documentation",
    "keywords": "Class HoloLensCamera Exposes functionality for all of HoloLens's cameras. Inheritance Object HoloLensCamera Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.PhotoCapture Assembly : cs.temp.dll.dll Syntax public class HoloLensCamera : IDisposable Constructors HoloLensCamera(CaptureMode, PixelFormat) Declaration public HoloLensCamera(CaptureMode captureMode, PixelFormat pixelFormat = PixelFormat.BGRA8) Parameters Type Name Description CaptureMode captureMode PixelFormat pixelFormat Properties AutoExposure True if exposure is automatic, false if exposure is manually set through Exposure property. Declaration public bool AutoExposure { get; set; } Property Value Type Description Boolean AutoGain True if automatic gain adjustment, false if gain is manually set through Gain property. Note: Setting the value is a non-awaited asynchronous operation, so a get immediately after a set may not result in the same value. Declaration public bool AutoGain { get; set; } Property Value Type Description Boolean Brightness Relative brightness value of the camera image. Range is 0 to 1. Declaration public double Brightness { get; set; } Property Value Type Description Double CaptureMode The capture mode of this camera Declaration public CaptureMode CaptureMode { get; protected set; } Property Value Type Description CaptureMode Contrast Relative contrast value of the camera image. Range is 0 to 1. Declaration public double Contrast { get; set; } Property Value Type Description Double Exposure Current exposure duration in seconds. Declaration public double Exposure { get; set; } Property Value Type Description Double Gain Current camera gain setting. This is a 0 to 1 value that linearly maps to ISO values usable by the device. Note: Setting the value is a non-awaited asynchronous operation, so a get immediately after a set may not result in the same value. Declaration public float Gain { get; set; } Property Value Type Description Single KeepSoftwareBitmap Specifies whether to keep a reference to the camera frames SoftwareBitmap for future operations. Declaration public bool KeepSoftwareBitmap { get; set; } Property Value Type Description Boolean ManualExposureSupported True if manual exposure is supported Declaration public bool ManualExposureSupported { get; } Property Value Type Description Boolean ManualGainSupported Returns whether the camera gain can be set manually or not. Declaration public bool ManualGainSupported { get; } Property Value Type Description Boolean MaxExposure Minimum Exposure value Declaration public double MaxExposure { get; } Property Value Type Description Double MinExposure Maximum exposure value Declaration public double MinExposure { get; } Property Value Type Description Double Resolution Declaration public CameraResolution Resolution { get; } Property Value Type Description CameraResolution State Current state of the camera Declaration public CameraState State { get; } Property Value Type Description CameraState StreamSelector All native resolutions supported in the current camera mode Declaration public StreamSelector StreamSelector { get; } Property Value Type Description StreamSelector Methods Dispose() Disposes the camera Declaration public void Dispose() Initialize() Initializes the camera Declaration public Task Initialize() Returns Type Description Task Start(StreamDescription) Start the video stream. This just prepares the stream for capture, and doesn't start collecting frames Declaration public void Start(StreamDescription streamDesc) Parameters Type Name Description StreamDescription streamDesc The description of the stream to start. StartContinuousCapture() Starts continuous capture Declaration public bool StartContinuousCapture() Returns Type Description Boolean Returns true if starting continuous capture succeeded Stop() Stop the camera. This will release resources and Declaration public void Stop() StopContinuousCapture() Stops continuous capture Declaration public void StopContinuousCapture() TakeSingle() Take a single exposure. The camera must be in the ready state for this call to work. All types of cameras can grab a single frame if not recording continuous Declaration public bool TakeSingle() Returns Type Description Boolean Events OnCameraInitialized Callback to register for camera initialized events Declaration public event OnCameraInitializedHandler OnCameraInitialized Event Type Type Description OnCameraInitializedHandler OnCameraStarted Callback to register for camera started events Declaration public event OnCameraStartedHandler OnCameraStarted Event Type Type Description OnCameraStartedHandler OnFrameCaptured Callback to register for frame captured events Declaration public event OnFrameCapturedHandler OnFrameCaptured Event Type Type Description OnFrameCapturedHandler Implements System.IDisposable"
  },
  "api/Microsoft.MixedReality.PhotoCapture.CameraResolution.html": {
    "href": "api/Microsoft.MixedReality.PhotoCapture.CameraResolution.html",
    "title": "Struct CameraResolution | MixedReality-SpectatorView Documentation",
    "keywords": "Struct CameraResolution Struct containing information related to a camera's resolution and framerate. Implements IEquatable < CameraResolution > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.PhotoCapture Assembly : cs.temp.dll.dll Syntax [Serializable] public struct CameraResolution : IEquatable<CameraResolution> Fields Framerate Framerate of this quality setting in frames per second. This will only be non-zero for Video and PhotoLowLatency modes Declaration public double Framerate Field Value Type Description Double Height Height in pixels of this resolution Declaration public uint Height Field Value Type Description UInt32 Width Width in pixels of this resolution Declaration public uint Width Field Value Type Description UInt32 Methods Equals(CameraResolution) Declaration public bool Equals(CameraResolution other) Parameters Type Name Description CameraResolution other Returns Type Description Boolean Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides ValueType.Equals(Object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode() Operators Equality(CameraResolution, CameraResolution) Declaration public static bool operator ==(CameraResolution lhs, CameraResolution rhs) Parameters Type Name Description CameraResolution lhs CameraResolution rhs Returns Type Description Boolean Inequality(CameraResolution, CameraResolution) Declaration public static bool operator !=(CameraResolution lhs, CameraResolution rhs) Parameters Type Name Description CameraResolution lhs CameraResolution rhs Returns Type Description Boolean Implements System.IEquatable<T>"
  },
  "api/Microsoft.MixedReality.SpectatorView.SpectatorViewPoseCache.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.SpectatorViewPoseCache.html",
    "title": "Class SpectatorViewPoseCache | MixedReality-SpectatorView Documentation",
    "keywords": "Class SpectatorViewPoseCache Caches poses with timestamps from a HoloLens and allows computing a synthesized pose from any timestamp. Inheritance Object SpectatorViewPoseCache Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax [Serializable] public class SpectatorViewPoseCache Fields poses Declaration public List<SpectatorViewPoseCache.PoseData> poses Field Value Type Description List < SpectatorViewPoseCache.PoseData > Methods AddPose(Vector3, Quaternion, Single) Adds a pose to the cache. Declaration public bool AddPose(Vector3 position, Quaternion rotation, float timeStamp) Parameters Type Name Description Vector3 position The position for the pose. Quaternion rotation The rotation for the pose. Single timeStamp The timestamp in seconds of the pose. Returns Type Description Boolean True if the pose was insert, false if the pose was already in the cache. GetLatestPose() Gets the latest pose added to the cache. Declaration public SpectatorViewPoseCache.PoseData GetLatestPose() Returns Type Description SpectatorViewPoseCache.PoseData The most-recent pose available. GetPose(Single, out Vector3, out Quaternion) Gets a synthesized pose from a timestamp. Positions are synthensized by interpolating the recorded poses nearest to the pose time. Declaration public bool GetPose(float poseTime, out Vector3 position, out Quaternion rotation) Parameters Type Name Description Single poseTime The timestamp to synthesize a pose for. Vector3 position The position synthesized for the pose. Quaternion rotation The rotation synthesized for the pose. Returns Type Description Boolean Reset() Declaration public void Reset()"
  },
  "api/Microsoft.MixedReality.SpectatorView.SpectatorViewPoseCache.PoseData.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.SpectatorViewPoseCache.PoseData.html",
    "title": "Class SpectatorViewPoseCache.PoseData | MixedReality-SpectatorView Documentation",
    "keywords": "Class SpectatorViewPoseCache.PoseData Inheritance Object SpectatorViewPoseCache.PoseData Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax [Serializable] public class PoseData Fields Index Declaration public int Index Field Value Type Description Int32 Position Declaration public Vector3 Position Field Value Type Description Vector3 Rotation Declaration public Quaternion Rotation Field Value Type Description Quaternion TimeStamp Declaration public float TimeStamp Field Value Type Description Single"
  },
  "api/Microsoft.MixedReality.SpectatorView.SpectatorViewOpenCVInterface.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.SpectatorViewOpenCVInterface.html",
    "title": "Class SpectatorViewOpenCVInterface | MixedReality-SpectatorView Documentation",
    "keywords": "Class SpectatorViewOpenCVInterface Wrapper class for SpectatorView.OpenCV.dll built from the SpectatorView.Native.sln Inheritance Object SpectatorViewOpenCVInterface Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public class SpectatorViewOpenCVInterface Properties IsInitialized True if the SpectatorViewPlugin.dll has been successfully initialized Declaration public bool IsInitialized { get; } Property Value Type Description Boolean Methods Initialize(Single) Called to initialize SpectatorViewPlugin.dll Declaration public bool Initialize(float markerSize) Parameters Type Name Description Single markerSize Physical size of the markers being detected in meters Returns Type Description Boolean ProcessImage(Byte[], UInt32, UInt32, PixelFormat, CameraIntrinsics, CameraExtrinsics) Assesses the provided image for ArUco markers Declaration public Dictionary<int, Marker> ProcessImage(byte[] imageData, uint imageWidth, uint imageHeight, PixelFormat pixelFormat, CameraIntrinsics intrinsics, CameraExtrinsics extrinsics) Parameters Type Name Description Byte [] imageData UInt32 imageWidth UInt32 imageHeight PixelFormat pixelFormat CameraIntrinsics intrinsics CameraExtrinsics extrinsics Returns Type Description Dictionary < Int32 , Marker > SetMarkerSize(Single) Declaration public void SetMarkerSize(float markerSize) Parameters Type Name Description Single markerSize"
  },
  "api/Microsoft.MixedReality.SpectatorView.SpectatorView.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.SpectatorView.html",
    "title": "Class SpectatorView | MixedReality-SpectatorView Documentation",
    "keywords": "Class SpectatorView Class that facilitates the Spectator View experience Inheritance Object SpectatorView Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public class SpectatorView : MonoBehaviour Fields Role Role of the device in the spectator view experience. Declaration public Role Role Field Value Type Description Role SettingsPrefabName Declaration public const string SettingsPrefabName = \"SpectatorViewSettings\" Field Value Type Description String spectatorDebugVisualPrefab Debug visual prefab created by the spectator. Declaration public GameObject spectatorDebugVisualPrefab Field Value Type Description GameObject spectatorDebugVisualScale Scaling applied to spectator debug visuals. Declaration public float spectatorDebugVisualScale Field Value Type Description Single userDebugVisualPrefab Declaration public GameObject userDebugVisualPrefab Field Value Type Description GameObject userDebugVisualScale Scaling applied to user debug visuals. Declaration public float userDebugVisualScale Field Value Type Description Single"
  },
  "api/Microsoft.MixedReality.SpectatorView.SpatialAnchorsConfiguration.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.SpatialAnchorsConfiguration.html",
    "title": "Class SpatialAnchorsConfiguration | MixedReality-SpectatorView Documentation",
    "keywords": "Class SpatialAnchorsConfiguration Azure Spatial Anchors configuration. Inheritance Object SpatialAnchorsConfiguration Implements ISpatialLocalizationSettings Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax [Serializable] public class SpatialAnchorsConfiguration : ISpatialLocalizationSettings Constructors SpatialAnchorsConfiguration() Declaration public SpatialAnchorsConfiguration() Fields AccessToken Declaration public string AccessToken Field Value Type Description String AccountDomain Declaration public string AccountDomain Field Value Type Description String AccountId The Azure Spatial Anchors service Account Id from Azure portal. NOTE: These values should be used for development/prototyping. In the shipping application its strongly recommended to use user-based or server-based AAD authentication approaches. Declaration public string AccountId Field Value Type Description String AccountKey The Azure Spatial Anchors service Account Key from Azure portal. NOTE: These values should be used for development/prototyping. In the shipping application its strongly recommended to use user-based or server-based AAD authentication approaches. Declaration public string AccountKey Field Value Type Description String AuthenticationToken The AAD Authentication Token to use for Azure Spatial Anchors. NOTE: An Authentication Token is not needed if the AccountDomain, AccountId and AccountKey have been populated. Declaration public string AuthenticationToken Field Value Type Description String Properties IsCoordinateCreator Declaration public bool IsCoordinateCreator { get; set; } Property Value Type Description Boolean Methods Serialize(BinaryWriter) Declaration public void Serialize(BinaryWriter writer) Parameters Type Name Description BinaryWriter writer TryDeserialize(BinaryReader, out SpatialAnchorsConfiguration) Declaration public static bool TryDeserialize(BinaryReader reader, out SpatialAnchorsConfiguration configuration) Parameters Type Name Description BinaryReader reader SpatialAnchorsConfiguration configuration Returns Type Description Boolean Implements ISpatialLocalizationSettings"
  },
  "api/Microsoft.MixedReality.SpectatorView.SocketerClient.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.SocketerClient.html",
    "title": "Class SocketerClient | MixedReality-SpectatorView Documentation",
    "keywords": "Class SocketerClient Simple socket client which uses a generic length-type-data protocol. Chunk format(everything in little-endian order) : uint32_t data_length; uint8_t data[data_length]; NOTE! The code assumes you are running on a little-endian system. Inheritance Object SocketerClient Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public class SocketerClient Constructors SocketerClient(SocketerClient.Protocol, Int32) Creates a Socker that waits for packets or connections. Waits for the other Socketer to connect to it. TCP Socketers can still SendNetworkMessage after a connection. UDP Listeners are not able to SendNetworkMessage. Does not need to have a Host specified. Listeners may listen to multiple Senders. TCP Listeners, when calling SendNetworkMessage, will send to every connected Sender. You must call Start to begin. Declaration public SocketerClient(SocketerClient.Protocol protocol, int port) Parameters Type Name Description SocketerClient.Protocol protocol Underlying protocol to use. Each has advantages and disadvantages. Int32 port The port to use. Suggested values are between 10000 and 40000, and must agree with the Socketer on the other end. SocketerClient(SocketerClient.Protocol, String, Int32) Creates a Socketer that sends packets or initiates connections. Actively tries to connect/send to the other Socketer. TCP Socketers can still receive messages. UDP Senders cannot. Must have a Host specified. May only send to one listening Socketer. You must call Start to begin. Declaration public SocketerClient(SocketerClient.Protocol protocol, string host, int port) Parameters Type Name Description SocketerClient.Protocol protocol Underlying protocol to use. Each has advantages and disadvantages. String host The IP address to connect or send packets to. Int32 port The port to use. Suggested values are between 10000 and 40000, and must agree with the Socketer on the other end. Properties Host The IP address to connect or send packets to. Only populated for senders. Declaration public string Host { get; } Property Value Type Description String OutputQueueLength Declaration public static int OutputQueueLength { get; } Property Value Type Description Int32 Port The port to use. Suggested values are between 10000 and 40000, and must agree. Declaration public int Port { get; } Property Value Type Description Int32 SocketDirection Whether this object should listen for incoming connections/packets, or send them. TCP Socketers are able to both send and recieve once a connection is intitiated. Declaration public SocketerClient.ProtocolDirection SocketDirection { get; } Property Value Type Description SocketerClient.ProtocolDirection SocketProtocol The protocol to use: TCP or UDP. Declaration public SocketerClient.Protocol SocketProtocol { get; } Property Value Type Description SocketerClient.Protocol SuppressUDPHeaders This is a special case property that you probably don't have to touch. It removes socketer's own headers that are layered on top of UDP (it does not affect TCP). The effect is that the type parameter on SendNetworkMessage is ignored, which can be helpful if you wish to implement other protocols (like Open Sound Control) on top of Socketer. Declaration public bool SuppressUDPHeaders { get; set; } Property Value Type Description Boolean Methods CreateListener(SocketerClient.Protocol, Int32) Creates a Socker that waits for packets or connections. Waits for the other Socketer to connect to it. TCP Socketers can still SendNetworkMessage after a connection. UDP Listeners are not able to SendNetworkMessage. Does not need to have a Host specified. Listeners may listen to multiple Senders. TCP Listeners, when calling SendNetworkMessage, will send to every connected Sender. Declaration public static SocketerClient CreateListener(SocketerClient.Protocol protocol, int port) Parameters Type Name Description SocketerClient.Protocol protocol Underlying protocol to use. Each has advantages and disadvantages. Int32 port The port to use. Suggested values are between 10000 and 40000, and must agree with the Socketer on the other end. Returns Type Description SocketerClient CreateSender(SocketerClient.Protocol, String, Int32) Creates a Socketer that sends packets or initiates connections. Actively tries to connect/send to the other Socketer. TCP Socketers can still receive messages. UDP Senders cannot. Must have a Host specified. May only send to one listening Socketer. Declaration public static SocketerClient CreateSender(SocketerClient.Protocol protocol, string host, int port) Parameters Type Name Description SocketerClient.Protocol protocol Underlying protocol to use. Each has advantages and disadvantages. String host The IP address to connect or send packets to. Int32 port The port to use. Suggested values are between 10000 and 40000, and must agree. with the Socketer on the other end. Returns Type Description SocketerClient Disconnect(Int32) Disconnects the client Declaration public void Disconnect(int sourceId) Parameters Type Name Description Int32 sourceId GetLocalIPAddress() Gets the IP of this machine. Suitable for use as a Host on another Socketer. Declaration public static string GetLocalIPAddress() Returns Type Description String The host of the local Socketer. SendNetworkMessage(Byte[], Int32) Sends a byte array to the other side. Works for all Socketers except UDP Listeners. If the other Socketer is not listening, the messages are lost. Declaration public void SendNetworkMessage(byte[] message, int sourceId = 0) Parameters Type Name Description Byte [] message Message contents. Int32 sourceId SendNetworkMessage(String, Int32) Sends a string to the other side. Works for all Socketers except UDP Listeners. If the other Socketer is not listening, the messages are lost. Declaration public void SendNetworkMessage(string message, int sourceId = 0) Parameters Type Name Description String message Message contents. Int32 sourceId Start() Begins either listening or sending. Declaration public void Start() Stop() Stops listening or sending. This should be called when you are done. Declaration public void Stop() Events Connected Called when a TCP connection is made. Not called for UDP Socketers. Will typically NOT be on the same thread as your UI/Update thread. Declaration public event Action<SocketerClient, int, string> Connected Event Type Type Description Action < SocketerClient , Int32 , String > Disconnected Called when a TCP connection is lost. Not called for UDP Socketers. Will typically NOT be on the same thread as your UI/Update thread. Declaration public event Action<SocketerClient, int, string> Disconnected Event Type Type Description Action < SocketerClient , Int32 , String > Message Called when a message is received. Will typically NOT be on the same thread as your UI/Update thread. This is by design. The Unity MonoBehaviour does call this on the Update thread; see that class for a suggested implementation of handling threads. If a Dispatcher is available, simply call that in your handler for this event. Declaration public event Action<SocketerClient, MessageEvent> Message Event Type Type Description Action < SocketerClient , MessageEvent >"
  },
  "api/Microsoft.MixedReality.SpectatorView.SocketerClient.ProtocolDirection.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.SocketerClient.ProtocolDirection.html",
    "title": "Enum SocketerClient.ProtocolDirection | MixedReality-SpectatorView Documentation",
    "keywords": "Enum SocketerClient.ProtocolDirection Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public enum ProtocolDirection Fields Name Description Listener Waits for the other Socketer to connect to it. TCP Socketers can still SendNetworkMessage after a connection. UDP Listeners are not able to SendNetworkMessage. Does not need to have a Host specified. Listeners may listen to multiple Senders. TCP Listeners, when calling SendNetworkMessage, will send to every connected Sender. Sender Actively tries to connect/send to the other Socketer. TCP Socketers can still receive messages. UDP Senders cannot. Must have a Host specified. May only send to one listening Socketer."
  },
  "api/Microsoft.MixedReality.SpectatorView.SocketerClient.Protocol.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.SocketerClient.Protocol.html",
    "title": "Enum SocketerClient.Protocol | MixedReality-SpectatorView Documentation",
    "keywords": "Enum SocketerClient.Protocol Underlying protocol to use. Each has advantages and disadvantages. Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public enum Protocol Fields Name Description TCP Still pretty fast, connections (so you know if you're talking), bidirectional, guaranteed order of arrival and error checking. UDP Fast, simple, connectionless, unidirectional, no guaranteed ordering, no error checking, no way to know if your packets are arriving."
  },
  "api/Microsoft.MixedReality.SpectatorView.Socketer.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.Socketer.html",
    "title": "Class Socketer | MixedReality-SpectatorView Documentation",
    "keywords": "Class Socketer Sends and receives packets over the network, using the chosen protocol. Inheritance Object Socketer Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public class Socketer : MonoBehaviour Fields Direction Whether this object should listen for incoming connections/packets, or send them. TCP Socketers are able to both send and recieve once a connection is intitiated. Declaration public SocketerClient.ProtocolDirection Direction Field Value Type Description SocketerClient.ProtocolDirection Host The IP address to connect to, if the Direction is Sender. Ignored if Listener. Declaration public string Host Field Value Type Description String Port The port to use. Suggested values are between 10000 and 40000, and must agree with the Socketer on the other end. Declaration public int Port Field Value Type Description Int32 Protocol The protocol to use: TCP or UDP. Declaration public SocketerClient.Protocol Protocol Field Value Type Description SocketerClient.Protocol Methods GetLocalIPAddress() Gets the IP of this machine. Suitable for use as a Host on another Socketer. Declaration public static string GetLocalIPAddress() Returns Type Description String SendNetworkMessage(Byte[]) Sends a byte array to the other side. Works for all Socketers except UDP Listeners. If the other Socketer is not listening, the messages are lost. Declaration public void SendNetworkMessage(byte[] message) Parameters Type Name Description Byte [] message Message contents. SendNetworkMessage(String) Sends a byte array to the other side. Works for all Socketers except UDP Listeners. If the other Socketer is not listening, the messages are lost. Declaration public void SendNetworkMessage(string message) Parameters Type Name Description String message Message contents. Events Connected Fired when a TCP connection completes a connection. The string is the Host of the other Socketer. Note: this may fire on a thread other than the Update thread. Declaration public event Action<Socketer, int, string> Connected Event Type Type Description Action < Socketer , Int32 , String > Disconnected Fired when a TCP connection loses a connection. The string is the Host of the other Socketer. Note: this may fire on a thread other than the Update thread. Declaration public event Action<Socketer, int, string> Disconnected Event Type Type Description Action < Socketer , Int32 , String > Message Fired when a message arrives. Runs on the Update thread. Declaration public event Action<Socketer, MessageEvent> Message Event Type Type Description Action < Socketer , MessageEvent >"
  },
  "api/Microsoft.MixedReality.SpectatorView.SocketEndpointConnectionDelta.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.SocketEndpointConnectionDelta.html",
    "title": "Class SocketEndpointConnectionDelta | MixedReality-SpectatorView Documentation",
    "keywords": "Class SocketEndpointConnectionDelta Wrapper class for announcing the current state of network connections Inheritance Object SocketEndpointConnectionDelta Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public class SocketEndpointConnectionDelta Constructors SocketEndpointConnectionDelta(IReadOnlyList<SocketEndpoint>, IReadOnlyList<SocketEndpoint>, IReadOnlyList<SocketEndpoint>) Declaration public SocketEndpointConnectionDelta(IReadOnlyList<SocketEndpoint> addedConnections, IReadOnlyList<SocketEndpoint> removedConnections, IReadOnlyList<SocketEndpoint> continuedConnections) Parameters Type Name Description IReadOnlyList < SocketEndpoint > addedConnections IReadOnlyList < SocketEndpoint > removedConnections IReadOnlyList < SocketEndpoint > continuedConnections Properties AddedConnections Network connections that were newly added. Declaration public IReadOnlyList<SocketEndpoint> AddedConnections { get; } Property Value Type Description IReadOnlyList < SocketEndpoint > ContinuedConnections Network connections that already existed. Declaration public IReadOnlyList<SocketEndpoint> ContinuedConnections { get; } Property Value Type Description IReadOnlyList < SocketEndpoint > HasConnections Returns true if any connections exist. Declaration public bool HasConnections { get; } Property Value Type Description Boolean RemovedConnections Network connections that were recently lost. Declaration public IReadOnlyList<SocketEndpoint> RemovedConnections { get; } Property Value Type Description IReadOnlyList < SocketEndpoint >"
  },
  "api/Microsoft.MixedReality.SpectatorView.SocketEndpoint.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.SocketEndpoint.html",
    "title": "Class SocketEndpoint | MixedReality-SpectatorView Documentation",
    "keywords": "Class SocketEndpoint Inheritance Object SocketEndpoint Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public sealed class SocketEndpoint Constructors SocketEndpoint(SocketerClient, TimeSpan, String, Int32) Declaration public SocketEndpoint(SocketerClient socketerClient, TimeSpan timeoutInterval, string address, int sourceId = 0) Parameters Type Name Description SocketerClient socketerClient TimeSpan timeoutInterval String address Int32 sourceId Properties Address IP address for the socket endpoint Declaration public string Address { get; } Property Value Type Description String IsConnected Returns true if the socket endpoint is connected, otherwise false Declaration public bool IsConnected { get; } Property Value Type Description Boolean Methods CheckConnectionTimeout(DateTime) Checks whether the associated client is still active. If not, the client is disconnected. Declaration public void CheckConnectionTimeout(DateTime currentTime) Parameters Type Name Description DateTime currentTime Time to use relative to last active timestamp to determine whether to disconnect Disconnect() Call to set the socket endpoint state to disconnected Declaration public void Disconnect() QueueIncomingMessages(ConcurrentQueue<IncomingMessage>) Call to start enqueuing incoming messages Declaration public void QueueIncomingMessages(ConcurrentQueue<IncomingMessage> incomingQueue) Parameters Type Name Description ConcurrentQueue < IncomingMessage > incomingQueue Queue used for enqueuing messages Send(Byte[]) Call to send data to this endpoint Declaration public void Send(byte[] data) Parameters Type Name Description Byte [] data data to send StopIncomingMessageQueue() Call to stop enqueuing incoming messages Declaration public void StopIncomingMessageQueue()"
  },
  "api/Microsoft.MixedReality.SpectatorView.Singleton-1.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.Singleton-1.html",
    "title": "Class Singleton<T> | MixedReality-SpectatorView Documentation",
    "keywords": "Class Singleton<T> MonoBehaviour base class used to ensure only one instance of the class exists in the application/scene. Inheritance Object Singleton<T> BroadcasterSettings CommandRegistry<TService> ComponentBroadcasterService<ServiceType, ObserverType> CompositorWorldAnchorLocalizationManager MobileRecordingSettings NetworkConfigurationSettings SpatialCoordinateSystemManager SpatialCoordinateTransformer SpatialLocalizationInitializationSettings StateSynchronizationSceneManager Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public class Singleton<T> : MonoBehaviour where T : Singleton<T> Type Parameters Name Description T Desired type Properties Instance Returns the global instance for the class Declaration public static T Instance { get; } Property Value Type Description T IsInitialized Returns true if the class has been instantiated, otherwise false Declaration public static bool IsInitialized { get; } Property Value Type Description Boolean Methods Awake() Declaration protected virtual void Awake() OnDestroy() Declaration protected virtual void OnDestroy()"
  },
  "api/Microsoft.MixedReality.SpectatorView.QRCodeMarkerDetector.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.QRCodeMarkerDetector.html",
    "title": "Class QRCodeMarkerDetector | MixedReality-SpectatorView Documentation",
    "keywords": "Class QRCodeMarkerDetector QR code detector that implements IMarkerDetector Inheritance Object QRCodeMarkerDetector Implements IMarkerDetector Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public class QRCodeMarkerDetector : MonoBehaviour, IMarkerDetector Properties MarkerPositionBehavior Determines how the marker is expected to be positioned during detection. Declaration public MarkerPositionBehavior MarkerPositionBehavior { get; set; } Property Value Type Description MarkerPositionBehavior Methods SetMarkerSize(Single) Set the physical size for markers being detected Declaration public void SetMarkerSize(float markerSize) Parameters Type Name Description Single markerSize StartDetecting() Starts marker detection Declaration public void StartDetecting() StopDetecting() Stops marker detection Declaration public void StopDetecting() TryGetMarkerSize(Int32, out Single) Tries to obtain the physical size of a detected marker. Returns true if the marker size is known and was determined through detection; otherwise, returns false. Declaration public bool TryGetMarkerSize(int markerId, out float size) Parameters Type Name Description Int32 markerId id of detected marker Single size The physical size (in meters) of the detected marker Returns Type Description Boolean True if the size was located Update() Declaration protected void Update() Events MarkersUpdated Event called when any observed markers have been updated Declaration public event MarkersUpdatedHandler MarkersUpdated Event Type Type Description MarkersUpdatedHandler Implements IMarkerDetector"
  },
  "api/Microsoft.MixedReality.SpectatorView.PlatformSwitcher.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.PlatformSwitcher.html",
    "title": "Class PlatformSwitcher | MixedReality-SpectatorView Documentation",
    "keywords": "Class PlatformSwitcher MonoBehaviour associated with PlatformSwitcherEditor Inheritance Object PlatformSwitcher Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public class PlatformSwitcher : MonoBehaviour"
  },
  "api/Microsoft.MixedReality.SpectatorView.PlatformSpecificGameObject.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.PlatformSpecificGameObject.html",
    "title": "Class PlatformSpecificGameObject | MixedReality-SpectatorView Documentation",
    "keywords": "Class PlatformSpecificGameObject Helper class for enabling/disabling platform specific GameObjects Inheritance Object PlatformSpecificGameObject Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public class PlatformSpecificGameObject : MonoBehaviour Fields _enableOnAndroid Check to have associated GameObject enabled for Android Platform. Declaration protected bool _enableOnAndroid Field Value Type Description Boolean _enableOnHoloLens Check to have associated GameObject enabled for HoloLens Platform. Declaration protected bool _enableOnHoloLens Field Value Type Description Boolean _enableOnIos Check to have associated GameObject enabled for iOS Platform. Declaration protected bool _enableOnIos Field Value Type Description Boolean"
  },
  "api/Microsoft.MixedReality.SpectatorView.OverlayVisibilityRequest.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.OverlayVisibilityRequest.html",
    "title": "Delegate OverlayVisibilityRequest | MixedReality-SpectatorView Documentation",
    "keywords": "Delegate OverlayVisibilityRequest Delegate called to toggle visibility for IMobileOverlayVisualChild ren. Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public delegate void OverlayVisibilityRequest(bool visible); Parameters Type Name Description Boolean visible If true, show any associated game object/UI. If false, hide said content"
  },
  "api/Microsoft.MixedReality.SpectatorView.Editor.CalibrationRecording.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.Editor.CalibrationRecording.html",
    "title": "Class CalibrationRecording | MixedReality-SpectatorView Documentation",
    "keywords": "Class CalibrationRecording Inheritance Object CalibrationRecording Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.SpectatorView.Editor Assembly : cs.temp.dll.dll Syntax [Serializable] public class CalibrationRecording Fields FrameHeight Declaration public int FrameHeight Field Value Type Description Int32 FrameWidth Declaration public int FrameWidth Field Value Type Description Int32 Poses Declaration public List<CalibrationRecordingPose> Poses Field Value Type Description List < CalibrationRecordingPose >"
  },
  "api/Microsoft.MixedReality.SpectatorView.DynamicGameObjectHierarchyObserver-1.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.DynamicGameObjectHierarchyObserver-1.html",
    "title": "Class DynamicGameObjectHierarchyObserver<TComponentService> | MixedReality-SpectatorView Documentation",
    "keywords": "Class DynamicGameObjectHierarchyObserver<TComponentService> A ComponentObserver that allows instantiating a custom child hierarchy for the remote DynamicGameObjectHierarchyBroadcaster. The corresponding DynamicGameObjectHierarchyBroadcaster is responsible for creating an initially-identical child hierarchy. Once both devices have created the same initial hierarchy, the hierarchies are bound together and state synchronization is initialized for all of the GameObjects within that hierarchy. Inheritance Object DynamicGameObjectHierarchyObserver<TComponentService> Implements IComponentObserver Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public abstract class DynamicGameObjectHierarchyObserver<TComponentService> : MonoBehaviour, IComponentObserver where TComponentService : Singleton<TComponentService>, IComponentBroadcasterService Type Parameters Name Description TComponentService The IComponentBroadcasterService responsible for network communication for this IComponentObserver. Properties DynamicObject Declaration protected GameObject DynamicObject { get; set; } Property Value Type Description GameObject Methods ApplyChildTransforms(Transform, DynamicGameObjectHierarchyObserver<TComponentService>.TransformObserverInfo[]) Declaration public static void ApplyChildTransforms(Transform transform, DynamicGameObjectHierarchyObserver<TComponentService>.TransformObserverInfo[] childTransformInfos) Parameters Type Name Description Transform transform DynamicGameObjectHierarchyObserver.TransformObserverInfo <>[] childTransformInfos CreateObserverObject(BinaryReader) Declaration protected abstract void CreateObserverObject(BinaryReader message) Parameters Type Name Description BinaryReader message Read(SocketEndpoint, BinaryReader) Declaration public void Read(SocketEndpoint sendingEndpoint, BinaryReader message) Parameters Type Name Description SocketEndpoint sendingEndpoint BinaryReader message Read(SocketEndpoint, BinaryReader, Byte) Declaration protected virtual void Read(SocketEndpoint sendingEndpoint, BinaryReader message, byte changeType) Parameters Type Name Description SocketEndpoint sendingEndpoint BinaryReader message Byte changeType ReadObserverHierarchyTransformIDs(BinaryReader) Declaration public static DynamicGameObjectHierarchyObserver<TComponentService>.TransformObserverInfo[] ReadObserverHierarchyTransformIDs(BinaryReader message) Parameters Type Name Description BinaryReader message Returns Type Description DynamicGameObjectHierarchyObserver.TransformObserverInfo <>[] Implements IComponentObserver"
  },
  "api/Microsoft.MixedReality.SpectatorView.DynamicGameObjectHierarchyObserver-1.TransformObserverInfo.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.DynamicGameObjectHierarchyObserver-1.TransformObserverInfo.html",
    "title": "Class DynamicGameObjectHierarchyObserver<TComponentService>.TransformObserverInfo | MixedReality-SpectatorView Documentation",
    "keywords": "Class DynamicGameObjectHierarchyObserver<TComponentService>.TransformObserverInfo Inheritance Object DynamicGameObjectHierarchyObserver<TComponentService>.TransformObserverInfo Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public class TransformObserverInfo Properties Children Declaration public DynamicGameObjectHierarchyObserver<TComponentService>.TransformObserverInfo[] Children { get; set; } Property Value Type Description DynamicGameObjectHierarchyObserver.TransformObserverInfo <>[] Id Declaration public short Id { get; set; } Property Value Type Description Int16 Name Declaration public string Name { get; set; } Property Value Type Description String"
  },
  "api/Microsoft.MixedReality.SpectatorView.DynamicGameObjectHierarchyBroadcaster-1.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.DynamicGameObjectHierarchyBroadcaster-1.html",
    "title": "Class DynamicGameObjectHierarchyBroadcaster<TComponentService> | MixedReality-SpectatorView Documentation",
    "keywords": "Class DynamicGameObjectHierarchyBroadcaster<TComponentService> A ComponentBroadcaster that allows instantiating a custom child hierarchy for the remote DynamicGameObjectHierarchyObserver. The corresponding DynamicGameObjectHierarchyObserver is responsible for creating an initially-identical child hierarchy. Once both devices have created the same initial hierarchy, the hierarchies are bound together and state synchronization is initialized for all of the GameObjects within that hierarchy. Inheritance Object ComponentBroadcaster <TComponentService, Byte > DynamicGameObjectHierarchyBroadcaster<TComponentService> Implements IComponentBroadcaster Inherited Members ComponentBroadcaster<TComponentService, Byte>.transformBroadcaster ComponentBroadcaster<TComponentService, Byte>.TransformBroadcaster ComponentBroadcaster<TComponentService, Byte>.ComponentBroadcasterService ComponentBroadcaster<TComponentService, Byte>.IComponentBroadcaster.ComponentBroadcasterService ComponentBroadcaster<TComponentService, Byte>.Awake() ComponentBroadcaster<TComponentService, Byte>.OnDestroy() ComponentBroadcaster<TComponentService, Byte>.UpdateWhenDisabled ComponentBroadcaster<TComponentService, Byte>.ResetFrame() ComponentBroadcaster<TComponentService, Byte>.ShouldSendChanges(SocketEndpoint) ComponentBroadcaster<TComponentService, Byte>.ProcessNewConnections(SocketEndpointConnectionDelta) ComponentBroadcaster<TComponentService, Byte>.ProcessNewConnections(IEnumerable<SocketEndpoint>) ComponentBroadcaster<TComponentService, Byte>.OnFrameCompleted(SocketEndpointConnectionDelta) ComponentBroadcaster<TComponentService, Byte>.SendComponentCreation(IEnumerable<SocketEndpoint>) ComponentBroadcaster<TComponentService, Byte>.OnInitialized() ComponentBroadcaster<TComponentService, Byte>.ShouldUpdateFrame(SocketEndpoint) ComponentBroadcaster<TComponentService, Byte>.BeginUpdatingFrame(SocketEndpointConnectionDelta) ComponentBroadcaster<TComponentService, Byte>.EndUpdatingFrame() ComponentBroadcaster<TComponentService, Byte>.SendCompleteChanges(IEnumerable<SocketEndpoint>) ComponentBroadcaster<TComponentService, Byte>.CalculateDeltaChanges() ComponentBroadcaster<TComponentService, Byte>.HasChanges(Byte) ComponentBroadcaster<TComponentService, Byte>.SendDeltaChanges(IEnumerable<SocketEndpoint>, Byte) ComponentBroadcaster<TComponentService, Byte>.RemoveDisconnectedEndpoints(IEnumerable<SocketEndpoint>) Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public abstract class DynamicGameObjectHierarchyBroadcaster<TComponentService> : ComponentBroadcaster<TComponentService, byte>, IComponentBroadcaster where TComponentService : Singleton<TComponentService>, IComponentBroadcasterService Type Parameters Name Description TComponentService The IComponentBroadcasterService responsible for network communication for this ComponentBroadcaster. Properties DynamicObject Gets or sets the locally-created dynamic GameObject hierarchy root. Declaration protected GameObject DynamicObject { get; set; } Property Value Type Description GameObject Methods CalculateDeltaChanges() Declaration protected override byte CalculateDeltaChanges() Returns Type Description Byte Overrides Microsoft.MixedReality.SpectatorView.ComponentBroadcaster<TComponentService, System.Byte>.CalculateDeltaChanges() HasChanges(Byte) Declaration protected override bool HasChanges(byte changeFlags) Parameters Type Name Description Byte changeFlags Returns Type Description Boolean Overrides Microsoft.MixedReality.SpectatorView.ComponentBroadcaster<TComponentService, System.Byte>.HasChanges(System.Byte) ProcessNewConnections(IEnumerable<SocketEndpoint>) Declaration protected override void ProcessNewConnections(IEnumerable<SocketEndpoint> connectionsRequiringFullUpdate) Parameters Type Name Description IEnumerable < SocketEndpoint > connectionsRequiringFullUpdate Overrides Microsoft.MixedReality.SpectatorView.ComponentBroadcaster<TComponentService, System.Byte>.ProcessNewConnections(IEnumerable<Microsoft.MixedReality.SpectatorView.SocketEndpoint>) Read(SocketEndpoint, BinaryReader) Declaration public void Read(SocketEndpoint sendingEndpoint, BinaryReader message) Parameters Type Name Description SocketEndpoint sendingEndpoint BinaryReader message Read(SocketEndpoint, BinaryReader, Byte) Declaration protected virtual void Read(SocketEndpoint sendingEndpoint, BinaryReader message, byte changeType) Parameters Type Name Description SocketEndpoint sendingEndpoint BinaryReader message Byte changeType RemoveDisconnectedEndpoints(IEnumerable<SocketEndpoint>) Declaration protected override void RemoveDisconnectedEndpoints(IEnumerable<SocketEndpoint> endpoints) Parameters Type Name Description IEnumerable < SocketEndpoint > endpoints Overrides Microsoft.MixedReality.SpectatorView.ComponentBroadcaster<TComponentService, System.Byte>.RemoveDisconnectedEndpoints(IEnumerable<Microsoft.MixedReality.SpectatorView.SocketEndpoint>) SendCompleteChanges(IEnumerable<SocketEndpoint>) Declaration protected override void SendCompleteChanges(IEnumerable<SocketEndpoint> endpoints) Parameters Type Name Description IEnumerable < SocketEndpoint > endpoints Overrides Microsoft.MixedReality.SpectatorView.ComponentBroadcaster<TComponentService, System.Byte>.SendCompleteChanges(IEnumerable<Microsoft.MixedReality.SpectatorView.SocketEndpoint>) SendDeltaChanges(IEnumerable<SocketEndpoint>, Byte) Declaration protected override void SendDeltaChanges(IEnumerable<SocketEndpoint> endpoints, byte changeFlags) Parameters Type Name Description IEnumerable < SocketEndpoint > endpoints Byte changeFlags Overrides Microsoft.MixedReality.SpectatorView.ComponentBroadcaster<TComponentService, System.Byte>.SendDeltaChanges(IEnumerable<Microsoft.MixedReality.SpectatorView.SocketEndpoint>, System.Byte) SendInstantiationRequest() Declaration protected void SendInstantiationRequest() ShouldSendChanges(SocketEndpoint) Declaration protected override bool ShouldSendChanges(SocketEndpoint endpoint) Parameters Type Name Description SocketEndpoint endpoint Returns Type Description Boolean Overrides Microsoft.MixedReality.SpectatorView.ComponentBroadcaster<TComponentService, System.Byte>.ShouldSendChanges(Microsoft.MixedReality.SpectatorView.SocketEndpoint) WriteInstantiationRequestParameters(BinaryWriter) Declaration protected abstract void WriteInstantiationRequestParameters(BinaryWriter message) Parameters Type Name Description BinaryWriter message Implements IComponentBroadcaster"
  },
  "api/Microsoft.MixedReality.SpectatorView.DebugVisualHelper.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.DebugVisualHelper.html",
    "title": "Class DebugVisualHelper | MixedReality-SpectatorView Documentation",
    "keywords": "Class DebugVisualHelper Helper class for creating and placing multiple prefabs at different locations in the scene Inheritance Object DebugVisualHelper Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public class DebugVisualHelper : MonoBehaviour Fields _scale Scale applied to the provided prefab when shown at the specified location Declaration protected Vector3 _scale Field Value Type Description Vector3 prefab Prefab to create at the provided location Declaration protected GameObject prefab Field Value Type Description GameObject Methods CreateOrUpdateVisual(ref GameObject, Vector3, Quaternion) Call to transform or create and transform a GameObject to the provided position and rotation. Declaration public void CreateOrUpdateVisual(ref GameObject visual, Vector3 position, Quaternion rotation) Parameters Type Name Description GameObject visual If null, a new GameObject will be istantiated from the provided prefab. If non-null the provided GameObject's position and rotation will be updated Vector3 position Position to apply to the provided GameObject Quaternion rotation Rotation to apply to the provided GameObject CreateOrUpdateVisual(ref GameObject, Vector3, Quaternion, Vector3) Call to transform or create and transform a GameObject to the provided position and rotation. Declaration public void CreateOrUpdateVisual(ref GameObject visual, Vector3 position, Quaternion rotation, Vector3 scale) Parameters Type Name Description GameObject visual If null, a new GameObject will be istantiated from the provided prefab. If non-null the provided GameObject's position and rotation will be updated Vector3 position Position to apply to the provided GameObject Quaternion rotation Rotation to apply to the provided GameObject Vector3 scale SetTransform(GameObject, Vector3, Quaternion, Vector3) Declaration protected void SetTransform(GameObject visual, Vector3 position, Quaternion rotation, Vector3 scale) Parameters Type Name Description GameObject visual Vector3 position Quaternion rotation Vector3 scale"
  },
  "api/Microsoft.MixedReality.SpectatorView.ConnectedEventHandler.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.ConnectedEventHandler.html",
    "title": "Delegate ConnectedEventHandler | MixedReality-SpectatorView Documentation",
    "keywords": "Delegate ConnectedEventHandler Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public delegate void ConnectedEventHandler(SocketEndpoint endpoint); Parameters Type Name Description SocketEndpoint endpoint"
  },
  "api/Microsoft.MixedReality.SpectatorView.CompositorWorldAnchorLocalizationManager.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.CompositorWorldAnchorLocalizationManager.html",
    "title": "Class CompositorWorldAnchorLocalizationManager | MixedReality-SpectatorView Documentation",
    "keywords": "Class CompositorWorldAnchorLocalizationManager Component responsible for requesting localization of shared coordinates on devices connected to the compositor. Shared coordinates are persisted using the WorldAnchorSpatialLocalizer after they are resolved, and are restored upon initial connection. Inheritance Object Singleton < CompositorWorldAnchorLocalizationManager > CompositorWorldAnchorLocalizationManager Inherited Members Singleton<CompositorWorldAnchorLocalizationManager>.IsInitialized Singleton<CompositorWorldAnchorLocalizationManager>.Awake() Singleton<CompositorWorldAnchorLocalizationManager>.Instance Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public class CompositorWorldAnchorLocalizationManager : Singleton<CompositorWorldAnchorLocalizationManager> Methods OnDestroy() Declaration protected override void OnDestroy() Overrides Microsoft.MixedReality.SpectatorView.Singleton<Microsoft.MixedReality.SpectatorView.CompositorWorldAnchorLocalizationManager>.OnDestroy() RunRemoteLocalizationWithWorldAnchorPersistence(SpatialCoordinateSystemParticipant, Guid, ISpatialLocalizationSettings) Runs a localization session on the specific SpatialCoordinateSystemParticipant 's connected peer, followed by creating a persisted WorldAnchor-based ISpatialCoordinate based on the located coordinate. Declaration public void RunRemoteLocalizationWithWorldAnchorPersistence(SpatialCoordinateSystemParticipant participant, Guid spatialLocalizerId, ISpatialLocalizationSettings settings) Parameters Type Name Description SpatialCoordinateSystemParticipant participant The participant to use to initiate the remote localization sessions. Guid spatialLocalizerId The ID of the ISpatialLocalizer to use for discovering a spatial coordinate. ISpatialLocalizationSettings settings The settings to pass to the remote localizer."
  },
  "api/Microsoft.MixedReality.SpectatorView.CompositionManager.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.CompositionManager.html",
    "title": "Class CompositionManager | MixedReality-SpectatorView Documentation",
    "keywords": "Class CompositionManager Manages compositing real-world video and holograms together and creating an output video texture with recorded audio. Inheritance Object CompositionManager Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public class CompositionManager : MonoBehaviour Fields AntiAliasing Gets or sets the sampling level for antialiasing when supersampling is used. Declaration public CompositionManager.AntiAliasingSamples AntiAliasing Field Value Type Description CompositionManager.AntiAliasingSamples DefaultAlpha Gets or sets the alpha value used for rendering holograms on top of video. Declaration public float DefaultAlpha Field Value Type Description Single EnableMicrophoneAudio Gets or sets whether microphone audio should be recorded into the output video. Declaration public bool EnableMicrophoneAudio Field Value Type Description Boolean Filter Gets or sets the filter mode for downsampling when supersampling is used. Declaration public FilterMode Filter Field Value Type Description FilterMode SuperSampleLevel Gets or sets the number of additional buffers to use for supersampling. Each additional buffer doubles the size of the rendered holograms before they're downsampled to the video resolution. Declaration public int SuperSampleLevel Field Value Type Description Int32 TextureDepth Gets or sets the texture depth used for the RenderTextures used during compositing. Declaration public CompositionManager.Depth TextureDepth Field Value Type Description CompositionManager.Depth Properties CaptureDevice Gets or sets the type of capture device to read video content from. Declaration public FrameProviderDeviceType CaptureDevice { get; set; } Property Value Type Description FrameProviderDeviceType CurrentCompositeFrame Gets the index of the video frame currently being composited. Declaration public int CurrentCompositeFrame { get; } Property Value Type Description Int32 FramerateStatistics Declaration public Queue<float> FramerateStatistics { get; } Property Value Type Description Queue < Single > IsVideoFrameProviderInitialized Gets whether or not the video frame provider has finished initialization. Declaration public bool IsVideoFrameProviderInitialized { get; } Property Value Type Description Boolean TextureManager Gets the texture manager used for compositing. Declaration public TextureManager TextureManager { get; } Property Value Type Description TextureManager VideoRecordingLayout Declaration public VideoRecordingFrameLayout VideoRecordingLayout { get; set; } Property Value Type Description VideoRecordingFrameLayout VideoTimestampToHolographicTimestampOffset Gets or sets the additional time offset in seconds to adjust holographic timestamps from the HoloLens to video timestamps from the compositor. Declaration public float VideoTimestampToHolographicTimestampOffset { get; set; } Property Value Type Description Single Methods AddCameraPose(Vector3, Quaternion, Single) Adds a new camera pose with the time the camera was at when that pose was registered. Declaration public void AddCameraPose(Vector3 cameraPosition, Quaternion cameraRotation, float cameraTimestamp) Parameters Type Name Description Vector3 cameraPosition The position of the camera relative to the origin anchor. Quaternion cameraRotation The rotation of the camera relative to the origin anchor. Single cameraTimestamp The timestamp the pose was recorded at in the camera's time system. EnableHolographicCamera(Transform, ICalibrationData) Enables the holographic camera rig for compositing. The hologram camera will be adjusted to match calibration data (its position and rotation will track the external camera, and its projection matrix will match the calibration information for the video camera used for compositing). Declaration public void EnableHolographicCamera(Transform parent, ICalibrationData calibrationData) Parameters Type Name Description Transform parent The parent transform that the holographic camera rig should be attached to. ICalibrationData calibrationData The calibration data used to set up the position, rotation, and projection matrix for the holographic camera. GetHologramTime() Gets the timestamp of the hologram that will be composited for the current frame of the compositor. Declaration public float GetHologramTime() Returns Type Description Single The hologram timestamp corresponding to the current video frame, in Unity's timeline. OnPreCull() Declaration protected void OnPreCull() ResetOnNewCameraConnection() Clears cached information about synchronized poses and time offsets. Declaration public void ResetOnNewCameraConnection()"
  },
  "api/Microsoft.MixedReality.SpectatorView.ComponentBroadcasterService-2.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.ComponentBroadcasterService-2.html",
    "title": "Class ComponentBroadcasterService<ServiceType, ObserverType> | MixedReality-SpectatorView Documentation",
    "keywords": "Class ComponentBroadcasterService<ServiceType, ObserverType> Abstract class for services that manage IComponentBroadcaster Inheritance Object Singleton <ServiceType> ComponentBroadcasterService<ServiceType, ObserverType> TransformBroadcasterService Implements IComponentBroadcasterService Inherited Members Singleton<ServiceType>.IsInitialized Singleton<ServiceType>.Awake() Singleton<ServiceType>.OnDestroy() Singleton<ServiceType>.Instance Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public abstract class ComponentBroadcasterService<ServiceType, ObserverType> : Singleton<ServiceType>, IComponentBroadcasterService where ServiceType : Singleton<ServiceType> where ObserverType : UnityEngine.Component, IComponentObserver Type Parameters Name Description ServiceType The service type used for defining a singleton of said service ObserverType The IComponentObserver type that the service manages Methods Create(GameObject) Ensures that the IComponentObserver type defined for the service exists for the provided game object Declaration public virtual void Create(GameObject mirror) Parameters Type Name Description GameObject mirror Destroy(GameObject) Ensures that the IComponentObserver type defined for the service is removed from the provided game object Declaration public virtual void Destroy(GameObject mirror) Parameters Type Name Description GameObject mirror GetID() Returns a unique id associated with the service Declaration public abstract ShortID GetID() Returns Type Description ShortID unique id LerpRead(BinaryReader, GameObject, Single) Relays the IComponentObserver defined for the game object a network message for interpolating Declaration public virtual void LerpRead(BinaryReader message, GameObject mirror, float lerpVal) Parameters Type Name Description BinaryReader message network message GameObject mirror game object to broadcast Single lerpVal interpolation value Read(SocketEndpoint, BinaryReader, GameObject) Ensures an IComponentObserver exists on the provided game object and relays it a network message Declaration public virtual void Read(SocketEndpoint sendingEndpoint, BinaryReader message, GameObject mirror) Parameters Type Name Description SocketEndpoint sendingEndpoint Endpoint that sent the message BinaryReader message network message GameObject mirror game object to broadcast WriteHeader(BinaryWriter, IComponentBroadcaster, ComponentBroadcasterChangeType) Writes IComponentBroadcaster information to a network message for sending to other devices Declaration public void WriteHeader(BinaryWriter message, IComponentBroadcaster component, ComponentBroadcasterChangeType changeType = ComponentBroadcasterChangeType.Updated) Parameters Type Name Description BinaryWriter message network message to send IComponentBroadcaster component component that has changed ComponentBroadcasterChangeType changeType type of changed that occurred for the specified component WriteHeader(BinaryWriter, TransformObserver, ComponentBroadcasterChangeType) Writes TransformObserver information to a network message for sending to other devices Declaration public void WriteHeader(BinaryWriter message, TransformObserver TransformObserver, ComponentBroadcasterChangeType changeType = ComponentBroadcasterChangeType.Updated) Parameters Type Name Description BinaryWriter message network message to send TransformObserver TransformObserver transform that has changed ComponentBroadcasterChangeType changeType type of changed that occurred for the specified component Implements IComponentBroadcasterService"
  },
  "api/Microsoft.MixedReality.SpectatorView.ComponentBroadcasterDefinition.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.ComponentBroadcasterDefinition.html",
    "title": "Class ComponentBroadcasterDefinition | MixedReality-SpectatorView Documentation",
    "keywords": "Class ComponentBroadcasterDefinition Component which defines when and how to attach a ComponentBroadcaster to a GameObject. ComponentBroadcasters can be created unconditionally or due to certain requirements being present on the provided GameObject. Inheritance Object ComponentBroadcasterDefinition ComponentBroadcasterDefinition<TComponentBroadcaster> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public abstract class ComponentBroadcasterDefinition Properties IsTransformBroadcasterController Gets whether or not this ComponentBroadcasterDefinition may need to perform modifications to the GameObject before other ComponentBroadcasterDefinitions are allowed to create ComponentBroadcasters. Declaration public abstract bool IsTransformBroadcasterController { get; } Property Value Type Description Boolean Methods EnsureComponentBroadcastersCreated(GameObject, out Boolean) Method which checks for the existence of requirements on the provided GameObject and either creates or destroys ComponentBroadcasters as necessary. Declaration public abstract void EnsureComponentBroadcastersCreated(GameObject gameObject, out bool changesDetected) Parameters Type Name Description GameObject gameObject The GameObject to check the state of. Boolean changesDetected True if ComponentBroadcasters were added or removed, otherwise false."
  },
  "api/Microsoft.MixedReality.SpectatorView.ComponentBroadcasterDefinition-1.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.ComponentBroadcasterDefinition-1.html",
    "title": "Class ComponentBroadcasterDefinition<TComponentBroadcaster> | MixedReality-SpectatorView Documentation",
    "keywords": "Class ComponentBroadcasterDefinition<TComponentBroadcaster> Attaches a ComponentBroadcaster of type TComponentBroadcaster to a GameObject if and only if a required set of Component types are present on the GameObject. Inheritance Object ComponentBroadcasterDefinition ComponentBroadcasterDefinition<TComponentBroadcaster> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public class ComponentBroadcasterDefinition<TComponentBroadcaster> : ComponentBroadcasterDefinition where TComponentBroadcaster : Component Type Parameters Name Description TComponentBroadcaster The type of ComponentBroadcaster to attach when requirements are met. Constructors ComponentBroadcasterDefinition(Boolean, Type[]) Creates a new definition, specifying whether the component definition is a transform controller and which set of Component types are required. Declaration public ComponentBroadcasterDefinition(bool isTransformBroadcasterController, params Type[] requiredComponents) Parameters Type Name Description Boolean isTransformBroadcasterController Whether or not this component is a transform controller. Type [] requiredComponents The set of Component types which must be present on the GameObject in order for the ComponentBroadcaster to be created. An empty list means that the ComponentBroadcaster will never be created. ComponentBroadcasterDefinition(Type[]) Creates a new definition with a set of required Component types. Declaration public ComponentBroadcasterDefinition(params Type[] requiredComponents) Parameters Type Name Description Type [] requiredComponents The set of Component types which must be present on the GameObject in order for the ComponentBroadcaster to be created. An empty list means that the ComponentBroadcaster will never be created. Properties IsTransformBroadcasterController Declaration public override bool IsTransformBroadcasterController { get; } Property Value Type Description Boolean Overrides ComponentBroadcasterDefinition.IsTransformBroadcasterController Methods EnsureComponentBroadcastersCreated(GameObject, out Boolean) Method which checks for the existence of requirements on the provided GameObject and either creates or destroys ComponentBroadcasters as necessary. Declaration public override void EnsureComponentBroadcastersCreated(GameObject gameObject, out bool changesDetected) Parameters Type Name Description GameObject gameObject The GameObject to check the state of. Boolean changesDetected True if ComponentBroadcasters were added or removed, otherwise false. Overrides ComponentBroadcasterDefinition.EnsureComponentBroadcastersCreated(GameObject, out Boolean)"
  },
  "api/Microsoft.MixedReality.SpectatorView.ComponentBroadcasterChangeType.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.ComponentBroadcasterChangeType.html",
    "title": "Enum ComponentBroadcasterChangeType | MixedReality-SpectatorView Documentation",
    "keywords": "Enum ComponentBroadcasterChangeType Types of state changes that may occur for an IComponentBroadcaster Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public enum ComponentBroadcasterChangeType : byte Fields Name Description Created Destroyed Updated"
  },
  "api/Microsoft.MixedReality.SpectatorView.CommandHandler.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.CommandHandler.html",
    "title": "Delegate CommandHandler | MixedReality-SpectatorView Documentation",
    "keywords": "Delegate CommandHandler Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public delegate void CommandHandler(SocketEndpoint endpoint, string command, BinaryReader reader, int remainingDataSize); Parameters Type Name Description SocketEndpoint endpoint String command BinaryReader reader Int32 remainingDataSize"
  },
  "api/Microsoft.MixedReality.SpectatorView.CameraPoseProvider.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.CameraPoseProvider.html",
    "title": "Class CameraPoseProvider | MixedReality-SpectatorView Documentation",
    "keywords": "Class CameraPoseProvider Component that provides time-adjusted holographic poses to the compositor. Inheritance Object CameraPoseProvider Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public class CameraPoseProvider : MonoBehaviour"
  },
  "api/Microsoft.MixedReality.SpectatorView.CalculatedCameraIntrinsics.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.CalculatedCameraIntrinsics.html",
    "title": "Class CalculatedCameraIntrinsics | MixedReality-SpectatorView Documentation",
    "keywords": "Class CalculatedCameraIntrinsics Inheritance Object CalculatedCameraIntrinsics Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax [Serializable] public class CalculatedCameraIntrinsics : CameraIntrinsics Constructors CalculatedCameraIntrinsics(Single, Vector2, UInt32, UInt32, Vector2, Vector3, Vector2, Matrix4x4) Declaration public CalculatedCameraIntrinsics(float reprojectionError, Vector2 focalLength, uint imageWidth, uint imageHeight, Vector2 principalPoint, Vector3 radialDistortion, Vector2 tangentialDistortion, Matrix4x4 undistortedProjectionTransform) Parameters Type Name Description Single reprojectionError Vector2 focalLength UInt32 imageWidth UInt32 imageHeight Vector2 principalPoint Vector3 radialDistortion Vector2 tangentialDistortion Matrix4x4 undistortedProjectionTransform Fields ReprojectionError Reprojection error for the calculated intrinsics Declaration public float ReprojectionError Field Value Type Description Single Methods Serialize() Declaration public byte[] Serialize() Returns Type Description Byte [] ToString() Declaration public override string ToString() Returns Type Description String TryDeserialize(Byte[], out CalculatedCameraIntrinsics) Declaration public static bool TryDeserialize(byte[] payload, out CalculatedCameraIntrinsics intrinsics) Parameters Type Name Description Byte [] payload CalculatedCameraIntrinsics intrinsics Returns Type Description Boolean"
  },
  "api/Microsoft.MixedReality.SpectatorView.CalculatedCameraExtrinsics.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.CalculatedCameraExtrinsics.html",
    "title": "Class CalculatedCameraExtrinsics | MixedReality-SpectatorView Documentation",
    "keywords": "Class CalculatedCameraExtrinsics Inheritance Object CalculatedCameraExtrinsics Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax [Serializable] public class CalculatedCameraExtrinsics : CameraExtrinsics Constructors CalculatedCameraExtrinsics() Declaration public CalculatedCameraExtrinsics() Fields Succeeded True if the calculation succeeded, otherwise false Declaration public bool Succeeded Field Value Type Description Boolean Methods Serialize() Declaration public byte[] Serialize() Returns Type Description Byte [] ToString() Declaration public override string ToString() Returns Type Description String TryDeserialize(Byte[], out CalculatedCameraExtrinsics) Declaration public static bool TryDeserialize(byte[] payload, out CalculatedCameraExtrinsics extrinsics) Parameters Type Name Description Byte [] payload CalculatedCameraExtrinsics extrinsics Returns Type Description Boolean"
  },
  "api/Microsoft.MixedReality.SpectatorView.AudioSourceProperties.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.AudioSourceProperties.html",
    "title": "Struct AudioSourceProperties | MixedReality-SpectatorView Documentation",
    "keywords": "Struct AudioSourceProperties Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public struct AudioSourceProperties Constructors AudioSourceProperties(AudioSource) Declaration public AudioSourceProperties(AudioSource audioSource) Parameters Type Name Description AudioSource audioSource Properties bypassEffects Declaration public bool bypassEffects { get; set; } Property Value Type Description Boolean bypassListenerEffects Declaration public bool bypassListenerEffects { get; set; } Property Value Type Description Boolean bypassReverbZones Declaration public bool bypassReverbZones { get; set; } Property Value Type Description Boolean clip Declaration public AudioClip clip { get; set; } Property Value Type Description AudioClip dopplerLevel Declaration public float dopplerLevel { get; set; } Property Value Type Description Single enabled Declaration public bool enabled { get; set; } Property Value Type Description Boolean ignoreListenerPause Declaration public bool ignoreListenerPause { get; set; } Property Value Type Description Boolean ignoreListenerVolume Declaration public bool ignoreListenerVolume { get; set; } Property Value Type Description Boolean loop Declaration public bool loop { get; set; } Property Value Type Description Boolean maxDistance Declaration public float maxDistance { get; set; } Property Value Type Description Single minDistance Declaration public float minDistance { get; set; } Property Value Type Description Single mute Declaration public bool mute { get; set; } Property Value Type Description Boolean outputAudioMixerGroup Declaration public AudioMixerGroup outputAudioMixerGroup { get; set; } Property Value Type Description AudioMixerGroup panStereo Declaration public float panStereo { get; set; } Property Value Type Description Single pitch Declaration public float pitch { get; set; } Property Value Type Description Single priority Declaration public int priority { get; set; } Property Value Type Description Int32 reverbZoneMix Declaration public float reverbZoneMix { get; set; } Property Value Type Description Single rolloffMode Declaration public AudioRolloffMode rolloffMode { get; set; } Property Value Type Description AudioRolloffMode spatialBlend Declaration public float spatialBlend { get; set; } Property Value Type Description Single spatialize Declaration public bool spatialize { get; set; } Property Value Type Description Boolean spatializePostEffects Declaration public bool spatializePostEffects { get; set; } Property Value Type Description Boolean spread Declaration public float spread { get; set; } Property Value Type Description Single velocityUpdateMode Declaration public AudioVelocityUpdateMode velocityUpdateMode { get; set; } Property Value Type Description AudioVelocityUpdateMode Methods Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides ValueType.Equals(Object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode() Operators Equality(AudioSourceProperties, AudioSourceProperties) Declaration public static bool operator ==(AudioSourceProperties first, AudioSourceProperties second) Parameters Type Name Description AudioSourceProperties first AudioSourceProperties second Returns Type Description Boolean Inequality(AudioSourceProperties, AudioSourceProperties) Declaration public static bool operator !=(AudioSourceProperties first, AudioSourceProperties second) Parameters Type Name Description AudioSourceProperties first AudioSourceProperties second Returns Type Description Boolean"
  },
  "api/Microsoft.MixedReality.SpectatorView.ArUcoMarkerVisualSpatialLocalizer.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.ArUcoMarkerVisualSpatialLocalizer.html",
    "title": "Class ArUcoMarkerVisualSpatialLocalizer | MixedReality-SpectatorView Documentation",
    "keywords": "Class ArUcoMarkerVisualSpatialLocalizer Inheritance Object SpatialLocalizer < MarkerVisualLocalizationSettings > MarkerVisualSpatialLocalizer ArUcoMarkerVisualSpatialLocalizer Implements ISpatialLocalizer Inherited Members MarkerVisualSpatialLocalizer.MarkerVisualPrefab MarkerVisualSpatialLocalizer.markerVisual MarkerVisualSpatialLocalizer.TryCreateLocalizationSession(IPeerConnection, MarkerVisualLocalizationSettings, ISpatialLocalizationSession) MarkerVisualSpatialLocalizer.TryDeserializeSettings(BinaryReader, MarkerVisualLocalizationSettings) SpatialLocalizer<MarkerVisualLocalizationSettings>.lockObject SpatialLocalizer<MarkerVisualLocalizationSettings>.debugLogging SpatialLocalizer<MarkerVisualLocalizationSettings>.DebugLog(String) SpatialLocalizer<MarkerVisualLocalizationSettings>.Start() SpatialLocalizer<MarkerVisualLocalizationSettings>.OnDestroy() SpatialLocalizer<MarkerVisualLocalizationSettings>.CreateDefaultSettings() SpatialLocalizer<MarkerVisualLocalizationSettings>.ISpatialLocalizer.TryDeserializeSettings(BinaryReader, ISpatialLocalizationSettings) SpatialLocalizer<MarkerVisualLocalizationSettings>.ISpatialLocalizer.TryCreateLocalizationSession(IPeerConnection, ISpatialLocalizationSettings, ISpatialLocalizationSession) Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public class ArUcoMarkerVisualSpatialLocalizer : MarkerVisualSpatialLocalizer, ISpatialLocalizer Fields Id Declaration public static readonly Guid Id Field Value Type Description Guid Properties DetectorId Declaration public static Guid DetectorId { get; } Property Value Type Description Guid DisplayName Declaration public override string DisplayName { get; } Property Value Type Description String Overrides Microsoft.MixedReality.SpectatorView.SpatialLocalizer<Microsoft.MixedReality.SpectatorView.MarkerVisualLocalizationSettings>.DisplayName IsSupported Declaration protected override bool IsSupported { get; } Property Value Type Description Boolean Overrides Microsoft.MixedReality.SpectatorView.SpatialLocalizer<Microsoft.MixedReality.SpectatorView.MarkerVisualLocalizationSettings>.IsSupported MarkerVisualDetectorSpatialLocalizerId Declaration public override Guid MarkerVisualDetectorSpatialLocalizerId { get; } Property Value Type Description Guid Overrides MarkerVisualSpatialLocalizer.MarkerVisualDetectorSpatialLocalizerId SpatialLocalizerId Declaration public override Guid SpatialLocalizerId { get; } Property Value Type Description Guid Overrides Microsoft.MixedReality.SpectatorView.SpatialLocalizer<Microsoft.MixedReality.SpectatorView.MarkerVisualLocalizationSettings>.SpatialLocalizerId Implements ISpatialLocalizer"
  },
  "api/Microsoft.MixedReality.SpectatorView.ArUcoMarkerDetectorSpatialLocalizer.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.ArUcoMarkerDetectorSpatialLocalizer.html",
    "title": "Class ArUcoMarkerDetectorSpatialLocalizer | MixedReality-SpectatorView Documentation",
    "keywords": "Class ArUcoMarkerDetectorSpatialLocalizer Inheritance Object SpatialLocalizer < MarkerDetectorLocalizationSettings > MarkerDetectorSpatialLocalizer ArUcoMarkerDetectorSpatialLocalizer Implements ISpatialLocalizer Inherited Members MarkerDetectorSpatialLocalizer.markerDetector MarkerDetectorSpatialLocalizer.TryDeserializeSettings(BinaryReader, MarkerDetectorLocalizationSettings) MarkerDetectorSpatialLocalizer.TryCreateLocalizationSession(IPeerConnection, MarkerDetectorLocalizationSettings, ISpatialLocalizationSession) SpatialLocalizer<MarkerDetectorLocalizationSettings>.lockObject SpatialLocalizer<MarkerDetectorLocalizationSettings>.debugLogging SpatialLocalizer<MarkerDetectorLocalizationSettings>.DebugLog(String) SpatialLocalizer<MarkerDetectorLocalizationSettings>.Start() SpatialLocalizer<MarkerDetectorLocalizationSettings>.OnDestroy() SpatialLocalizer<MarkerDetectorLocalizationSettings>.CreateDefaultSettings() SpatialLocalizer<MarkerDetectorLocalizationSettings>.ISpatialLocalizer.TryDeserializeSettings(BinaryReader, ISpatialLocalizationSettings) SpatialLocalizer<MarkerDetectorLocalizationSettings>.ISpatialLocalizer.TryCreateLocalizationSession(IPeerConnection, ISpatialLocalizationSettings, ISpatialLocalizationSession) Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public class ArUcoMarkerDetectorSpatialLocalizer : MarkerDetectorSpatialLocalizer, ISpatialLocalizer Fields Id Declaration public static readonly Guid Id Field Value Type Description Guid Properties DisplayName Declaration public override string DisplayName { get; } Property Value Type Description String Overrides Microsoft.MixedReality.SpectatorView.SpatialLocalizer<Microsoft.MixedReality.SpectatorView.MarkerDetectorLocalizationSettings>.DisplayName IsSupported Declaration protected override bool IsSupported { get; } Property Value Type Description Boolean Overrides Microsoft.MixedReality.SpectatorView.SpatialLocalizer<Microsoft.MixedReality.SpectatorView.MarkerDetectorLocalizationSettings>.IsSupported SpatialLocalizerId Declaration public override Guid SpatialLocalizerId { get; } Property Value Type Description Guid Overrides Microsoft.MixedReality.SpectatorView.SpatialLocalizer<Microsoft.MixedReality.SpectatorView.MarkerDetectorLocalizationSettings>.SpatialLocalizerId Implements ISpatialLocalizer"
  },
  "api/Microsoft.MixedReality.SpectatorView.ArUcoMarkerDetector.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.ArUcoMarkerDetector.html",
    "title": "Class ArUcoMarkerDetector | MixedReality-SpectatorView Documentation",
    "keywords": "Class ArUcoMarkerDetector Class implementing IMarkerDetector capable of detecting ArUco markers Inheritance Object ArUcoMarkerDetector Implements IMarkerDetector Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public class ArUcoMarkerDetector : MonoBehaviour, IMarkerDetector Fields MarkerInlierStandardDeviationThreshold Declaration public float MarkerInlierStandardDeviationThreshold Field Value Type Description Single MaximumMarkerSampleCount Declaration public int MaximumMarkerSampleCount Field Value Type Description Int32 MaximumPositionDistanceStandardDeviation Declaration public float MaximumPositionDistanceStandardDeviation Field Value Type Description Single MaximumRotationAngleStandardDeviation Declaration public float MaximumRotationAngleStandardDeviation Field Value Type Description Single RequiredInlierCount Declaration public int RequiredInlierCount Field Value Type Description Int32 RequiredObservations Declaration public int RequiredObservations Field Value Type Description Int32 Properties MarkerPositionBehavior Determines how the marker is expected to be positioned during detection. Declaration public MarkerPositionBehavior MarkerPositionBehavior { get; set; } Property Value Type Description MarkerPositionBehavior Methods SetMarkerSize(Single) Set the physical size for markers being detected Declaration public void SetMarkerSize(float size) Parameters Type Name Description Single size The physical size (in meters) of markers being detected StartDetecting() Starts marker detection Declaration public void StartDetecting() StopDetecting() Stops marker detection Declaration public void StopDetecting() TryGetMarkerSize(Int32, out Single) Tries to obtain the physical size of a detected marker. Returns true if the marker size is known and was determined through detection; otherwise, returns false. Declaration public bool TryGetMarkerSize(int markerId, out float size) Parameters Type Name Description Int32 markerId id of detected marker Single size The physical size (in meters) of the detected marker Returns Type Description Boolean True if the size was located Events MarkersUpdated Event called when any observed markers have been updated Declaration public event MarkersUpdatedHandler MarkersUpdated Event Type Type Description MarkersUpdatedHandler Implements IMarkerDetector"
  },
  "api/Microsoft.MixedReality.SpatialAlignment.SpatialCoordinateUnityBase-1.html": {
    "href": "api/Microsoft.MixedReality.SpatialAlignment.SpatialCoordinateUnityBase-1.html",
    "title": "Class SpatialCoordinateUnityBase<TKey> | MixedReality-SpectatorView Documentation",
    "keywords": "Class SpatialCoordinateUnityBase<TKey> Helper base class for implementations of ISpatialCoordinate . Inheritance Object SpatialCoordinateBase <TKey> SpatialCoordinateUnityBase<TKey> Implements ISpatialCoordinate Inherited Members SpatialCoordinateBase<TKey>.StateChanged SpatialCoordinateBase<TKey>.ISpatialCoordinate.Id SpatialCoordinateBase<TKey>.Id SpatialCoordinateBase<TKey>.State SpatialCoordinateBase<TKey>.OnStateChanged() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.SpatialAlignment Assembly : cs.temp.dll.dll Syntax public abstract class SpatialCoordinateUnityBase<TKey> : SpatialCoordinateBase<TKey>, ISpatialCoordinate Type Parameters Name Description TKey The type of Id for this coordinate. Constructors SpatialCoordinateUnityBase(TKey) Declaration public SpatialCoordinateUnityBase(TKey id) Parameters Type Name Description TKey id Fields worldMatrix Declaration protected UnityEngine.Matrix4x4 worldMatrix Field Value Type Description UnityEngine.Matrix4x4 Methods CoordinateToWorldSpace(Quaternion) Declaration public override sealed Quaternion CoordinateToWorldSpace(Quaternion quaternion) Parameters Type Name Description Quaternion quaternion Returns Type Description Quaternion Overrides Microsoft.MixedReality.SpatialAlignment.SpatialCoordinateBase<TKey>.CoordinateToWorldSpace(Quaternion) CoordinateToWorldSpace(UnityEngine.Quaternion) Declaration protected virtual UnityEngine.Quaternion CoordinateToWorldSpace(UnityEngine.Quaternion quaternion) Parameters Type Name Description UnityEngine.Quaternion quaternion Returns Type Description UnityEngine.Quaternion CoordinateToWorldSpace(UnityEngine.Vector3) Declaration protected virtual UnityEngine.Vector3 CoordinateToWorldSpace(UnityEngine.Vector3 vector) Parameters Type Name Description UnityEngine.Vector3 vector Returns Type Description UnityEngine.Vector3 CoordinateToWorldSpace(Vector3) Declaration public override sealed Vector3 CoordinateToWorldSpace(Vector3 vector) Parameters Type Name Description Vector3 vector Returns Type Description Vector3 Overrides Microsoft.MixedReality.SpatialAlignment.SpatialCoordinateBase<TKey>.CoordinateToWorldSpace(Vector3) SetCoordinateWorldTransform(UnityEngine.Vector3, UnityEngine.Quaternion) Declaration protected void SetCoordinateWorldTransform(UnityEngine.Vector3 worldPosition, UnityEngine.Quaternion worldRotation) Parameters Type Name Description UnityEngine.Vector3 worldPosition UnityEngine.Quaternion worldRotation WorldToCoordinateSpace(Quaternion) Declaration public override sealed Quaternion WorldToCoordinateSpace(Quaternion quaternion) Parameters Type Name Description Quaternion quaternion Returns Type Description Quaternion Overrides Microsoft.MixedReality.SpatialAlignment.SpatialCoordinateBase<TKey>.WorldToCoordinateSpace(Quaternion) WorldToCoordinateSpace(UnityEngine.Quaternion) Declaration protected virtual UnityEngine.Quaternion WorldToCoordinateSpace(UnityEngine.Quaternion quaternion) Parameters Type Name Description UnityEngine.Quaternion quaternion Returns Type Description UnityEngine.Quaternion WorldToCoordinateSpace(UnityEngine.Vector3) Declaration protected virtual UnityEngine.Vector3 WorldToCoordinateSpace(UnityEngine.Vector3 vector) Parameters Type Name Description UnityEngine.Vector3 vector Returns Type Description UnityEngine.Vector3 WorldToCoordinateSpace(Vector3) Declaration public override sealed Vector3 WorldToCoordinateSpace(Vector3 vector) Parameters Type Name Description Vector3 vector Returns Type Description Vector3 Overrides Microsoft.MixedReality.SpatialAlignment.SpatialCoordinateBase<TKey>.WorldToCoordinateSpace(Vector3) Implements ISpatialCoordinate"
  },
  "api/Microsoft.MixedReality.SpatialAlignment.SpatialCoordinateServiceUnityBase-1.html": {
    "href": "api/Microsoft.MixedReality.SpatialAlignment.SpatialCoordinateServiceUnityBase-1.html",
    "title": "Class SpatialCoordinateServiceUnityBase<TKey> | MixedReality-SpectatorView Documentation",
    "keywords": "Class SpatialCoordinateServiceUnityBase<TKey> Helper base class for ISpatialCoordinateService implementations. Inheritance Object DisposableBase SpatialCoordinateServiceBase <TKey> SpatialCoordinateServiceUnityBase<TKey> Implements ISpatialCoordinateService IDisposable Inherited Members SpatialCoordinateServiceBase<TKey>.CoordinatedDiscovered SpatialCoordinateServiceBase<TKey>.CoordinateRemoved SpatialCoordinateServiceBase<TKey>.disposedCTS SpatialCoordinateServiceBase<TKey>.knownCoordinates SpatialCoordinateServiceBase<TKey>.IsTracking SpatialCoordinateServiceBase<TKey>.SupportsDiscovery SpatialCoordinateServiceBase<TKey>.KnownCoordinates SpatialCoordinateServiceBase<TKey>.OnManagedDispose() SpatialCoordinateServiceBase<TKey>.ISpatialCoordinateService.TryGetKnownCoordinate(String, ISpatialCoordinate) SpatialCoordinateServiceBase<TKey>.TryGetKnownCoordinate(TKey, ISpatialCoordinate) SpatialCoordinateServiceBase<TKey>.OnNewCoordinate(TKey, ISpatialCoordinate) SpatialCoordinateServiceBase<TKey>.OnRemoveCoordinate(TKey) SpatialCoordinateServiceBase<TKey>.ISpatialCoordinateService.TryDeleteCoordinateAsync(String, CancellationToken) SpatialCoordinateServiceBase<TKey>.TryDeleteCoordinateAsync(TKey, CancellationToken) SpatialCoordinateServiceBase<TKey>.ISpatialCoordinateService.TryDiscoverCoordinatesAsync(CancellationToken, String[]) SpatialCoordinateServiceBase<TKey>.TryDiscoverCoordinatesAsync(CancellationToken, TKey[]) SpatialCoordinateServiceBase<TKey>.TryParse(String, TKey) SpatialCoordinateServiceBase<TKey>.OnDiscoverCoordinatesAsync(CancellationToken, TKey[]) DisposableBase.IsDisposed DisposableBase.ObjectName DisposableBase.Dispose() DisposableBase.OnUnmanagedDispose() DisposableBase.ThrowIfDisposed() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.SpatialAlignment Assembly : cs.temp.dll.dll Syntax public abstract class SpatialCoordinateServiceUnityBase<TKey> : SpatialCoordinateServiceBase<TKey>, ISpatialCoordinateService, IDisposable Type Parameters Name Description TKey They key for the ISpatialCoordinate . Methods TryCreateCoordinateAsync(UnityEngine.Vector3, UnityEngine.Quaternion, CancellationToken) Declaration protected virtual Task<ISpatialCoordinate> TryCreateCoordinateAsync(UnityEngine.Vector3 worldPosition, UnityEngine.Quaternion worldRotation, CancellationToken cancellationToken) Parameters Type Name Description UnityEngine.Vector3 worldPosition UnityEngine.Quaternion worldRotation CancellationToken cancellationToken Returns Type Description Task < ISpatialCoordinate > TryCreateCoordinateAsync(Vector3, Quaternion, CancellationToken) Declaration public override sealed Task<ISpatialCoordinate> TryCreateCoordinateAsync(Vector3 worldPosition, Quaternion worldRotation, CancellationToken cancellationToken) Parameters Type Name Description Vector3 worldPosition Quaternion worldRotation CancellationToken cancellationToken Returns Type Description Task < ISpatialCoordinate > Overrides Microsoft.MixedReality.SpatialAlignment.SpatialCoordinateServiceBase<TKey>.TryCreateCoordinateAsync(Vector3, Quaternion, CancellationToken) Implements ISpatialCoordinateService System.IDisposable"
  },
  "api/Microsoft.MixedReality.SpatialAlignment.SpatialCoordinateLocalizer.html": {
    "href": "api/Microsoft.MixedReality.SpatialAlignment.SpatialCoordinateLocalizer.html",
    "title": "Class SpatialCoordinateLocalizer | MixedReality-SpectatorView Documentation",
    "keywords": "Class SpatialCoordinateLocalizer Very simple consumer of ISpatialCoordinate to demonstrate usage. Inheritance Object SpatialCoordinateLocalizer Namespace : Microsoft.MixedReality.SpatialAlignment Assembly : cs.temp.dll.dll Syntax public class SpatialCoordinateLocalizer : MonoBehaviour Fields CoordinateRelativePosition Declaration public Vector3 CoordinateRelativePosition Field Value Type Description Vector3 CoordinateRelativeRotation Declaration public Quaternion CoordinateRelativeRotation Field Value Type Description Quaternion debugLogging Check to enable debug logging. Declaration public bool debugLogging Field Value Type Description Boolean debugVisual Game Object to render at spatial coordinate location when showing debug visuals. Declaration public GameObject debugVisual Field Value Type Description GameObject debugVisualScale Debug visual scale. Declaration public float debugVisualScale Field Value Type Description Single showDebugVisuals Check to show debug visuals. Declaration public bool showDebugVisuals Field Value Type Description Boolean Properties Coordinate The coordinate to use for position the targetRoot. Declaration public ISpatialCoordinate Coordinate { get; set; } Property Value Type Description ISpatialCoordinate"
  },
  "api/Microsoft.MixedReality.SpatialAlignment.SpatialCoordinateBase-1.html": {
    "href": "api/Microsoft.MixedReality.SpatialAlignment.SpatialCoordinateBase-1.html",
    "title": "Class SpatialCoordinateBase<TKey> | MixedReality-SpectatorView Documentation",
    "keywords": "Class SpatialCoordinateBase<TKey> Helper base class for implementations of ISpatialCoordinate . Inheritance Object SpatialCoordinateBase<TKey> SpatialCoordinateUnityBase<TKey> Implements ISpatialCoordinate Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.SpatialAlignment Assembly : cs.temp.dll.dll Syntax public abstract class SpatialCoordinateBase<TKey> : ISpatialCoordinate Type Parameters Name Description TKey The type of Id for this coordinate. Constructors SpatialCoordinateBase(TKey) Declaration public SpatialCoordinateBase(TKey id) Parameters Type Name Description TKey id Properties Id The Id for this coordinate. Declaration public TKey Id { get; } Property Value Type Description TKey State Gets the current state of the coordinate. Declaration public virtual LocatedState State { get; } Property Value Type Description LocatedState Methods CoordinateToWorldSpace(Quaternion) Converts coordinate space position to world space position. For example, applying this transform to Quaternion.identity would return the quaternion of the coordinate in the local application's world space. Declaration public abstract Quaternion CoordinateToWorldSpace(Quaternion quaternion) Parameters Type Name Description Quaternion quaternion Returns Type Description Quaternion CoordinateToWorldSpace(Vector3) Converts coordinate space position to world space position. For example, applying this transform to Vector3.zero would return the position of the coordinate in the local application's world space. Declaration public abstract Vector3 CoordinateToWorldSpace(Vector3 vector) Parameters Type Name Description Vector3 vector Returns Type Description Vector3 OnStateChanged() Declaration protected void OnStateChanged() WorldToCoordinateSpace(Quaternion) Converts world space rotation to coordinate space rotation. For example, applying this transform to Quaternion.identity would return the quaternion of the local application's world space origin in the coordinate space. Declaration public abstract Quaternion WorldToCoordinateSpace(Quaternion quaternion) Parameters Type Name Description Quaternion quaternion Returns Type Description Quaternion WorldToCoordinateSpace(Vector3) Converts world space position to coordinate space position. For example, applying this transform to Vector3.zero would return the position of the local application's world space origin in the coordinate space. Declaration public abstract Vector3 WorldToCoordinateSpace(Vector3 vector) Parameters Type Name Description Vector3 vector Returns Type Description Vector3 Events StateChanged Declaration public event Action StateChanged Event Type Type Description Action Explicit Interface Implementations ISpatialCoordinate.Id Gets the Id representing this coordinate. Declaration string ISpatialCoordinate.Id { get; } Returns Type Description String Implements ISpatialCoordinate"
  },
  "api/Microsoft.MixedReality.SpectatorView.TextureManager.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.TextureManager.html",
    "title": "Class TextureManager | MixedReality-SpectatorView Documentation",
    "keywords": "Class TextureManager Manages the textures used for compositing holograms with video, and controls the actual composition of textures together. Inheritance Object TextureManager Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public class TextureManager : MonoBehaviour"
  },
  "api/Microsoft.MixedReality.SpectatorView.TCPConnectionManagerTest.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.TCPConnectionManagerTest.html",
    "title": "Class TCPConnectionManagerTest | MixedReality-SpectatorView Documentation",
    "keywords": "Class TCPConnectionManagerTest Helper class for testing socketer TCPConnectionManager Inheritance Object TCPConnectionManagerTest Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public class TCPConnectionManagerTest : MonoBehaviour Fields connectionManager TCPConnectionManager to use for networking Declaration protected TCPConnectionManager connectionManager Field Value Type Description TCPConnectionManager runAsServer Check to run as the server Declaration protected bool runAsServer Field Value Type Description Boolean timeBetweenBroadcasts Time between broadcasts Declaration protected float timeBetweenBroadcasts Field Value Type Description Single"
  },
  "api/Microsoft.MixedReality.SpectatorView.TCPConnectionManager.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.TCPConnectionManager.html",
    "title": "Class TCPConnectionManager | MixedReality-SpectatorView Documentation",
    "keywords": "Class TCPConnectionManager Helper class for setting up a TCP based network connection Inheritance Object TCPConnectionManager Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public class TCPConnectionManager : MonoBehaviour Properties HasConnections Returns true if any server or client connections exist, otherwise false Declaration public bool HasConnections { get; } Property Value Type Description Boolean IsConnecting Returns true if a connection is being attempted, otherwise false Declaration public bool IsConnecting { get; } Property Value Type Description Boolean OutputBytesQueued Returns the number of bytes currently queued for the socketer server Declaration public int OutputBytesQueued { get; } Property Value Type Description Int32 Methods Broadcast(Byte[]) Call to broadcast the provided data to all connected clients/servers Declaration public void Broadcast(byte[] data) Parameters Type Name Description Byte [] data data to send ConnectTo(String, Int32) Call to start acting as a client connected to the provided server and port Declaration public void ConnectTo(string serverAddress, int port) Parameters Type Name Description String serverAddress server to connect to Int32 port port to use for communication DisconnectAll() Disconnect all connections Declaration public void DisconnectAll() DoStopListening(ref SocketerClient) Declaration protected void DoStopListening(ref SocketerClient listener) Parameters Type Name Description SocketerClient listener OnServerDisconnected(SocketerClient, Int32, String) Declaration protected virtual void OnServerDisconnected(SocketerClient client, int sourceId, string clientAddress) Parameters Type Name Description SocketerClient client Int32 sourceId String clientAddress StartListening(Int32) Call to begin acting as a server listening on the provided port Declaration public void StartListening(int port) Parameters Type Name Description Int32 port port to listen on StopListening() Call to stop acting as a server Declaration public void StopListening() Events OnConnected Called when a client or server connection is established and the connection manager is using the TCP protocol. Declaration public event Action<SocketEndpoint> OnConnected Event Type Type Description Action < SocketEndpoint > OnDisconnected Called when a client or server connection is disconnected and the connection manager is using the TCP protocol. Declaration public event Action<SocketEndpoint> OnDisconnected Event Type Type Description Action < SocketEndpoint > OnReceive Called when a data payload is received Declaration public event Action<IncomingMessage> OnReceive Event Type Type Description Action < IncomingMessage >"
  },
  "api/Microsoft.MixedReality.SpectatorView.SpatialLocalizer-1.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.SpatialLocalizer-1.html",
    "title": "Class SpatialLocalizer<TSpatialLocalizationSettings> | MixedReality-SpectatorView Documentation",
    "keywords": "Class SpatialLocalizer<TSpatialLocalizationSettings> Helper class to enable spatial localization between two entities on SpectatorView. Inheritance Object SpatialLocalizer<TSpatialLocalizationSettings> MarkerDetectorSpatialLocalizer MarkerVisualDetectorSpatialLocalizer MarkerVisualSpatialLocalizer SpatialAnchorsLocalizer WorldAnchorSpatialLocalizer Implements ISpatialLocalizer Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public abstract class SpatialLocalizer<TSpatialLocalizationSettings> : MonoBehaviour, ISpatialLocalizer where TSpatialLocalizationSettings : ISpatialLocalizationSettings, new() Type Parameters Name Description TSpatialLocalizationSettings Remarks In the future this would move to SpatialLocalization in a better form, abstraction-wise. Fields debugLogging Declaration protected bool debugLogging Field Value Type Description Boolean lockObject Declaration protected readonly object lockObject Field Value Type Description Object Properties DisplayName Declaration public abstract string DisplayName { get; } Property Value Type Description String IsSupported Declaration protected abstract bool IsSupported { get; } Property Value Type Description Boolean SpatialLocalizerId Declaration public abstract Guid SpatialLocalizerId { get; } Property Value Type Description Guid Methods CreateDefaultSettings() Declaration public virtual ISpatialLocalizationSettings CreateDefaultSettings() Returns Type Description ISpatialLocalizationSettings DebugLog(String) Helper method for logging troubleshooting information. Declaration protected void DebugLog(string message) Parameters Type Name Description String message Message to log. OnDestroy() Declaration protected virtual void OnDestroy() Start() Declaration protected virtual void Start() TryCreateLocalizationSession(IPeerConnection, TSpatialLocalizationSettings, out ISpatialLocalizationSession) Declaration public abstract bool TryCreateLocalizationSession(IPeerConnection peerConnection, TSpatialLocalizationSettings settings, out ISpatialLocalizationSession session) Parameters Type Name Description IPeerConnection peerConnection TSpatialLocalizationSettings settings ISpatialLocalizationSession session Returns Type Description Boolean TryDeserializeSettings(BinaryReader, out TSpatialLocalizationSettings) Declaration public abstract bool TryDeserializeSettings(BinaryReader reader, out TSpatialLocalizationSettings settings) Parameters Type Name Description BinaryReader reader TSpatialLocalizationSettings settings Returns Type Description Boolean Explicit Interface Implementations ISpatialLocalizer.TryCreateLocalizationSession(IPeerConnection, ISpatialLocalizationSettings, out ISpatialLocalizationSession) Declaration bool ISpatialLocalizer.TryCreateLocalizationSession(IPeerConnection peerConnection, ISpatialLocalizationSettings settings, out ISpatialLocalizationSession session) Parameters Type Name Description IPeerConnection peerConnection ISpatialLocalizationSettings settings ISpatialLocalizationSession session Returns Type Description Boolean ISpatialLocalizer.TryDeserializeSettings(BinaryReader, out ISpatialLocalizationSettings) Declaration bool ISpatialLocalizer.TryDeserializeSettings(BinaryReader reader, out ISpatialLocalizationSettings settings) Parameters Type Name Description BinaryReader reader ISpatialLocalizationSettings settings Returns Type Description Boolean Implements ISpatialLocalizer"
  },
  "api/Microsoft.MixedReality.SpectatorView.SpatialLocalizationInitializer.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.SpatialLocalizationInitializer.html",
    "title": "Class SpatialLocalizationInitializer | MixedReality-SpectatorView Documentation",
    "keywords": "Class SpatialLocalizationInitializer Inheritance Object SpatialLocalizationInitializer MarkerVisualLocalizationInitializer SpatialAnchorsCoordinateLocalizationInitializer Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public abstract class SpatialLocalizationInitializer : MonoBehaviour Properties PeerSpatialLocalizerId Gets the ID of the ISpatialLocalizer that should be run on the connected peer device to initiate localization. Declaration public abstract Guid PeerSpatialLocalizerId { get; } Property Value Type Description Guid Methods RunLocalization(SpatialCoordinateSystemParticipant) Declaration public abstract void RunLocalization(SpatialCoordinateSystemParticipant participant) Parameters Type Name Description SpatialCoordinateSystemParticipant participant"
  },
  "api/Microsoft.MixedReality.SpectatorView.SpatialLocalizationInitializationSettings.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.SpatialLocalizationInitializationSettings.html",
    "title": "Class SpatialLocalizationInitializationSettings | MixedReality-SpectatorView Documentation",
    "keywords": "Class SpatialLocalizationInitializationSettings Inheritance Object Singleton < SpatialLocalizationInitializationSettings > SpatialLocalizationInitializationSettings Inherited Members Singleton<SpatialLocalizationInitializationSettings>.IsInitialized Singleton<SpatialLocalizationInitializationSettings>.Awake() Singleton<SpatialLocalizationInitializationSettings>.OnDestroy() Singleton<SpatialLocalizationInitializationSettings>.Instance Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public class SpatialLocalizationInitializationSettings : Singleton<SpatialLocalizationInitializationSettings> Properties PrioritizedInitializers Declaration public SpatialLocalizationInitializer[] PrioritizedInitializers { get; } Property Value Type Description SpatialLocalizationInitializer []"
  },
  "api/Microsoft.MixedReality.SpectatorView.SpatialCoordinateTransformer.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.SpatialCoordinateTransformer.html",
    "title": "Class SpatialCoordinateTransformer | MixedReality-SpectatorView Documentation",
    "keywords": "Class SpatialCoordinateTransformer Positions a transform representing a world origin such that a connected peer device's world origin (relative to a shared spatial coordinate) is used as the effective local world origin (as determined by the shared spatial coordinate). Inheritance Object Singleton < SpatialCoordinateTransformer > SpatialCoordinateTransformer Inherited Members Singleton<SpatialCoordinateTransformer>.IsInitialized Singleton<SpatialCoordinateTransformer>.Awake() Singleton<SpatialCoordinateTransformer>.Instance Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public class SpatialCoordinateTransformer : Singleton<SpatialCoordinateTransformer> Properties SharedCoordinateOrigin Declaration public Transform SharedCoordinateOrigin { get; } Property Value Type Description Transform Methods OnDestroy() Declaration protected override void OnDestroy() Overrides Microsoft.MixedReality.SpectatorView.Singleton<Microsoft.MixedReality.SpectatorView.SpatialCoordinateTransformer>.OnDestroy()"
  },
  "api/Microsoft.MixedReality.SpectatorView.SpatialCoordinateSystemParticipant.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.SpatialCoordinateSystemParticipant.html",
    "title": "Class SpatialCoordinateSystemParticipant | MixedReality-SpectatorView Documentation",
    "keywords": "Class SpatialCoordinateSystemParticipant The SpectatorView helper class for managing a participant in the spatial coordinate system Inheritance Object SpatialCoordinateSystemParticipant Implements IPeerConnection Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public class SpatialCoordinateSystemParticipant : DisposableBase, IPeerConnection Constructors SpatialCoordinateSystemParticipant(SocketEndpoint, GameObject, Single) Declaration public SpatialCoordinateSystemParticipant(SocketEndpoint endpoint, GameObject debugVisualPrefab, float debugVisualScale) Parameters Type Name Description SocketEndpoint endpoint GameObject debugVisualPrefab Single debugVisualScale Properties Coordinate Declaration public ISpatialCoordinate Coordinate { get; set; } Property Value Type Description ISpatialCoordinate CurrentLocalizationSession Gets the currently-running localization session for this participant; Declaration public ISpatialLocalizationSession CurrentLocalizationSession { get; } Property Value Type Description ISpatialLocalizationSession IsLocatingSpatialCoordinate Declaration public bool IsLocatingSpatialCoordinate { get; } Property Value Type Description Boolean PeerDeviceHasTracking Gets the last-reported tracking status of the peer device. Declaration public bool PeerDeviceHasTracking { get; } Property Value Type Description Boolean PeerIsLocatingSpatialCoordinate Gets whether or not the peer device is actively attempting to locate the shared spatial coordinate. Declaration public bool PeerIsLocatingSpatialCoordinate { get; } Property Value Type Description Boolean PeerSpatialCoordinateIsLocated Gets the last-reported status of whether or not the peer's spatial coordinate is located and tracking. Declaration public bool PeerSpatialCoordinateIsLocated { get; } Property Value Type Description Boolean PeerSpatialCoordinateWorldPosition Gets the position of the shared spatial coordinate in the peer device's world space. Declaration public Vector3 PeerSpatialCoordinateWorldPosition { get; } Property Value Type Description Vector3 PeerSpatialCoordinateWorldRotation Gets the rotation of the shared spatial coordinate in the peer device's world space. Declaration public Quaternion PeerSpatialCoordinateWorldRotation { get; } Property Value Type Description Quaternion ShowDebugVisuals Declaration public bool ShowDebugVisuals { get; set; } Property Value Type Description Boolean SocketEndpoint Declaration public SocketEndpoint SocketEndpoint { get; } Property Value Type Description SocketEndpoint Methods EnsureStateChangesAreBroadcast() Declaration public void EnsureStateChangesAreBroadcast() GetPeerSupportedLocalizersAsync() Declaration public Task<ISet<Guid>> GetPeerSupportedLocalizersAsync() Returns Type Description Task < ISet < Guid >> OnManagedDispose() Declaration protected override void OnManagedDispose() SendData(Action<BinaryWriter>) Declaration public void SendData(Action<BinaryWriter> writeCallback) Parameters Type Name Description Action < BinaryWriter > writeCallback Implements IPeerConnection"
  },
  "api/Microsoft.MixedReality.SpectatorView.QRCodeMarkerVisualDetectorSpatialLocalizer.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.QRCodeMarkerVisualDetectorSpatialLocalizer.html",
    "title": "Class QRCodeMarkerVisualDetectorSpatialLocalizer | MixedReality-SpectatorView Documentation",
    "keywords": "Class QRCodeMarkerVisualDetectorSpatialLocalizer Inheritance Object SpatialLocalizer < MarkerVisualDetectorLocalizationSettings > MarkerVisualDetectorSpatialLocalizer QRCodeMarkerVisualDetectorSpatialLocalizer Implements ISpatialLocalizer Inherited Members MarkerVisualDetectorSpatialLocalizer.MarkerDetector MarkerVisualDetectorSpatialLocalizer.TryCreateLocalizationSession(IPeerConnection, MarkerVisualDetectorLocalizationSettings, ISpatialLocalizationSession) MarkerVisualDetectorSpatialLocalizer.TryDeserializeSettings(BinaryReader, MarkerVisualDetectorLocalizationSettings) SpatialLocalizer<MarkerVisualDetectorLocalizationSettings>.lockObject SpatialLocalizer<MarkerVisualDetectorLocalizationSettings>.debugLogging SpatialLocalizer<MarkerVisualDetectorLocalizationSettings>.DebugLog(String) SpatialLocalizer<MarkerVisualDetectorLocalizationSettings>.Start() SpatialLocalizer<MarkerVisualDetectorLocalizationSettings>.OnDestroy() SpatialLocalizer<MarkerVisualDetectorLocalizationSettings>.CreateDefaultSettings() SpatialLocalizer<MarkerVisualDetectorLocalizationSettings>.ISpatialLocalizer.TryDeserializeSettings(BinaryReader, ISpatialLocalizationSettings) SpatialLocalizer<MarkerVisualDetectorLocalizationSettings>.ISpatialLocalizer.TryCreateLocalizationSession(IPeerConnection, ISpatialLocalizationSettings, ISpatialLocalizationSession) Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public class QRCodeMarkerVisualDetectorSpatialLocalizer : MarkerVisualDetectorSpatialLocalizer, ISpatialLocalizer Fields Id Declaration public static readonly Guid Id Field Value Type Description Guid Properties DisplayName Declaration public override string DisplayName { get; } Property Value Type Description String Overrides Microsoft.MixedReality.SpectatorView.SpatialLocalizer<Microsoft.MixedReality.SpectatorView.MarkerVisualDetectorLocalizationSettings>.DisplayName IsSupported Declaration protected override bool IsSupported { get; } Property Value Type Description Boolean Overrides Microsoft.MixedReality.SpectatorView.SpatialLocalizer<Microsoft.MixedReality.SpectatorView.MarkerVisualDetectorLocalizationSettings>.IsSupported SpatialLocalizerId Declaration public override Guid SpatialLocalizerId { get; } Property Value Type Description Guid Overrides Microsoft.MixedReality.SpectatorView.SpatialLocalizer<Microsoft.MixedReality.SpectatorView.MarkerVisualDetectorLocalizationSettings>.SpatialLocalizerId Implements ISpatialLocalizer"
  },
  "api/Microsoft.MixedReality.SpectatorView.QRCodeMarkerVisual.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.QRCodeMarkerVisual.html",
    "title": "Class QRCodeMarkerVisual | MixedReality-SpectatorView Documentation",
    "keywords": "Class QRCodeMarkerVisual Inheritance Object QRCodeMarkerVisual Implements IMarkerVisual Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public class QRCodeMarkerVisual : MonoBehaviour, IMarkerVisual Fields _markerSize Physical size to display the marker (in meters) Declaration protected float _markerSize Field Value Type Description Single Methods HideMarker() Hides any shown markers Declaration public void HideMarker() ShowMarker(Int32) Shows the specified marker Declaration public void ShowMarker(int id) Parameters Type Name Description Int32 id Id of the marker to show TryGetMaxSupportedMarkerId(out Int32) Tries to obtain the maximum marker id supported by this marker visual. Declaration public bool TryGetMaxSupportedMarkerId(out int markerId) Parameters Type Name Description Int32 markerId Returns Type Description Boolean Returns true if the maximum marker id can be found, otherwise false. TrySetMarkerSize(Single) Tries to set the physical size for displaying markers Declaration public bool TrySetMarkerSize(float size) Parameters Type Name Description Single size The physical size (in meters) that markers should be when shown Returns Type Description Boolean Returns true if the marker can be set to the provided size, otherwise false. TrySetScaleFactor(Single) Tries to set an additional scale factors for the marker visual. Declaration public bool TrySetScaleFactor(float scaleFactor) Parameters Type Name Description Single scaleFactor Additional scale factor to account for with the marker visual. Returns Type Description Boolean Returns true if the scale factor was updated. Implements IMarkerVisual"
  },
  "api/Microsoft.MixedReality.SpectatorView.QRCodeMarkerDetectorSpatialLocalizer.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.QRCodeMarkerDetectorSpatialLocalizer.html",
    "title": "Class QRCodeMarkerDetectorSpatialLocalizer | MixedReality-SpectatorView Documentation",
    "keywords": "Class QRCodeMarkerDetectorSpatialLocalizer Inheritance Object SpatialLocalizer < MarkerDetectorLocalizationSettings > MarkerDetectorSpatialLocalizer QRCodeMarkerDetectorSpatialLocalizer Implements ISpatialLocalizer Inherited Members MarkerDetectorSpatialLocalizer.markerDetector MarkerDetectorSpatialLocalizer.TryDeserializeSettings(BinaryReader, MarkerDetectorLocalizationSettings) MarkerDetectorSpatialLocalizer.TryCreateLocalizationSession(IPeerConnection, MarkerDetectorLocalizationSettings, ISpatialLocalizationSession) SpatialLocalizer<MarkerDetectorLocalizationSettings>.lockObject SpatialLocalizer<MarkerDetectorLocalizationSettings>.debugLogging SpatialLocalizer<MarkerDetectorLocalizationSettings>.DebugLog(String) SpatialLocalizer<MarkerDetectorLocalizationSettings>.Start() SpatialLocalizer<MarkerDetectorLocalizationSettings>.OnDestroy() SpatialLocalizer<MarkerDetectorLocalizationSettings>.CreateDefaultSettings() SpatialLocalizer<MarkerDetectorLocalizationSettings>.ISpatialLocalizer.TryDeserializeSettings(BinaryReader, ISpatialLocalizationSettings) SpatialLocalizer<MarkerDetectorLocalizationSettings>.ISpatialLocalizer.TryCreateLocalizationSession(IPeerConnection, ISpatialLocalizationSettings, ISpatialLocalizationSession) Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public class QRCodeMarkerDetectorSpatialLocalizer : MarkerDetectorSpatialLocalizer, ISpatialLocalizer Fields Id Declaration public static readonly Guid Id Field Value Type Description Guid Properties DisplayName Declaration public override string DisplayName { get; } Property Value Type Description String Overrides Microsoft.MixedReality.SpectatorView.SpatialLocalizer<Microsoft.MixedReality.SpectatorView.MarkerDetectorLocalizationSettings>.DisplayName IsSupported Declaration protected override bool IsSupported { get; } Property Value Type Description Boolean Overrides Microsoft.MixedReality.SpectatorView.SpatialLocalizer<Microsoft.MixedReality.SpectatorView.MarkerDetectorLocalizationSettings>.IsSupported SpatialLocalizerId Declaration public override Guid SpatialLocalizerId { get; } Property Value Type Description Guid Overrides Microsoft.MixedReality.SpectatorView.SpatialLocalizer<Microsoft.MixedReality.SpectatorView.MarkerDetectorLocalizationSettings>.SpatialLocalizerId Implements ISpatialLocalizer"
  },
  "api/Microsoft.MixedReality.SpectatorView.MobileRecordingSettings.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.MobileRecordingSettings.html",
    "title": "Class MobileRecordingSettings | MixedReality-SpectatorView Documentation",
    "keywords": "Class MobileRecordingSettings Inheritance Object Singleton < MobileRecordingSettings > MobileRecordingSettings Inherited Members Singleton<MobileRecordingSettings>.IsInitialized Singleton<MobileRecordingSettings>.Awake() Singleton<MobileRecordingSettings>.OnDestroy() Singleton<MobileRecordingSettings>.Instance Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public class MobileRecordingSettings : Singleton<MobileRecordingSettings> Properties EnableMobileRecordingService Declaration public bool EnableMobileRecordingService { get; } Property Value Type Description Boolean OverrideMobileRecordingServicePrefab Declaration public GameObject OverrideMobileRecordingServicePrefab { get; } Property Value Type Description GameObject"
  },
  "api/Microsoft.MixedReality.SpectatorView.MobileOverlayVisualChild.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.MobileOverlayVisualChild.html",
    "title": "Class MobileOverlayVisualChild | MixedReality-SpectatorView Documentation",
    "keywords": "Class MobileOverlayVisualChild Base class that provides showing/hiding functionality for IMobileOverlayVisualChild Inheritance Object MobileOverlayVisualChild Implements IMobileOverlayVisualChild Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public class MobileOverlayVisualChild : MonoBehaviour, IMobileOverlayVisualChild Methods Hide() Hide any associated UI/GameObjects Declaration public void Hide() Show() Show any associated UI/GameObjects Declaration public void Show() Events OverlayVisibilityRequest Event for requesting to show/hide spectator view UI Declaration public event OverlayVisibilityRequest OverlayVisibilityRequest Event Type Type Description OverlayVisibilityRequest Implements IMobileOverlayVisualChild"
  },
  "api/Microsoft.MixedReality.SpectatorView.MobileOverlayVisual.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.MobileOverlayVisual.html",
    "title": "Class MobileOverlayVisual | MixedReality-SpectatorView Documentation",
    "keywords": "Class MobileOverlayVisual Helper class responsible for facilitating visibility changes in mobile UI Inheritance Object MobileOverlayVisual Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public class MobileOverlayVisual : MonoBehaviour Fields _children List of MonoBehaviours implementing IMobileOverlayVisualChild . Errors will be thrown if any elements don't implement IMobileOverlayVisualChild. Declaration protected List<MonoBehaviour> _children Field Value Type Description List < MonoBehaviour > _holdTimeToDisplay Amount of time (in seconds) to press and hold the screen in order to toggle mobile UI visibility. Declaration protected float _holdTimeToDisplay Field Value Type Description Single"
  },
  "api/Microsoft.MixedReality.SpectatorView.MobileNetworkConfigurationVisual.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.MobileNetworkConfigurationVisual.html",
    "title": "Class MobileNetworkConfigurationVisual | MixedReality-SpectatorView Documentation",
    "keywords": "Class MobileNetworkConfigurationVisual Inheritance Object MobileNetworkConfigurationVisual Implements INetworkConfigurationVisual Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public class MobileNetworkConfigurationVisual : MonoBehaviour, INetworkConfigurationVisual Methods Hide() Declaration public void Hide() Show() Declaration public void Show() Events NetworkConfigurationUpdated Declaration public event Action<INetworkConfigurationVisual, string> NetworkConfigurationUpdated Event Type Type Description Action < INetworkConfigurationVisual , String > Implements INetworkConfigurationVisual"
  },
  "api/Microsoft.MixedReality.SpectatorView.MicrophoneInput.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.MicrophoneInput.html",
    "title": "Class MicrophoneInput | MixedReality-SpectatorView Documentation",
    "keywords": "Class MicrophoneInput Captures microphone input and plays that input back through an AudioSource. Inheritance Object MicrophoneInput Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public class MicrophoneInput : MonoBehaviour Methods StartMicrophone() Starts microphone capture on the first available microphone. Declaration public bool StartMicrophone() Returns Type Description Boolean True if a microphone was available to capture, otherwise false."
  },
  "api/Microsoft.MixedReality.SpectatorView.HoloLensCanvasHelper.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.HoloLensCanvasHelper.html",
    "title": "Class HoloLensCanvasHelper | MixedReality-SpectatorView Documentation",
    "keywords": "Class HoloLensCanvasHelper Helper class for placing a Unity canvas relative to a HoloLens user Inheritance Object HoloLensCanvasHelper Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public class HoloLensCanvasHelper : MonoBehaviour Fields _bindToMainCamera Check if you want the Unity Canvas to be placed outward at a specific distance from the main camera. Declaration protected bool _bindToMainCamera Field Value Type Description Boolean _zDistance If BindToMainCamera is set to true, the canvas will be placed at this distance (in meters) in front of the user. Declaration protected float _zDistance Field Value Type Description Single"
  },
  "api/Microsoft.MixedReality.SpectatorView.HolographicCameraObserver.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.HolographicCameraObserver.html",
    "title": "Class HolographicCameraObserver | MixedReality-SpectatorView Documentation",
    "keywords": "Class HolographicCameraObserver Component that connects to the HoloLens application on the holographic camera rig for synchronizing camera poses and receiving calibration data. Inheritance Object Singleton < HolographicCameraObserver > CommandRegistry < HolographicCameraObserver > NetworkManager < HolographicCameraObserver > HolographicCameraObserver Implements INetworkManager ICommandRegistry Inherited Members NetworkManager<HolographicCameraObserver>.connectionManager NetworkManager<HolographicCameraObserver>.ConnectedIPAddress NetworkManager<HolographicCameraObserver>.IsConnected NetworkManager<HolographicCameraObserver>.IsConnecting NetworkManager<HolographicCameraObserver>.TimeSinceLastUpdate NetworkManager<HolographicCameraObserver>.StartListening(Int32) NetworkManager<HolographicCameraObserver>.ConnectTo(String) NetworkManager<HolographicCameraObserver>.ConnectTo(String, Int32) NetworkManager<HolographicCameraObserver>.Broadcast(Byte[]) NetworkManager<HolographicCameraObserver>.Disconnect() NetworkManager<HolographicCameraObserver>.Start() NetworkManager<HolographicCameraObserver>.OnDestroy() NetworkManager<HolographicCameraObserver>.OnDisconnected(SocketEndpoint) NetworkManager<HolographicCameraObserver>.OnReceive(IncomingMessage) CommandRegistry<HolographicCameraObserver>.Connected CommandRegistry<HolographicCameraObserver>.Disconnected CommandRegistry<HolographicCameraObserver>.NotifyConnected(SocketEndpoint) CommandRegistry<HolographicCameraObserver>.NotifyDisconnected(SocketEndpoint) CommandRegistry<HolographicCameraObserver>.NotifyCommand(SocketEndpoint, String, BinaryReader, Int32) CommandRegistry<HolographicCameraObserver>.RegisterCommandHandler(String, CommandHandler) CommandRegistry<HolographicCameraObserver>.UnregisterCommandHandler(String, CommandHandler) Singleton<HolographicCameraObserver>.IsInitialized Singleton<HolographicCameraObserver>.Instance Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public class HolographicCameraObserver : NetworkManager<HolographicCameraObserver>, INetworkManager, ICommandRegistry Fields CalibrationDataCommand Declaration public const string CalibrationDataCommand = \"CalibrationData\" Field Value Type Description String CameraCommand Declaration public const string CameraCommand = \"Camera\" Field Value Type Description String Properties RemotePort Declaration protected override int RemotePort { get; } Property Value Type Description Int32 Overrides Microsoft.MixedReality.SpectatorView.NetworkManager<Microsoft.MixedReality.SpectatorView.HolographicCameraObserver>.RemotePort Methods Awake() Declaration protected override void Awake() Overrides Microsoft.MixedReality.SpectatorView.NetworkManager<Microsoft.MixedReality.SpectatorView.HolographicCameraObserver>.Awake() OnConnected(SocketEndpoint) Declaration protected override void OnConnected(SocketEndpoint endpoint) Parameters Type Name Description SocketEndpoint endpoint Overrides Microsoft.MixedReality.SpectatorView.NetworkManager<Microsoft.MixedReality.SpectatorView.HolographicCameraObserver>.OnConnected(Microsoft.MixedReality.SpectatorView.SocketEndpoint) Implements INetworkManager ICommandRegistry"
  },
  "api/Microsoft.MixedReality.SpectatorView.HolographicCameraBroadcaster.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.HolographicCameraBroadcaster.html",
    "title": "Class HolographicCameraBroadcaster | MixedReality-SpectatorView Documentation",
    "keywords": "Class HolographicCameraBroadcaster Represents the network listener for the camera pose provider app. Inheritance Object Singleton < HolographicCameraBroadcaster > CommandRegistry < HolographicCameraBroadcaster > NetworkManager < HolographicCameraBroadcaster > HolographicCameraBroadcaster Implements INetworkManager ICommandRegistry Inherited Members NetworkManager<HolographicCameraBroadcaster>.connectionManager NetworkManager<HolographicCameraBroadcaster>.ConnectedIPAddress NetworkManager<HolographicCameraBroadcaster>.IsConnected NetworkManager<HolographicCameraBroadcaster>.IsConnecting NetworkManager<HolographicCameraBroadcaster>.TimeSinceLastUpdate NetworkManager<HolographicCameraBroadcaster>.StartListening(Int32) NetworkManager<HolographicCameraBroadcaster>.ConnectTo(String) NetworkManager<HolographicCameraBroadcaster>.ConnectTo(String, Int32) NetworkManager<HolographicCameraBroadcaster>.Broadcast(Byte[]) NetworkManager<HolographicCameraBroadcaster>.Disconnect() NetworkManager<HolographicCameraBroadcaster>.Start() NetworkManager<HolographicCameraBroadcaster>.OnDestroy() NetworkManager<HolographicCameraBroadcaster>.OnConnected(SocketEndpoint) NetworkManager<HolographicCameraBroadcaster>.OnDisconnected(SocketEndpoint) NetworkManager<HolographicCameraBroadcaster>.OnReceive(IncomingMessage) CommandRegistry<HolographicCameraBroadcaster>.Connected CommandRegistry<HolographicCameraBroadcaster>.Disconnected CommandRegistry<HolographicCameraBroadcaster>.NotifyConnected(SocketEndpoint) CommandRegistry<HolographicCameraBroadcaster>.NotifyDisconnected(SocketEndpoint) CommandRegistry<HolographicCameraBroadcaster>.NotifyCommand(SocketEndpoint, String, BinaryReader, Int32) CommandRegistry<HolographicCameraBroadcaster>.RegisterCommandHandler(String, CommandHandler) CommandRegistry<HolographicCameraBroadcaster>.UnregisterCommandHandler(String, CommandHandler) Singleton<HolographicCameraBroadcaster>.IsInitialized Singleton<HolographicCameraBroadcaster>.Instance Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public class HolographicCameraBroadcaster : NetworkManager<HolographicCameraBroadcaster>, INetworkManager, ICommandRegistry Properties RemotePort Declaration protected override int RemotePort { get; } Property Value Type Description Int32 Overrides Microsoft.MixedReality.SpectatorView.NetworkManager<Microsoft.MixedReality.SpectatorView.HolographicCameraBroadcaster>.RemotePort Methods Awake() Declaration protected override void Awake() Overrides Microsoft.MixedReality.SpectatorView.NetworkManager<Microsoft.MixedReality.SpectatorView.HolographicCameraBroadcaster>.Awake() Implements INetworkManager ICommandRegistry"
  },
  "api/Microsoft.MixedReality.SpectatorView.HeadsetCalibrationData.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.HeadsetCalibrationData.html",
    "title": "Class HeadsetCalibrationData | MixedReality-SpectatorView Documentation",
    "keywords": "Class HeadsetCalibrationData Data that the HoloLens device sends to the editor during calibration. Inheritance Object HeadsetCalibrationData Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax [Serializable] public class HeadsetCalibrationData Fields headsetData The headset world position and orientation. Declaration public HeadsetData headsetData Field Value Type Description HeadsetData markers QR Code and ArUco marker locations in world space. Declaration public List<MarkerPair> markers Field Value Type Description List < MarkerPair > timestamp The HoloLens device's application time when this data was created. Declaration public float timestamp Field Value Type Description Single Methods Serialize() Call to serialize class contents into a byte array for sending over a network. Declaration public byte[] Serialize() Returns Type Description Byte [] byte array payload SerializeAndWrite(BinaryWriter) Call to serialize and write a byte array to the provided binary writer. Declaration public void SerializeAndWrite(BinaryWriter writer) Parameters Type Name Description BinaryWriter writer Writer that serialized data is written to TryDeserialize(BinaryReader, out HeadsetCalibrationData) Call to try and create a HeadsetCalibrationData instance from a binary reader. Declaration public static bool TryDeserialize(BinaryReader reader, out HeadsetCalibrationData headsetCalibrationData) Parameters Type Name Description BinaryReader reader Binary reader to obtain serialized data from HeadsetCalibrationData headsetCalibrationData output headset calibration data Returns Type Description Boolean Returns true if the provided binary reader could be used to create headset calibration data, otherwise false. TryDeserialize(Byte[], out HeadsetCalibrationData) Called to try and create a HeadsetCalibrationData instance from a byte array. Declaration public static bool TryDeserialize(byte[] payload, out HeadsetCalibrationData headsetCalibrationData) Parameters Type Name Description Byte [] payload byte array to deserialize HeadsetCalibrationData headsetCalibrationData output headset calibration data Returns Type Description Boolean Returns true if the provided payload could be converted into headset calibration data, otherwise false."
  },
  "api/Microsoft.MixedReality.SpectatorView.Editor.PlatformSwitcherEditor.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.Editor.PlatformSwitcherEditor.html",
    "title": "Class PlatformSwitcherEditor | MixedReality-SpectatorView Documentation",
    "keywords": "Class PlatformSwitcherEditor Defines functionality for switching platforms in the Unity editor Inheritance Object PlatformSwitcherEditor Namespace : Microsoft.MixedReality.SpectatorView.Editor Assembly : cs.temp.dll.dll Syntax public class PlatformSwitcherEditor : UnityEditor.Editor Methods OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Microsoft.MixedReality.SpectatorView.Editor.EditorWindowBase-1.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.Editor.EditorWindowBase-1.html",
    "title": "Class EditorWindowBase<TWindow> | MixedReality-SpectatorView Documentation",
    "keywords": "Class EditorWindowBase<TWindow> Inheritance Object EditorWindowBase<TWindow> Namespace : Microsoft.MixedReality.SpectatorView.Editor Assembly : cs.temp.dll.dll Syntax public class EditorWindowBase<TWindow> : EditorWindow where TWindow : EditorWindowBase<TWindow> Type Parameters Name Description TWindow Methods GetWindowName() Declaration protected static string GetWindowName() Returns Type Description String RenderTitle(String, Color) Declaration protected void RenderTitle(string title, Color color) Parameters Type Name Description String title Color color ShowWindow() Declaration protected static void ShowWindow() TryGetWindow() Declaration public static TWindow TryGetWindow() Returns Type Description TWindow Update() Declaration protected virtual void Update()"
  },
  "api/Microsoft.MixedReality.SpectatorView.Editor.CalibrationRecordingPose.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.Editor.CalibrationRecordingPose.html",
    "title": "Class CalibrationRecordingPose | MixedReality-SpectatorView Documentation",
    "keywords": "Class CalibrationRecordingPose Inheritance Object CalibrationRecordingPose Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.SpectatorView.Editor Assembly : cs.temp.dll.dll Syntax [Serializable] public class CalibrationRecordingPose Fields CameraPosition Declaration public Vector3 CameraPosition Field Value Type Description Vector3 CameraRotationEuler Declaration public Vector3 CameraRotationEuler Field Value Type Description Vector3 FrameFileNumber Declaration public int FrameFileNumber Field Value Type Description Int32 FrameTime Declaration public float FrameTime Field Value Type Description Single"
  },
  "api/Microsoft.MixedReality.SpectatorView.DynamicGameObjectHierarchyBroadcaster-1.ChangeType.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.DynamicGameObjectHierarchyBroadcaster-1.ChangeType.html",
    "title": "Class DynamicGameObjectHierarchyBroadcaster<TComponentService>.ChangeType | MixedReality-SpectatorView Documentation",
    "keywords": "Class DynamicGameObjectHierarchyBroadcaster<TComponentService>.ChangeType Inheritance Object DynamicGameObjectHierarchyBroadcaster<TComponentService>.ChangeType Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public static class ChangeType Fields BindTransformHierarchy Declaration public const byte BindTransformHierarchy = 2 Field Value Type Description Byte CreateObserverObject Declaration public const byte CreateObserverObject = 0 Field Value Type Description Byte ObserverHierarchyBound Declaration public const byte ObserverHierarchyBound = 3 Field Value Type Description Byte ObserverObjectCreated Declaration public const byte ObserverObjectCreated = 1 Field Value Type Description Byte"
  },
  "api/Microsoft.MixedReality.SpectatorView.DisconnectedEventHandler.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.DisconnectedEventHandler.html",
    "title": "Delegate DisconnectedEventHandler | MixedReality-SpectatorView Documentation",
    "keywords": "Delegate DisconnectedEventHandler Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public delegate void DisconnectedEventHandler(SocketEndpoint endoint); Parameters Type Name Description SocketEndpoint endoint"
  },
  "api/Microsoft.MixedReality.SpectatorView.DeviceInfoObserver.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.DeviceInfoObserver.html",
    "title": "Class DeviceInfoObserver | MixedReality-SpectatorView Documentation",
    "keywords": "Class DeviceInfoObserver Inheritance Object DeviceInfoObserver Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public class DeviceInfoObserver : MonoBehaviour Fields CreateSharedSpatialCoordinateCommand Declaration public const string CreateSharedSpatialCoordinateCommand = \"CreateSharedSpatialCoordinate\" Field Value Type Description String DeviceInfoCommand Declaration public const string DeviceInfoCommand = \"DeviceInfo\" Field Value Type Description String StatusCommand Declaration public const string StatusCommand = \"Status\" Field Value Type Description String Properties ConnectedEndpoint Gets the SocketEndpoint for the currently-connected device. Declaration public SocketEndpoint ConnectedEndpoint { get; } Property Value Type Description SocketEndpoint DeviceIPAddress Gets the IP address reported by the device itself. Declaration public string DeviceIPAddress { get; } Property Value Type Description String DeviceName Gets the name of the device. Declaration public string DeviceName { get; } Property Value Type Description String IsTrackingStalled Gets whether or not the receipt of new poses from the device has stalled for an unexpectedly-large time. Declaration public bool IsTrackingStalled { get; } Property Value Type Description Boolean NetworkManager Gets the network manager associated with the device. Declaration public INetworkManager NetworkManager { get; } Property Value Type Description INetworkManager"
  },
  "api/Microsoft.MixedReality.SpectatorView.DeviceInfoBroadcaster.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.DeviceInfoBroadcaster.html",
    "title": "Class DeviceInfoBroadcaster | MixedReality-SpectatorView Documentation",
    "keywords": "Class DeviceInfoBroadcaster Inheritance Object DeviceInfoBroadcaster Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public class DeviceInfoBroadcaster : MonoBehaviour"
  },
  "api/Microsoft.MixedReality.SpectatorView.CompositionManager.Depth.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.CompositionManager.Depth.html",
    "title": "Enum CompositionManager.Depth | MixedReality-SpectatorView Documentation",
    "keywords": "Enum CompositionManager.Depth Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public enum Depth Fields Name Description None Sixteen TwentyFour"
  },
  "api/Microsoft.MixedReality.SpectatorView.CompositionManager.AntiAliasingSamples.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.CompositionManager.AntiAliasingSamples.html",
    "title": "Enum CompositionManager.AntiAliasingSamples | MixedReality-SpectatorView Documentation",
    "keywords": "Enum CompositionManager.AntiAliasingSamples Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public enum AntiAliasingSamples Fields Name Description Eight Four One Two"
  },
  "api/Microsoft.MixedReality.SpectatorView.ComponentObserver.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.ComponentObserver.html",
    "title": "Class ComponentObserver | MixedReality-SpectatorView Documentation",
    "keywords": "Class ComponentObserver Abstract class for updating components on the spectator device. Inheritance Object ComponentObserver ComponentObserver<TComponent> Implements IComponentObserver Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public abstract class ComponentObserver : MonoBehaviour, IComponentObserver Properties ComponentType The type associated with this component. Declaration public abstract Type ComponentType { get; } Property Value Type Description Type Methods Awake() Declaration protected virtual void Awake() OnDestroy() Declaration protected virtual void OnDestroy() Read(SocketEndpoint, BinaryReader) Interprets data received from another device. Declaration public abstract void Read(SocketEndpoint sendingEndpoint, BinaryReader message) Parameters Type Name Description SocketEndpoint sendingEndpoint sender BinaryReader message data received Implements IComponentObserver"
  },
  "api/Microsoft.MixedReality.SpectatorView.CalibrationData.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.CalibrationData.html",
    "title": "Class CalibrationData | MixedReality-SpectatorView Documentation",
    "keywords": "Class CalibrationData Used for loading/applying camera intrinsics and camera extrinsics obtained through Spectator View's default calibration process. Inheritance Object CalibrationData Implements ICalibrationData Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public class CalibrationData : ICalibrationData Constructors CalibrationData(CalculatedCameraIntrinsics, CalculatedCameraExtrinsics) Declaration public CalibrationData(CalculatedCameraIntrinsics intrinsics, CalculatedCameraExtrinsics extrinsics) Parameters Type Name Description CalculatedCameraIntrinsics intrinsics CalculatedCameraExtrinsics extrinsics CalibrationData(String, String) Declaration public CalibrationData(string cameraIntrinsicsPath, string cameraExtrinsicsPath) Parameters Type Name Description String cameraIntrinsicsPath String cameraExtrinsicsPath Methods SetUnityCameraExtrinstics(Transform) Sets up the extrinsic parameters of the holographic camera such that the holographic camera's position and rotation are correctly offset from the HoloLens providing poses for the camera rig. Declaration public void SetUnityCameraExtrinstics(Transform cameraTransform) Parameters Type Name Description Transform cameraTransform The transform that contains the holographic camera. SetUnityCameraIntrinsics(Camera) Sets up the intrinsic parameters (such as a projection matrix or field of view) of the holographic camera to match the video camera. Declaration public void SetUnityCameraIntrinsics(Camera camera) Parameters Type Name Description Camera camera The holographic camera to set the intrinsis of. Implements ICalibrationData"
  },
  "api/Microsoft.MixedReality.SpectatorView.CalculatedCameraCalibration.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.CalculatedCameraCalibration.html",
    "title": "Class CalculatedCameraCalibration | MixedReality-SpectatorView Documentation",
    "keywords": "Class CalculatedCameraCalibration A class containing camera intrinsic and extrinsic information produced through calibration. Inheritance Object CalculatedCameraCalibration Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax [Serializable] public class CalculatedCameraCalibration Constructors CalculatedCameraCalibration() Declaration public CalculatedCameraCalibration() CalculatedCameraCalibration(CalculatedCameraIntrinsics, CalculatedCameraExtrinsics) Declaration public CalculatedCameraCalibration(CalculatedCameraIntrinsics intrinsics, CalculatedCameraExtrinsics extrinsics) Parameters Type Name Description CalculatedCameraIntrinsics intrinsics CalculatedCameraExtrinsics extrinsics Properties Extrinsics Camera extrinsics calculated through calibration. Declaration public CalculatedCameraExtrinsics Extrinsics { get; } Property Value Type Description CalculatedCameraExtrinsics Intrinsics Camera intrinsics calculated through calibration. Declaration public CalculatedCameraIntrinsics Intrinsics { get; } Property Value Type Description CalculatedCameraIntrinsics Methods Serialize() Generates a byte payload for the class. Declaration public byte[] Serialize() Returns Type Description Byte [] byte payload TryDeserialize(Byte[], out CalculatedCameraCalibration) Attempts to create a CalculatedCameraCalibration given a byte payload. Declaration public static bool TryDeserialize(byte[] payload, out CalculatedCameraCalibration calibrationData) Parameters Type Name Description Byte [] payload input byte payload CalculatedCameraCalibration calibrationData output calibration data Returns Type Description Boolean Returns true if the payload was successfully used to generate calibration data, otherwise false"
  },
  "api/Microsoft.MixedReality.SpatialAlignment.html": {
    "href": "api/Microsoft.MixedReality.SpatialAlignment.html",
    "title": "Namespace Microsoft.MixedReality.SpatialAlignment | MixedReality-SpectatorView Documentation",
    "keywords": "Namespace Microsoft.MixedReality.SpatialAlignment Classes DisposableBase This is a base class for common IDisposable implementation. Extensions Helper Unity side extensions to enable the core abstraction to be Unity agnostic. SpatialCoordinateBase<TKey> Helper base class for implementations of ISpatialCoordinate . SpatialCoordinateLocalizer Very simple consumer of ISpatialCoordinate to demonstrate usage. SpatialCoordinateRelativeLocalizer Very simple consumer of ISpatialCoordinate to demonstrate usage. SpatialCoordinateServiceBase<TKey> Helper base class for ISpatialCoordinateService implementations. SpatialCoordinateServiceUnityBase<TKey> Helper base class for ISpatialCoordinateService implementations. SpatialCoordinateUnityBase<TKey> Helper base class for implementations of ISpatialCoordinate . Structs Extensions.SynchronizationContextAwaiter Helper class to enable await on SynchronizationContext . This is useful if you want to switch execution flow of an async function to a different thread, like Unity game thread for example. Interfaces ISpatialCoordinate This represents a spatial coordinate that can then be used to convert position and rotation to and from this coordinate space. ISpatialCoordinateService This service is used to discover, track and create coordinates. Enums LocatedState Defines the potential states of alignment for a strategy."
  },
  "api/Microsoft.MixedReality.SpectatorView.IEditableSpatialLocalizationSettings.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.IEditableSpatialLocalizationSettings.html",
    "title": "Interface IEditableSpatialLocalizationSettings | MixedReality-SpectatorView Documentation",
    "keywords": "Interface IEditableSpatialLocalizationSettings Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public interface IEditableSpatialLocalizationSettings"
  },
  "api/Microsoft.MixedReality.SpectatorView.IComponentObserver.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.IComponentObserver.html",
    "title": "Interface IComponentObserver | MixedReality-SpectatorView Documentation",
    "keywords": "Interface IComponentObserver Component that syncs local content based on changes to an IComponentBroadcaster Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public interface IComponentObserver Methods Read(SocketEndpoint, BinaryReader) Declaration void Read(SocketEndpoint sendingEndpoint, BinaryReader message) Parameters Type Name Description SocketEndpoint sendingEndpoint BinaryReader message"
  },
  "api/Microsoft.MixedReality.SpectatorView.IAssetCache.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.IAssetCache.html",
    "title": "Interface IAssetCache | MixedReality-SpectatorView Documentation",
    "keywords": "Interface IAssetCache Used to persist asset information Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public interface IAssetCache Methods ClearAssetCache() Declaration void ClearAssetCache() UpdateAssetCache() Declaration void UpdateAssetCache()"
  },
  "api/Microsoft.MixedReality.SpectatorView.HeadsetCalibration.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.HeadsetCalibration.html",
    "title": "Class HeadsetCalibration | MixedReality-SpectatorView Documentation",
    "keywords": "Class HeadsetCalibration Inheritance Object HeadsetCalibration Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public class HeadsetCalibration : MonoBehaviour Fields arucoDebugVisualHelper Debug Visual Helper in scene that will place game objects on aruco markers in the scene. Declaration protected DebugVisualHelper arucoDebugVisualHelper Field Value Type Description DebugVisualHelper CalibrationDataReceivedCommandHeader Declaration public static readonly string CalibrationDataReceivedCommandHeader Field Value Type Description String qrCodeDebugVisualHelper Debug Visual Helper in scene that will place game objects on qr code markers in the scene. Declaration protected DebugVisualHelper qrCodeDebugVisualHelper Field Value Type Description DebugVisualHelper qrCodeMarkerDetector QR Code Marker Detector in scene Declaration protected QRCodeMarkerDetector qrCodeMarkerDetector Field Value Type Description QRCodeMarkerDetector RequestCalibrationDataCommandHeader Declaration public static readonly string RequestCalibrationDataCommandHeader Field Value Type Description String showDebugVisuals Check to show debug visuals for the detected markers. Declaration protected bool showDebugVisuals Field Value Type Description Boolean UploadCalibrationCommandHeader Declaration public static readonly string UploadCalibrationCommandHeader Field Value Type Description String UploadCalibrationResultCommandHeader Declaration public static readonly string UploadCalibrationResultCommandHeader Field Value Type Description String Methods UpdateHeadsetCalibrationData() Call to signal to the HeadsetCalibration class that it should create a new qr code/aruco marker payload Declaration public void UpdateHeadsetCalibrationData() Events Updated Declaration public event HeadsetCalibrationDataUpdatedHandler Updated Event Type Type Description HeadsetCalibrationDataUpdatedHandler"
  },
  "api/Microsoft.MixedReality.SpectatorView.GameObjectHierarchyBroadcaster.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.GameObjectHierarchyBroadcaster.html",
    "title": "Class GameObjectHierarchyBroadcaster | MixedReality-SpectatorView Documentation",
    "keywords": "Class GameObjectHierarchyBroadcaster Indicates to the StateSynchronizationBroadcaster that the GameObject this is attached to and all of its descendants should be broadcast to connected StateSynchronizationObservers. Inheritance Object GameObjectHierarchyBroadcaster Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public class GameObjectHierarchyBroadcaster : MonoBehaviour"
  },
  "api/Microsoft.MixedReality.SpectatorView.FrameProviderDeviceType.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.FrameProviderDeviceType.html",
    "title": "Enum FrameProviderDeviceType | MixedReality-SpectatorView Documentation",
    "keywords": "Enum FrameProviderDeviceType Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public enum FrameProviderDeviceType Fields Name Description BlackMagic Elgato"
  },
  "api/Microsoft.MixedReality.SpectatorView.Editor.StateSynchronizationMenuItems.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.Editor.StateSynchronizationMenuItems.html",
    "title": "Class StateSynchronizationMenuItems | MixedReality-SpectatorView Documentation",
    "keywords": "Class StateSynchronizationMenuItems Inheritance Object StateSynchronizationMenuItems Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.SpectatorView.Editor Assembly : cs.temp.dll.dll Syntax public static class StateSynchronizationMenuItems Methods ClearAllAssetCaches() Declaration public static void ClearAllAssetCaches() UpdateAllAssetCaches() Declaration public static void UpdateAllAssetCaches()"
  },
  "api/Microsoft.MixedReality.SpectatorView.ComponentObserver-1.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.ComponentObserver-1.html",
    "title": "Class ComponentObserver<TComponent> | MixedReality-SpectatorView Documentation",
    "keywords": "Class ComponentObserver<TComponent> Abstract class for updating components on the spectator device. Inheritance Object ComponentObserver ComponentObserver<TComponent> TransformObserver Implements IComponentObserver Inherited Members ComponentObserver.Read(SocketEndpoint, BinaryReader) ComponentObserver.OnDestroy() Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public abstract class ComponentObserver<TComponent> : ComponentObserver, IComponentObserver where TComponent : Component Type Parameters Name Description TComponent Fields attachedComponent Declaration protected TComponent attachedComponent Field Value Type Description TComponent Properties ComponentType The type associated with this component. Declaration public override Type ComponentType { get; } Property Value Type Description Type Overrides ComponentObserver.ComponentType Methods Awake() Declaration protected override void Awake() Overrides ComponentObserver.Awake() Implements IComponentObserver"
  },
  "api/Microsoft.MixedReality.SpectatorView.ComponentBroadcaster-2.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.ComponentBroadcaster-2.html",
    "title": "Class ComponentBroadcaster<TComponentBroadcasterService, TChangeFlags> | MixedReality-SpectatorView Documentation",
    "keywords": "Class ComponentBroadcaster<TComponentBroadcasterService, TChangeFlags> Abstract class for sending component updates from the user device. Inheritance Object ComponentBroadcaster<TComponentBroadcasterService, TChangeFlags> DynamicGameObjectHierarchyBroadcaster<TComponentService> TransformBroadcaster Implements IComponentBroadcaster Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public abstract class ComponentBroadcaster<TComponentBroadcasterService, TChangeFlags> : MonoBehaviour, IComponentBroadcaster where TComponentBroadcasterService : Singleton<TComponentBroadcasterService>, IComponentBroadcasterService Type Parameters Name Description TComponentBroadcasterService TChangeFlags Fields transformBroadcaster Declaration protected TransformBroadcaster transformBroadcaster Field Value Type Description TransformBroadcaster Properties ComponentBroadcasterService Declaration public TComponentBroadcasterService ComponentBroadcasterService { get; } Property Value Type Description TComponentBroadcasterService TransformBroadcaster The components transform broadcaster Declaration public TransformBroadcaster TransformBroadcaster { get; } Property Value Type Description TransformBroadcaster UpdateWhenDisabled Declaration protected virtual bool UpdateWhenDisabled { get; } Property Value Type Description Boolean Methods Awake() Declaration protected virtual void Awake() BeginUpdatingFrame(SocketEndpointConnectionDelta) Declaration protected virtual void BeginUpdatingFrame(SocketEndpointConnectionDelta connectionDelta) Parameters Type Name Description SocketEndpointConnectionDelta connectionDelta CalculateDeltaChanges() Declaration protected abstract TChangeFlags CalculateDeltaChanges() Returns Type Description TChangeFlags EndUpdatingFrame() Declaration protected virtual void EndUpdatingFrame() HasChanges(TChangeFlags) Declaration protected abstract bool HasChanges(TChangeFlags changeFlags) Parameters Type Name Description TChangeFlags changeFlags Returns Type Description Boolean OnDestroy() Declaration protected virtual void OnDestroy() OnFrameCompleted(SocketEndpointConnectionDelta) Call to signal the end of a frame. Declaration public void OnFrameCompleted(SocketEndpointConnectionDelta connectionDelta) Parameters Type Name Description SocketEndpointConnectionDelta connectionDelta OnInitialized() Declaration protected virtual void OnInitialized() ProcessNewConnections(IEnumerable<SocketEndpoint>) Declaration protected virtual void ProcessNewConnections(IEnumerable<SocketEndpoint> connectionsRequiringFullUpdate) Parameters Type Name Description IEnumerable < SocketEndpoint > connectionsRequiringFullUpdate ProcessNewConnections(SocketEndpointConnectionDelta) Call to report the current state of network connections. Declaration public void ProcessNewConnections(SocketEndpointConnectionDelta connectionDelta) Parameters Type Name Description SocketEndpointConnectionDelta connectionDelta RemoveDisconnectedEndpoints(IEnumerable<SocketEndpoint>) Declaration protected virtual void RemoveDisconnectedEndpoints(IEnumerable<SocketEndpoint> endpoints) Parameters Type Name Description IEnumerable < SocketEndpoint > endpoints ResetFrame() Call to reset the frame. Declaration public void ResetFrame() SendCompleteChanges(IEnumerable<SocketEndpoint>) Declaration protected abstract void SendCompleteChanges(IEnumerable<SocketEndpoint> endpoints) Parameters Type Name Description IEnumerable < SocketEndpoint > endpoints SendComponentCreation(IEnumerable<SocketEndpoint>) Declaration protected virtual void SendComponentCreation(IEnumerable<SocketEndpoint> newConnections) Parameters Type Name Description IEnumerable < SocketEndpoint > newConnections SendDeltaChanges(IEnumerable<SocketEndpoint>, TChangeFlags) Declaration protected abstract void SendDeltaChanges(IEnumerable<SocketEndpoint> endpoints, TChangeFlags changeFlags) Parameters Type Name Description IEnumerable < SocketEndpoint > endpoints TChangeFlags changeFlags ShouldSendChanges(SocketEndpoint) Declaration protected virtual bool ShouldSendChanges(SocketEndpoint endpoint) Parameters Type Name Description SocketEndpoint endpoint Returns Type Description Boolean ShouldUpdateFrame(SocketEndpoint) Declaration protected virtual bool ShouldUpdateFrame(SocketEndpoint endpoint) Parameters Type Name Description SocketEndpoint endpoint Returns Type Description Boolean Explicit Interface Implementations IComponentBroadcaster.ComponentBroadcasterService The associated component service. Declaration IComponentBroadcasterService IComponentBroadcaster.ComponentBroadcasterService { get; } Returns Type Description IComponentBroadcasterService Implements IComponentBroadcaster"
  },
  "api/Microsoft.MixedReality.SpectatorView.CommandRegistry-1.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.CommandRegistry-1.html",
    "title": "Class CommandRegistry<TService> | MixedReality-SpectatorView Documentation",
    "keywords": "Class CommandRegistry<TService> Inheritance Object Singleton <TService> CommandRegistry<TService> NetworkManager<TService> Implements ICommandRegistry Inherited Members Singleton<TService>.IsInitialized Singleton<TService>.Awake() Singleton<TService>.OnDestroy() Singleton<TService>.Instance Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public abstract class CommandRegistry<TService> : Singleton<TService>, ICommandRegistry where TService : Singleton<TService> Type Parameters Name Description TService Methods NotifyCommand(SocketEndpoint, String, BinaryReader, Int32) Declaration protected void NotifyCommand(SocketEndpoint socketEndpoint, string command, BinaryReader message, int remainingDataSize) Parameters Type Name Description SocketEndpoint socketEndpoint String command BinaryReader message Int32 remainingDataSize NotifyConnected(SocketEndpoint) Declaration protected void NotifyConnected(SocketEndpoint socketEndpoint) Parameters Type Name Description SocketEndpoint socketEndpoint NotifyDisconnected(SocketEndpoint) Declaration protected void NotifyDisconnected(SocketEndpoint socketEndpoint) Parameters Type Name Description SocketEndpoint socketEndpoint RegisterCommandHandler(String, CommandHandler) Declaration public void RegisterCommandHandler(string command, CommandHandler handler) Parameters Type Name Description String command CommandHandler handler UnregisterCommandHandler(String, CommandHandler) Declaration public void UnregisterCommandHandler(string command, CommandHandler handler) Parameters Type Name Description String command CommandHandler handler Events Connected Declaration public event ConnectedEventHandler Connected Event Type Type Description ConnectedEventHandler Disconnected Declaration public event DisconnectedEventHandler Disconnected Event Type Type Description DisconnectedEventHandler Implements ICommandRegistry"
  },
  "api/Microsoft.MixedReality.SpectatorView.CalibrationDataProvider.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.CalibrationDataProvider.html",
    "title": "Class CalibrationDataProvider | MixedReality-SpectatorView Documentation",
    "keywords": "Class CalibrationDataProvider Loads calibration data from the Pictures library on the device and transfers that data to the compositor upon connection. Inheritance Object CalibrationDataProvider Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public class CalibrationDataProvider : MonoBehaviour"
  },
  "api/Microsoft.MixedReality.SpectatorView.BroadcasterSettings.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.BroadcasterSettings.html",
    "title": "Class BroadcasterSettings | MixedReality-SpectatorView Documentation",
    "keywords": "Class BroadcasterSettings Settings used by a StateSynchronizationBroadcaster Inheritance Object Singleton < BroadcasterSettings > BroadcasterSettings Inherited Members Singleton<BroadcasterSettings>.IsInitialized Singleton<BroadcasterSettings>.Awake() Singleton<BroadcasterSettings>.OnDestroy() Singleton<BroadcasterSettings>.Instance Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public class BroadcasterSettings : Singleton<BroadcasterSettings> Properties AutomaticallyBroadcastAllGameObjects Determines whether or not all GameObjects are synchronized or only those with a GameObjectHierarchyBroadcaster are synchronized. Declaration public bool AutomaticallyBroadcastAllGameObjects { get; } Property Value Type Description Boolean"
  },
  "api/Microsoft.MixedReality.SpectatorView.ArUcoMarkerVisualDetectorSpatialLocalizer.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.ArUcoMarkerVisualDetectorSpatialLocalizer.html",
    "title": "Class ArUcoMarkerVisualDetectorSpatialLocalizer | MixedReality-SpectatorView Documentation",
    "keywords": "Class ArUcoMarkerVisualDetectorSpatialLocalizer Inheritance Object SpatialLocalizer < MarkerVisualDetectorLocalizationSettings > MarkerVisualDetectorSpatialLocalizer ArUcoMarkerVisualDetectorSpatialLocalizer Implements ISpatialLocalizer Inherited Members MarkerVisualDetectorSpatialLocalizer.MarkerDetector MarkerVisualDetectorSpatialLocalizer.TryCreateLocalizationSession(IPeerConnection, MarkerVisualDetectorLocalizationSettings, ISpatialLocalizationSession) MarkerVisualDetectorSpatialLocalizer.TryDeserializeSettings(BinaryReader, MarkerVisualDetectorLocalizationSettings) SpatialLocalizer<MarkerVisualDetectorLocalizationSettings>.lockObject SpatialLocalizer<MarkerVisualDetectorLocalizationSettings>.debugLogging SpatialLocalizer<MarkerVisualDetectorLocalizationSettings>.DebugLog(String) SpatialLocalizer<MarkerVisualDetectorLocalizationSettings>.Start() SpatialLocalizer<MarkerVisualDetectorLocalizationSettings>.OnDestroy() SpatialLocalizer<MarkerVisualDetectorLocalizationSettings>.CreateDefaultSettings() SpatialLocalizer<MarkerVisualDetectorLocalizationSettings>.ISpatialLocalizer.TryDeserializeSettings(BinaryReader, ISpatialLocalizationSettings) SpatialLocalizer<MarkerVisualDetectorLocalizationSettings>.ISpatialLocalizer.TryCreateLocalizationSession(IPeerConnection, ISpatialLocalizationSettings, ISpatialLocalizationSession) Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public class ArUcoMarkerVisualDetectorSpatialLocalizer : MarkerVisualDetectorSpatialLocalizer, ISpatialLocalizer Fields Id Declaration public static readonly Guid Id Field Value Type Description Guid Properties DisplayName Declaration public override string DisplayName { get; } Property Value Type Description String Overrides Microsoft.MixedReality.SpectatorView.SpatialLocalizer<Microsoft.MixedReality.SpectatorView.MarkerVisualDetectorLocalizationSettings>.DisplayName IsSupported Declaration protected override bool IsSupported { get; } Property Value Type Description Boolean Overrides Microsoft.MixedReality.SpectatorView.SpatialLocalizer<Microsoft.MixedReality.SpectatorView.MarkerVisualDetectorLocalizationSettings>.IsSupported SpatialLocalizerId Declaration public override Guid SpatialLocalizerId { get; } Property Value Type Description Guid Overrides Microsoft.MixedReality.SpectatorView.SpatialLocalizer<Microsoft.MixedReality.SpectatorView.MarkerVisualDetectorLocalizationSettings>.SpatialLocalizerId Implements ISpatialLocalizer"
  },
  "api/Microsoft.MixedReality.SpectatorView.ArUcoMarkerVisual.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.ArUcoMarkerVisual.html",
    "title": "Class ArUcoMarkerVisual | MixedReality-SpectatorView Documentation",
    "keywords": "Class ArUcoMarkerVisual Controls displaying an ArUco marker on a Unity RawImage Inheritance Object ArUcoMarkerVisual Implements IMarkerVisual Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public class ArUcoMarkerVisual : MonoBehaviour, IMarkerVisual Methods HideMarker() Hides any shown markers Declaration public void HideMarker() ShowMarker(Int32) Shows the specified marker Declaration public void ShowMarker(int id) Parameters Type Name Description Int32 id Id of the marker to show TryGetMaxSupportedMarkerId(out Int32) Tries to obtain the maximum marker id supported by this marker visual. Declaration public bool TryGetMaxSupportedMarkerId(out int markerId) Parameters Type Name Description Int32 markerId Returns Type Description Boolean Returns true if the maximum marker id can be found, otherwise false. TrySetMarkerSize(Single) Tries to set the physical size for displaying markers Declaration public bool TrySetMarkerSize(float size) Parameters Type Name Description Single size The physical size (in meters) that markers should be when shown Returns Type Description Boolean Returns true if the marker can be set to the provided size, otherwise false. TrySetScaleFactor(Single) Tries to set an additional scale factors for the marker visual. Declaration public bool TrySetScaleFactor(float scaleFactor) Parameters Type Name Description Single scaleFactor Additional scale factor to account for with the marker visual. Returns Type Description Boolean Returns true if the scale factor was updated. Implements IMarkerVisual"
  },
  "api/Microsoft.MixedReality.SpectatorView.AndroidRecordingService.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.AndroidRecordingService.html",
    "title": "Class AndroidRecordingService | MixedReality-SpectatorView Documentation",
    "keywords": "Class AndroidRecordingService Class implementing IRecordingService for the Android platform Inheritance Object AndroidRecordingService Implements IRecordingService IDisposable Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public class AndroidRecordingService : MonoBehaviour, IRecordingService, IDisposable Methods Dispose() Declaration public void Dispose() Initialize() Initializes the screen recording service Declaration public void Initialize() IsInitialized() True if the screen recording service has completed initialization and is ready for use Declaration public bool IsInitialized() Returns Type Description Boolean IsRecordingAvailable() True if a screen recording has been taken during the current application session Declaration public bool IsRecordingAvailable() Returns Type Description Boolean ShowRecording() Shows the last captured screen recording from the current application session Declaration public void ShowRecording() StartRecording() Starts screen recording Declaration public bool StartRecording() Returns Type Description Boolean StopRecording() Stops screen recording Declaration public void StopRecording() Implements IRecordingService System.IDisposable"
  },
  "api/Microsoft.MixedReality.SpatialAlignment.SpatialCoordinateRelativeLocalizer.html": {
    "href": "api/Microsoft.MixedReality.SpatialAlignment.SpatialCoordinateRelativeLocalizer.html",
    "title": "Class SpatialCoordinateRelativeLocalizer | MixedReality-SpectatorView Documentation",
    "keywords": "Class SpatialCoordinateRelativeLocalizer Very simple consumer of ISpatialCoordinate to demonstrate usage. Inheritance Object SpatialCoordinateRelativeLocalizer Namespace : Microsoft.MixedReality.SpatialAlignment Assembly : cs.temp.dll.dll Syntax public class SpatialCoordinateRelativeLocalizer : MonoBehaviour Properties Coordinate The coordinate to use for position the targetRoot. Declaration public ISpatialCoordinate Coordinate { get; set; } Property Value Type Description ISpatialCoordinate"
  },
  "src/SpectatorView.Unity/Assets/SpectatorView/Scripts/UI/README.html": {
    "href": "src/SpectatorView.Unity/Assets/SpectatorView/Scripts/UI/README.html",
    "title": "Custom IRecordingServiceVisuals | MixedReality-SpectatorView Documentation",
    "keywords": "Custom IRecordingServiceVisuals Spectator View supports specifying a custom prefab for starting and stopping screen recording on mobile devices. To configure your own prefab, follow the steps below: Create a prefab containing an Unity component that implements IRecordingServiceVisual . Create a SpectatorViewSettings prefab by calling 'Spectator View' -> 'Edit Settings' in the Unity Editor toolbar. Specify your created prefab as the Override Mobile Recording Service Visual in the MobileRecordingSettings in your SpectatorViewSettings prefab. When a scene containing the SpectatorView prefab starts, the SpectatorView MonoBehaviour will instantiate this custom prefab. It will then search for an IRecordingServiceVisual in the created game object, which is provided a reference to the IRecordingService . Your UI will be responsible for managing its own show and hide behavior. Custom INetworkConfigurationVisuals Spectator View supports specifying a custom prefab for choosing an IP Address on mobile devices. To configure your own prefab, follow the steps below: Create a prefab containing a Unity component that implements INetworkConfigurationVisual . Create a SpectatorViewSettings prefab by calling 'Spectator View' -> 'Edit Settings' in the Unity Editor toolbar. Specify your created prefab as the Override Mobile Network Configuration Visual in the NetworkConfigurationSettings in your SpectatorViewSettings prefab. When a scene containing the SpectatorView prefab starts, the SpectatorView MonoBehaviour will instantiate this custom prefab. Once your prefab fires a NetworkConfigurationUpdated event, the SpectatorView MonoBehaviour script will attempt to connect the StateSynchronizationObserver to the provided IP Address."
  },
  "src/SpectatorView.Unity/Assets/SpectatorView/Scripts/StateSynchronization/README.html": {
    "href": "src/SpectatorView.Unity/Assets/SpectatorView/Scripts/StateSynchronization/README.html",
    "title": "State synchronization | MixedReality-SpectatorView Documentation",
    "keywords": "State synchronization Pre-compilation All of the assets in the unity project need to be assigned unique identifiers. This allows content in the user's application scene to be recreated/updated/destroyed dynamically in the spectator's application scene. This is done through calling Spectator View -> Update All Asset Caches in the Unity toolbar prior to compiling the application. Note: Adding, updating and removing assets will require updating these asset caches as well as re-compiling each platform. In application On the user device, a StateSynchronizationBroadcaster is enabled, while on the spectator device a StateSynchronizationObserver is enabled. These classes are responsible for delegating both network messages and network changes to the StateSynchronizationSceneManager , which drives scene state synchronization. These classes are used to relay camera location, application time, and performance data from the user to spectator device. These classes allow other components to register for custom network events and send network messages through the CommandRegistry (Note: this allows Spatial Alignment components to use the same network connection). In both the user and spectator application, ComponentBroadcasterServices register with the StateSynchronizationSceneManager . ComponentBroadcasterServices specify ComponentBroadcaster types for in scene class types. This allows broadcasters to be created as new components are added to the user application scene. ComponentBroadcasterServices also register for a specific id so that they can receive network messages and create ComponentObservers in the spectator scene. When the StateSynchronizationBroadcaster observes that a StateSynchronizationObserver has connected, the user's scene is configured to be broadcasted. Configuring the user scene for broadcasting requires adding TransformBroadcasters to root game objects of content that is intended to be synchronized. This can be achieved through different manners: GameObjectHierarchyBroadcaster items in the Unity scene will add a TransformBroadcaster to their associated game object. If BroadcasterSettings.AutomaticallyBroadcastAllGameObjects is set to true, a TransformBroadcaster will be added to the root game object of every scene (This is DISABLED by default in SpectatorView). On awake and for every related hierarchy change, the TransformBroadcaster will ensure that all of its children also have TransformBroadcasters . On creation, TransformBroadcasters also make sure that their associated game objects have ComponentBroadcasters created for all components with registered ComponentBroadcasterServices . This effectively sets up the classes needed for components in the user application to broadcast state information to spectator devices. After each frame on the user device, the StateSynchronizationSceneManager will monitor network connection changes. It also determine if any ComponentBroadcasters have been destroyed. It then hands all of the known network connections to each ComponentBroadcaster so that state information can be sent to the spectator devices. On the spectator device, the StateSynchronizationSceneManager will receive network messages to relay to the appropriate ComponentBroadcasterServices . These messages signal component creation, updates and destruction on the users device. This component state information also contains unique component ids that allow specific instances of ComponentBroadcasters on the user device to map 1:1 with specific instances of ComponentObservers on the spectator device. Through this state information, the spectator device's scene is updated to reflect content on the user's device."
  },
  "src/SpectatorView.Unity/Assets/SpectatorView/Scripts/Socketer/README.html": {
    "href": "src/SpectatorView.Unity/Assets/SpectatorView/Scripts/Socketer/README.html",
    "title": "Socketer Overview | MixedReality-SpectatorView Documentation",
    "keywords": "Socketer Overview There are a thousand libraries for using sockets on Windows. The problem is that each one tends to support only one protocol, doesn't support UWP or only supports UWP, are still complex to use, and/or require very different coding patterns. Supporting another protocol means a different library with a completely different usage convention. There are also unfortunately a number of caveats when using sockets. They mostly just work, until you find the situation where they just don't. So, this is Yet Another Socket Library, that hopefully gives greater flexibility for those situations, and greater ease of use. It is intended for fast projects, not production code. Use (C#) // Listening SocketerClient l = SocketerClient.CreateListener(protocol, port); l.Start(); l.Message += Socketer_Message // Sending SocketerClient s = SocketerClient.CreateSender(protocol, host, port); s.Start(); s.SendNetworkMessage(MessageType : uint, Message : string or byte[]); Use (Unity) Add a Socketer component in the scene. Add your consumer code as another component: public class MyClass : MonoBehaviour { public Socketer Network; void Start() { Network.Message += Network_Message; Network.SendNetworkMessage(MessageType : uint, Message : string or byte[]); } } Considerations The first choice is protocol: TCP or UDP UDP: fast, simple, connectionless, unidirectional, no guaranteed ordering, no error checking, no way to know if your packets are arriving TCP: still pretty fast, connections (so you know if you're talking), bidirectional, guaranteed order of arrival and error checking Port: (9999, 12345, etc) This is a number that you make up and (usually) hardcode to your app. Choose one between 1024 and 65535, I recommend between 10000 and 40000 to reduce risk of collisions. To see what's already being used on your machine, run \"netstat -an\" from a cmd window. Host This is usually the IP address (run \"ipconfig\" from a cmd window). It's worth it to put some thought into who the \"server\" will be in your app and who the \"client\" will be. The client needs to know the server's hostname, and will usually store it in a config file or accept it via a UI. Socketer calls these \"sender\" for client and \"listener\" for server. \"127.0.0.1\" means \"the same machine I'm on now\". Protocol differences For Socketer, you can use either protocol with nearly no difference. However, there are some subtle behaviors: The connect and disconnect events only fire for TCP. With TCP, both sender and listener can SendNetworkMessage. With UDP, only sender can SendNetworkMessage. Also with TCP, multiple senders can talk to one listener, and when the listener calls SendNetworkMessage all of the connected senders will receive it. SendNetworkMessages that are made when the other side are unavailable are lost. With UDP, there is no way to know if this happens. With TCP, you may listen to the connection events. All Socketer components automatically try to connect/send, and if the recipient is lost (eg, the other side closes their app) they will reconnect/resume. Socketer automatically tries to make a TCP connection as soon as you call Start(), and continues to try until it succeeds. This is convenient, but sometimes the attempts have a long timeout and this can cause it to take awhile to connect if the timing of when the host becomes available is unlucky. Special cases UWP loopback. If you need to talk to a UWP app that's running on your computer (this most often happens during development), localhost is blocked from receiving incoming connections. It can initiate connections to another server that is NOT UWP. This breaks UDP completely, and for TCP the UWP app must be the sender role. Once the connection is established, you can use the bidirectional nature of TCP to communciate back and forth."
  },
  "src/SpectatorView.Unity/Assets/SpectatorView/Scripts/ScreenRecording/README.html": {
    "href": "src/SpectatorView.Unity/Assets/SpectatorView/Scripts/ScreenRecording/README.html",
    "title": "Recording Android and iOS experiences | MixedReality-SpectatorView Documentation",
    "keywords": "Recording Android and iOS experiences Spectator View supports filming HoloLens experiences with mobile devices. All mobile recording functionality is enabled through screen capture; however, the associated logic varies across platforms. On Android, a custom ScreenRecorderActivity.java has been defined and wrapped by the AndroidRecordingService . On iOS, the iOSRecordingService has been constructed based on Apple's ReplayKit component. Note: On Android, recorded content is always saved to a file; whereas on iOS, recorded content is saved to a temporary file that must be manually saved by the user. Application Flow On start, the SpectatorView MonoBehaviour checks whether recording is enabled through MobileRecordingSetting 's \"Enable Mobile Recording Service\" flag. If said flag is enabled, the declared IRecordingServiceVisual prefab is created in the Unity scene. The IRecordingServiceVisual is then handed a reference to the IRecordingService associated with the current mobile platform. User interactions with the IRecordingServiceVisual can then use this reference to start and stop recording as well as open videos for viewing. Custom IRecordingServiceVisuals The recording service visual shown on mobile devices can be replaced by your own UI. For more information on how to change out the default Spectator View recording UI with your own custom content, see here . Troubleshooting iOS screen recording fails to create a video It happens infrequently, but ReplayKit can return true when attempting to start a recording even though it has failed. One known workaround is to restart your iOS devices and try again. To test whether or not your device is in this state, use the built in iOS screen recording functionality. Enable screen recording in the control center through Settings -> Control Center -> Customize Controls -> Press the '+' next to Screen Recording. You can then start screen recording through the control center. If screen recording generates an error prompt stating that \"Screen recording stopped due to mediaservices failure\", you have hit this failure state."
  },
  "src/SpectatorView.Unity/Assets/SpectatorView/Scripts/Compositor/README.html": {
    "href": "src/SpectatorView.Unity/Assets/SpectatorView/Scripts/Compositor/README.html",
    "title": "Overview | MixedReality-SpectatorView Documentation",
    "keywords": "Overview SpectatorView renders holograms from Unity over a color frame from a capture card. This uses the calibration data from the calibration app to render the holograms at the correct size and orientation. The Compositor window can save still images or videos to disk, and outputs video to the output port of supported capture cards. Output pictures and videos will be saved to \"My Documents\\HologramCapture\". Setup Install SDK and native Unity plugins Follow the instructions documented in SpectatorView.Native for installing the correct SDK for your capture card, and for building and installing the Unity plugins used by the SpectatorView compositor. Build and install the HolographicCamera App The HolographicCamera app is a UWP application that runs on the HoloLens 2 attached to your video camera. This app reads calibration data stored on the HoloLens and communicates that data to the Unity compositor. This app also transmits the position and rotation of the camera to the Unity compositor. If you have gone through the calibration process described here , you may already have this application installed on your device. Open the src/HolographicCamera.Unity project in Unity Open the Build window and switch platforms to the Universal Windows Platform Build the Unity project to create a Visual Studio solution Open the generated Visual Studio solution. Change the Solution Configuration to Release and the Architecture to ARM. Deploy the application to the HoloLens 2 attached to your video camera. Copy calibration data to your HoloLens 2 Calibration data stores the camera intrinsic information for your video camera, and the camera extrinsic information that represents the positional and rotational offset between the HoloLens and the video camera. If you uploaded a CalibrationData.json file when calibrating the video camera rig, you can skip the steps below. However, filming won't be possible if a CalibrationData.json file isn't placed in the HoloLens 2's Pictures folder. Follow the steps here to produce a calibration file for your camera and HoloLens. Use the Device Portal to connect to the HoloLens attached to your camera. On the File Explorer tab in the device portal, upload the calibration file to the Pictures library. The final file path should be \"User Folders\\Pictures\\CalibrationData.json\". Running the compositor Follow the instructions at SpectatorView.Setup to include SpectatorView support in your application. Once you have the HolographicCamera app installed and running and SpectatorView support enabled in your application and running, you are ready to run the compositor. Start the Compositor Open the SpectatorViewCompositor scene in your application's Unity project (with your build platform set to Universal Windows Platform). Open the Compositor Window from the Spectator View -> Compositor menu. Press Play to run the scene. You should now see video output from your camera in the Compositor window. If you don't, here are some troubleshooting suggestions: Make sure the camera is turned on and that the lens cap is off. Make sure the camera is connected to the input port of the capture card. Try using software for your capture card (e.g. Blackmagic Media Express) to validate that camera input is coming into your computer. Connect the compositor to the HolographicCamera Connecting the compositor to the HolographicCamera app running on your camera's HoloLens will provide calibration and pose information for the camera to the compositor. Find the IP address for your HoloLens and enter it inside the first text area in the Holographic Camera box inside the Compositor window. Launch the HolographicCamera (SpectatorView.HolographicCamera) app on the camera's HoloLens. Click the \"Connect\" button inside the Compositor window's Holographic Camera box. You should now see the status change from \"Not connected\" to \"Connected to <your HoloLens name> (<your HoloLens IP address>)\". You should also see the Calibration status change from \"Not loaded\" to \"Loaded\". Locate a shared spatial coordinate for the HolographicCamera Shared spatial coordinates let the HoloLens on the camera and the HoloLens running your application refer to real-world coordinates in a coordinate space shared between both devices. See SpectatorView.SpatialAlignment for more information about shared spatial coordinates. In Preview the Compositor window uses an ArUco marker detector to detect ArUco marker 0 at a printed size of 10cm by 10cm. In future releases, the Compositor window will allow you to choose which type of spatial coordinate sharing to use. Click the \"Located Shared Spatial Coordinate\" button inside the Holographic Camera box. This should cause the video camera light on your HoloLens to come on, and cause the HoloLens to start searching fo the ArUco marker. Aim the HoloLens at the ArUco marker you've printed out. Once the HoloLens detects the marker, the Compositor window's status should change from \"Locating shared spatial coordinate...\" to \"Located\". Connect the compositor to your application The steps for connecting the Compositor to your application are the same as for the HolographicCamera app. Once your application is connected to the compositor, you should start to see your application's content appear in the Unity editor through the State Synchronization system. Once the shared spatial coordinate is located for both the HolographicCamera and for your application, the content from your application should appear on top of the real-world video in the same location as it does in the application on your HoloLens. Options and configuration Recording The Recording expander in the Compositor window can be used to start and stop recording or to take a still picture. Videos and pictures are saved in your Documents\\HologramCapture directory. By default, audio from your computer's microphone will be recorded as part of the video. The Video output mode option allows you to choose between Normal mode, which records only the final composited video, or Split channels , which records a split view with the original video, the opaque hologram without background, the alpha mask for the holograms, and the final composited video. The compositor also outputs video to your capture card (for cards that support output). The output to your video card is always the final composited video. Settings The Hologram Settings expander lets you configure the following options. Video source - before you run the Compositor scene, you can choose which capture card should be used as the input video source. The source cannot be changed once you've started video playback. Alpha - allows you to change the opacity of holograms as they're rendered on top of video. A value of 1 will make holograms completely opaque, while 0 will make holograms completely transparent. Frame time adjustment - provides a way to manually adjust for the latency in the capture card and in the network traffic between the HolographicCamera app and the compositor. When you move the camera, if the holograms seem to lag behind or follow ahead of the real world, adjust this slider to correct for the latency. Compositor stats When the compositor is running, the Compositor Stats expander shows you statistics about composition. Framerate - this framerate box shows the minimum, maximum, and average framerates over the previous second. In order to maintain uninterrupted output of video at 60 frames a second, your scene must render 60 frames a second on average. If you consistently render under 60 frames a second, you may need to make performance tradeoffs in your scene (e.g. decreasing render quality) in order to record smooth video Queued output frames - Shows how many already-rendered frames are queued for output to the capture card. This buffer is used to ensure that video frame output remains smooth over brief frame hitches in your scene. If your scene consistently runs under the target framerate or consistently experiences hitches, the video stream will eventually hitch once this buffer is depleted."
  },
  "src/SpectatorView.Unity/Assets/SpatialAlignment/README.html": {
    "href": "src/SpectatorView.Unity/Assets/SpatialAlignment/README.html",
    "title": "Spatial Alignment | MixedReality-SpectatorView Documentation",
    "keywords": "Spatial Alignment Spatial Alignment component provides abstractions for localization of MR content within the physical world. This also includes abstractions and implementations for the process of exchanging localization information between devices. Note: The code is currently split between this folder, ..\\SpatialAlignment.ASA and ..\\SpectatorView\\Scripts\\SpatialAlignment ; this will be reconciled in the future updates. Key Concepts Before diving into the abstractions, we operate on two concepts when speaking of localization: Coordinate Space: When a rotation/position is meant to be relative to a specific coordinate (location in the real world), we say it is in coordinate space. These rotations/positions can be shared across devices in order to define understood rotations/positions in the shared experience. Application World Space: The rotations/positions that are set in Unity to .position and .rotation properties of Transform objects, are specific to the local application's own \"world space\". This \"world space\" is used by the local application to determine how to lay out content relative to each other; and this \"world space\" itself is relative to the position/rotation of device when the application was launched. The following constructs compose the abstraction and facilitate the the localization processes: ISpatialCoordinate : The abstract construct symbolizing a physical world coordinate that can be used to convert between application's world space and coordinate-relative space. ISpatialCoordinateService : A service for discovering and managing ISpatialCoordinates . Different implementations exist based on different localization methods. SpatialLocalizerInitializer : The construct that begins and facilitates the creation/sharing of ISpatialCoordinates between the local and remote SpatialLocalizer . SpatialLocalizer : This related construct understands how to localize upon or create a ISpatialCoordinate for localization. SpatialCoordinateSystemManager : The singleton manager that manages the incoming/outgoing networking connections, their associated localization state and assigned ISpatialCoordinates to them. ISpatialLocalizationSettings : This component exposes the configuration settings for a specific type of SpatialLocalizer. This class is added to a specially generated prefab in the consuming application, see [Spatial Alignment Dependencies](../../../../doc/SpectatorView.Setup.md## Spatial Alignment Strategy Dependencies) for detailed configuration instructions. SpatialCoordinateSystemParticipant : Represents the localization state of a connected device, including the location and state of the connected device's shared spatial coordinate. Furthermore, the following components play a key role in localization: SpectatorView: This manager singleton selects appropriate mechanism for localization based on current and connected device registration. Localization of Devices The process by which two or more devices agree upon localization details is split into several parts: Registration & Configuration Selection of Localization Method at Connection Time Exchange of Localization Information Registration & Configuration Both of these aspects are required to enable a method to be used for localization, however, they are slightly different. SpectatorView comes pre-registered with several SpatialLocalizers that can be found on SpectatorView\\Prefabs\\SpectatorView.SpatialCoordinateLocalizers.prefab : Azure Spatial Anchors ( SpatialAnchorsLocalizer ) localizer will rely on the hosting (User) device to create the common ISpatialCoordinate to be used by all ASA spectating devices connecting Physical Marker localizers will search for some physical marker in the world Marker Visual localizer pairs will display a marker on the screen of a mobile device to be discovered by the other device. Some of these localization methods require settings, which are set through a SpatialLocalizerInitializer , two can be found on that prefab for the QR and ArUco visual localizers. Additional settings must be added manually by the consuming application onto Generated.StateSynchronization.AssetCaches\\Resources\\SpectatorViewSettings.prefab which is created by invoking the Spectator View > Edit Settings menu item, see [Spatial Alignment Dependencies](../../../../doc/SpectatorView.Setup.md## Spatial Alignment Strategy Dependencies). Selection of Localization Method When the application starts and SpectatorView is initialized, configured localizers are checked for whether they are supported in the current application on the current device and if they are, they are registered with SpectatorView . Afterwards, the process is as follows: SpatialCoordinateSystemManager listens for incoming/outgoing network connections, creating a SpatialCoordinateSystemParticipant for each connection. SpectatorView on the spectating device listens for the creations of these participants, and queries for supported localizers of the participant. Then, based on its own configured prioritized list of SpatialLocalizationInitializers and the supported list returned by the hosting (User) device, it identifies the best localization method to use. Note: Best localization method is determined as the lowest index of the supported localizers in its configured list. Exchange of Localization Information Having determined the appropriate SpatialLocalizationInitializer to use, SpectatorView invokes its RunLocalization method. The SpatialLocalizationInitializer is then responsible for appropriately instantiating and configuring a SpatialLocalizer for localization. It must instantiate and configure localizers for both the local (spectator) and remote (User) participants. Example: For spectator on the mobile phone, a localizer that will display a marker visual is created. For remote participant on the HL2, a localizer will create a localizer that will instruct the remote participant to create appropriate marker detector. Each of instance of the localizers will then execute the appropriate logic to exchange and create the ISpatialCoordinate to be used for localization. When the coordinate is created, the participant is updated with it, and other systems (such as SpatialCoordinateTransformer ) will use it to synchronize positions. Detailed Breakdown of Spatial Alignment Strategies Platform Support Not all spatial alignment strategies support all platforms. See the chart below to determine which strategy best addresses your intended user scenarios. Platform Support HoloLens 2 HoloLens 1 Android iOS Azure Spatial Anchors x x x x QR Code Detection x x x ArUco Marker Detection x x x Azure Spatial Anchors Localization Localization here happens by having the hosting device (User) create an ISpatialCoordinate backed by an Azure Spatial Anchor, it will then pass this coordinate to every spectating device requesting it. SpatialAnchorsCoordinateLocalizationInitializer will configure a SpatialAnchorsLocalizer using the appropriate Azure settings. The hosting (User) device will be instructed to create a localization session, and in turn create (if needed) an Azure Spatial Anchors ISpatialCoordinate . The Id of this coordinate will then be communicated to the spectating device. The spectating version of SpatialAnchorsLocalizer will go ahead and run an ASA discovery session until this coordinate is located. Once the discovery session locates the coordinate, both sessions are completed. Marker Visuals and Marker Detection (QR Codes and ArUco Markers) Spatial alignment based on marker visuals and marker detection allows spectator mobile devices to align with a user HoloLens device. Different marker detectors may be used in the experience (QR Code detection is supported for HoloLens 2, while ArUco marker detection is supported for HoloLens 1), but the general application flow is provided below: Using a LocalizationInitializer, the mobile device instructs the user HoloLens device to create a LocalizationSession for a MarkerVisualDetectorSpatialLocalizer. This requires populating and sending SpatialLocalizationSettings. After telling the user HoloLens device to localize, the mobile device creates its own LocalizationSession using a MarkerVisualSpatialLocalizer. This again requires populating SpatialLocalizationSettings. In the MarkerVisualSpatialLocalizer LocalizationSession, the mobile device tells the user HoloLens device what marker ids are supported by its marker visual. In the MarkerVisualDetectorSpatialLocalizer LocalizationSession, the user HoloLens device assigns the mobile device a marker id. The user HoloLens then begins marker detection by starting coordinate discovery for the MarkerDetectorCoordinateService. In the MarkerVisualSpatialLocalizer LocalizationSession, the mobile device receives its assigned marker id. It then shows a marker visual by starting coordinate discovery for the MarkerVisualCoordinateService. Once the user HoloLens has detected the marker being displayed on the mobile device, a SpatialCoordinate is created and the mobile device is told that the marker visual has been found. The creation of this SpatialCoordinate completes the LocalizationSession on the user HoloLens. Once informed that the marker has been found, the mobile device creates a SpatialCoordinate that reflects the marker visual's location at the time of detection. The creation of this SpatialCoordinate completes the LocalizationSession on the mobile device. The SpatialCoordinate locations found on both devices are then shared with one another, which allows for the scene to be aligned. Physical Marker Detection (QR Codes and ArUco Markers) Spatial alignment based on physical marker detection allows a spectator HoloLens device to align with a user HoloLens device. Again, different marker detectors may be used in this experience, but the application flow is the following: The SpatialCoordinateSystemManager is told to start localization using a MarkerDetectorSpatialLocalizer. For the DSLR filming experience, the compositor window in the editor can be used to generate this alignment request. For non-DSLR filming, a LocalizationInitializer can be added to both devices. Regardless of how localization is started, SpatialLocalizationSettings need to be defined and provided to the MarkerDetectorSpatialLocalizer to create a LocalizationSession. In the created LocalizationSession, a call is made to a MarkerDetectorCoordinateService to start discovering SpatialCoordinates, which kicks off marker detection. Once a marker has been found that has the id provided through the SpatialLocalizationSettings, a SpatialCoordinate is created, completing the LocalizationSession. After SpatialCoordinate locations are found on both devices, they are shared with one another through the SpatialCoordinateSystemParticipant, which allows for the scene to be aligned. Setup Different spatial alignment strategies require different external dependencies, which will require different setup steps. Be sure to obtain the correct dependencies defined here ."
  },
  "src/SpectatorView.Native/EmptyDlls/ARM/README.html": {
    "href": "src/SpectatorView.Native/EmptyDlls/ARM/README.html",
    "title": "| MixedReality-SpectatorView Documentation",
    "keywords": "The dlls in this directory are empty and exist to prevent compilation errors when building for ARM platforms. OpenCV is not supported for ARM; however, the Unity output build attempts to locate ARM versions of these binaries when compiling. If nothing is present, the build will fail not finding the ARM flavor of the opencv dlls."
  },
  "src/SpectatorView.Native/README.html": {
    "href": "src/SpectatorView.Native/README.html",
    "title": "SpectatorView.Native Dlls | MixedReality-SpectatorView Documentation",
    "keywords": "SpectatorView.Native Dlls The following Dlls are built out of the SpectatorView.Native.sln . SpectatorView.Compositor.dll is needed for DSLR camera calibration and DSLR camera spectating experiences. SpectatorView.Compositor.UnityPlugin.dll is needed for DSLR camera calibartion and DSLR camera spectating experiences. SpectatorView.OpenCV.dll is used in both ArUco marker detection and DSLR camera calibration. SpectatorView.WinRTExtensions.dll is used for ArUco marker detection and QR code detection. Building DLLs The instructions below show how to build all of the native DLLs required by SpectatorView. 1. Obtain external dependencies DeckLink Capture Card If you are using a Blackmagic design capture card, you will need to install the SDK and create a Visual Studio user macro for its location. Download Blackmagic design's Desktop Video & Desktop Video SDK from here . Search for Desktop Video & Desktop Video SDK in \"Latest Downloads\" (Note: 10.9.11 is the current version used in the SpectatorView.Compositor.dll. Newer versions may contain breaks.) Note: Desktop Video SDK 10.9.11 does not have a MIT license. License information is provided when downloading the sdk. Extract the SDK anywhere on your computer. Update the DeckLink_inc user macro in dependencies.props with the corresponding path on your computer. Restart Visual Studio Elgato Capture Card If you are using an Elgato capture card, you will need to clone Elgato's gamecapture github repo . Open a Command Prompt in administrator mode Navigate to a folder in which you would like to store your repositories (ex: c:\\git) git clone https://github.com/elgatosf/gamecapture Update the Elgato_Filter user macro in dependencies.props with the corresponding path on your computer. Restart Visual Studio OpenCV Note: SpectatorView.OpenCV.dll introduces dependencies on OpenCV. OpenCV does not have a MIT license. For more information on OpenCV's license, see here . DSLR camera calibration requires a Release x64 version of this binary built from the SpectatorView.OpenCV.Desktop visual studio project. ArUco Marker detection on a HoloLens 1 device requires a Release x86 version of this binary built from the SpectatorView.OpenCV.UWP . 1. Install Vcpkg Open a Command Prompt in administrator mode Navigate to a folder in which you would like to store your repositories (ex: c:\\git) git clone https://github.com/Microsoft/vcpkg cd vcpkg .\\bootstrap-vcpkg.bat .\\vcpkg integrate install 2. Install OpenCV Contrib For ArUco marker detection, you will need to install a x86 uwp friendly version of opencv. For DSLR camera calibration, you will need to install a x64 desktop friendly version of opencv. .\\vcpkg install opencv[contrib]:x86-uwp --recurse .\\vcpkg install opencv[contrib]:x64-windows --recurse NOTE: Copy the above lines exactly (the []s do not indicate an optional value). 2. Build the plugins Building the SpectatorView.Native solution for each architecture will produce the correct required binaries for each platform. Note that not all binaries will build on every architecture. Open src/SpectatorView.Native/SpectatorView.Native.sln in Visual Studio. Build a Release x64 version of the solution. Build a Release x86 version of the solution. Build a Release ARM version of the solution. 3. Troubleshooting build issues Installing OpenCV Contrib for UWP failed When encountering issues with vcpkg, the most up to date information will be found in the vcpkg project . Searching for specific errors in the vcpkg issues list will be the quickest way to find potential workarounds. NOTE: When trying other vcpkgs commits, you may end up with a different version of opencv getting installed to your development machine. This will likely require updating the opencv lib dependencies as described below. OpenCV header/dll is not found If installing opencv with vcpkg succeeded, a few things could still occur that prevent SpectatorViewPlugin's from referencing the opencv libs/dlls correctly. Try the following: Restart Visual Studio. If SpectatorViewPlugin.sln was opened in visual studio prior to installing the opencv for uwp components, visual studio may not have correctly resolved needed environment variables. Closing and reopening visual studio should result in these environment variable paths resolving correctly. Ensure that the opencv lib dependencies declared in the SpectatorViewPlugin project have the correct version number. Vcpkg will periodically move to installing newer versions of opencv. If you right click on your SpectatorViewPlugin project in visual studio's solution explorer, you can then open the project properties dialogue. Look at Linker->Input to see what specific opencv libs are referenced by the project. For OpenCV 3.4.3, you will need to make sure that libs end in 343.lib . Older versions of OpenCV, such as 3.4.1, have dlls ending in 341.lib 4. Adding compiled binaries to SpectatorView.Unity After compiling the above binaries, run tools/Scripts/CopyPluginsToUnity.bat to add said binaries to the SpectatorView.Unity project. This script will also add .meta files for the binaries to the Unity project. Note: The Unity editor does not currently dynamically unload binaries. Errors may occur when trying to copy binaries into your Unity project if the unity editor has loaded said binaries. If errors are encountered with this script, close your Unity editor and try again."
  },
  "samples/Build2019Demo.Unity/README.html": {
    "href": "samples/Build2019Demo.Unity/README.html",
    "title": "//BUILD 2019 Demo | MixedReality-SpectatorView Documentation",
    "keywords": "//BUILD 2019 Demo This sample of using SpectatorView is very similar to the live code demo presented at //BUILD 2019 conference. Running the Demo In order to run the demo, you will need at least two MR/AR capable devices. You should ideally use a HoloLens or HoloLens 2 device to host and interact with the shared application experience. You can then use a mobile device to view the application experience. Once you have the devices ready, follow the instructions below. ARKit Note: If you wish to run the experience on an iOS device with ARKit, download the ARKit repository , unzip it, and copy the contents of the Unity-Technologies-unity-arkit-plugin-94e47eae5954/Assets folder to /samples/Build2019Demo.Unity/Assets/ . Instructions These instructions assume that a HoloLens 2 device will be used to host the shared experience and that an Android phone will be used to spectate the shared experience. For iOS, replace references to Android with iOS. Prepare your devices Connect your devices to the same WiFi network. Obtain and write down your HoloLens's IP Address (This can be found in the settings menu). Configure your project Ensure you have created an Azure Spatial Anchors account. Open the Build2019Demo.Unity project in Unity. If requested, import the TextMeshPro Essentials. Open the Finished_Scene sample scene. Open SpectatorView settings by going to the menu SpectatorView > Edit Settings . Replace ENTER_ACCOUNT_ID and ENTER_ACCOUNT_KEY with appropriate values. Build & Deploy Build UWP Player containing Demo/Scenes/Finished_Scene.unity scene, and deploy this application to the HoloLens 2 device. Export Android Player containing MixedReality-SpectatorView/SpectatorView/Scenes/SpectatorView.Android.unity scene to an Android Studio solution. Open the Android Studio solution and change the main activity in the AndroidManifest.xml file to Microsoft.MixedReality.SpectatorView.Unity.ScreenRecorderActivity . Update the AndroidManifest.xml in Android Studio to contain android.permission.CAMERA , android.permission.INTERNET , android.permission.RECORD_AUDIO and android.permission.WRITE_EXTERNAL_STORAGE uses-permissions. Build the Android Studio solution and deploy this application to the spectating Android device. Launch the SpectatorView.Build2019Demo on the HoloLens 2, and wait for the experience to start. Launch the SpectatorView.Build2019Demo on the Android device and connect to the HoloLens device by specifying the HoloLens's IP Address. Note 1: Building iOS version requires an special step after exporting the Unity project to xCode, see the official instructions . Note 2: Additional setup instructions for spectating with mobile devices can be found here . Sample Project Contents The demo consists of a simple experience with a buttons panel and a slider, configured for spectation by another device using SpectatorView functionality. The Unity project structure contains: ARKit: This folder is not checked-in by default, but it's needed to run the experience on ARKit iOS device; see the ARKit Note above. AzureSpatialAnchors: This folder contains the Azure Spatial Anchors (ASA) plugin referenced from the submodule added at /external/Azure-Spatial-Anchors-Samples/ ; the source is hosted on GitHub . Demo: Demo assets and prefabs for the simple experience. GoogleARCore: This folder contains the ARCore SDK referenced from the submodule added at /external/ARCore-Unity-SDK/ ; the source is hosted on GitHub . MixedReality-SpectatorView: Spectator View assets symlinked from /src/SpectatorView.Unity/Assets MixedRealityToolkit-Unity: MixedRealityToolkit-Unity assets symlinked from the common submodule located at /external/MixedRealityToolkit-Unity/Assets Plugins: This folder contains parts of the ASA plugin that need to be in this location."
  },
  "samples/README.html": {
    "href": "samples/README.html",
    "title": "Spectator View Samples | MixedReality-SpectatorView Documentation",
    "keywords": "Spectator View Samples This folder contains sample and demo projects that are maintained by the SpectatorView team. Below you will find the instructions on how to get started, as well as the sample folder structure setup and dependencies. Getting Started Ensure you have all the required software, for detailed instructions see [Required Software](../doc/SpectatorView.Setup.md#Software & Hardware Requirements). Git Tools Visual Studio Unity 2018.3.14f1 (Optional) Windows 10.0.18362.0 SDK (Optional) Android Studio (Optional) XCode Once you have the required software, follow these steps: Using your favorite Git management tool, clone this repository if you haven't yet. Then with git, pull the latest version of the code. Run /tools/scripts/SetupRepository.bat as an administrator to get ensure the appropriate submodules for the sample projects are cloned and the correct directories are linked into the sample project. On Mac or Linux, you can run /tools/scripts/SetupRepository.sh . In future updates you can pull to latest by invoking git pull --recurse-submodules command. Contents This repository currently has the following samples: //BUILD 2019 Demo Troubleshooting If you encounter some issues, the first thing to do is to run /tools/scripts/SetupRepository.bat as an administrator. For additional troubleshooting options look below. Issue: Unity Project Folder Structure Broken If you happened to run step 3 above when Unity was open, you will notice that the Project window may contain the incorrect folder structure. This only happens when a symlink is inflated while Unity is open, to fix this: Close Unity Delete the Library folder that is adjacent to the Assets folder Re-open Unity Issue: DirectoryNotFoundException during Build There is a known issue with MixedRealityToolkit-Unity codebase that produces build issues due to deeply nested AsmDef files. You will see build errors such as: DirectoryNotFoundException: Could not find a part of the path \"X:\\...<SOME_PATH>...\\samples\\Build2019Demo.Unity\\Assets\\MixedRealityToolkit-Unity\\MixedRealityToolkit.Examples\\Demos\\Utilities\\InspectorFields\\Inspectors\\MixedRealityToolkit.Examples.Demos.Utilities.InspectorFields.Inspectors.asmdef\" To work around this issue for the time being, place your project in a directory with a shorter name, such as c:\\proj."
  },
  "doc/SpectatorView.Setup.VideoCamera.html": {
    "href": "doc/SpectatorView.Setup.VideoCamera.html",
    "title": "Spectator View Video Camera Setup | MixedReality-SpectatorView Documentation",
    "keywords": "Spectator View Video Camera Setup Requirements Note: Video camera filming currently requires a HoloLens 2 for the camera rig. HoloLens 1 devices are not supported. HoloLens 2 (This device will be needed in addition to the device worn by the user) Windows PC Visual Studio 2017 installed on the PC Windows 10 SDK (10.0.18362.0) Unity installed on the PC A video camera that outputs 1080p video over SDI or HDMI Blackmagic Design or Elgato capture card HoloLens 2 Camera Mount (Coming soon...) Calibration Video camera filming relies on a physically mounted HoloLens 2 device generating position and orientation information for your video camera in the shared application space. This allows the Unity editor to understand where the video frame was filmed from in order to generate and composite Holograms into the feed. To get accurate tracking of your video camera in the physical world, you need to calculate the physical transform between the HoloLens 2 device and the video camera sensor. This is achieved through calibration. The below instructions assume that you have already gone through the repository setup instructions here to obtain and reference the Spectator View codebase. Setup Build x64 Release versions of SpectatorView.Compositor.dll & SpectatorView.Compositor.UnityPlugin.dll based on the instructions here . Build a x64 Release version of SpectatorView.OpenCV.dll based on the instructions here . Copy these Dlls to the SpectatorView.Unity project by running tools/Scripts/CopyPluginsToUnity.bat . Download the MixedReality QR Code Plugin zip folder and extract its contents into the external/MixedReality-QRCodePlugin folder. Print the Chessboard used to calculate video camera intrinsics and mount it to a solid surface. Note: This can be obtained by printing two copies of doc/images/HalfChessboard.pdf on 8.5x11 sheets of paper. Print the Calibration Board used to calculate video camera extrinsics and mount it to a solid surface. Note: This can be obtained by printing all of the CalibrationBoard*.pdf files in the doc/images folder on 8.5x11 sheets of paper. If you choose to print your own board using CalibrationBoard.png , make sure that each QR Code is larger than 5cm in length. This Calibration Board contains 18 QR Codes and ArUco markers pairs that are at known pixel distances from one another. With these marker pairs, calibration logic can use QR Code detection on the HoloLens 2 and ArUco detection in the editor to determine where ArUco markers in the video camera frame are in the physical world. When printing this board, markers need to be larger than 5cm in length. It's also important to keep these marker pairs on the same page when printing so that their pixel distances from one another are maintained. The orientation of these pairs relative to other pairs does not need to be maintained (meaning, each marker pair can get printed on its own sheet of paper, but both the QR Code and ArUco marker in a pair should be printed on the same page at the same relative distance that they are at in the board). On your HoloLens 2 device, disable sign in. This can be achieved by going to 'Settings -> Sign-in options'. For 'Require sign-in', select 'Never'. Setup the device portal for your HoloLens 2 device. To see how to setup device portal, look here . Connect your HoloLens 2 to Wi-Fi and obtain its IP address. This can be done through the settings application on the device. Go to Settings -> Network & Internet -> Wi-Fi -> Hardware properties to obtain the device's IP address. Deploy the HolographiCamera.Unity project to your HoloLens 2 device. Open the src/HolographicCamera.Unity project. Open the HolographicCamera Unity scene in the project. In the WSA Unity player settings, add the QRCODESTRACKER_BINARY_AVAILABLE preprocessor directive. (This is located via Build Settings -> Player Settings -> Other Settings -> 'Scripting Defined Symbols Build and deploy this project to your HoloLens 2 device. Test QR Code detection for the SpectatorView.HolographicCamera app deployed in step 7. Build and Deploy the SpectatorView.HolographicCamera app to your device (see step 7). Open the SpectatorView.Example.Unity project. Open the SpectatorView.ExtrinsicsCalibration Unity scene. Open the Calibration window in the Unity Editor. This can be found in the toolbar under 'Spectator View' -> 'Calibration'. Run the SpectatorView.ExtrinsicsCalibration Unity scene in the editor. Connect to your HoloLens 2 device by specifying its IP address in the Holographic Camera text field and pressing 'Connect'. Press 'Request Marker Data' to kick off QR Code detection. View your printed Calibration Board through the HoloLens 2 device and make sure that blue and green squares appear over the QR Codes and ArUco markers (This may require getting the HoloLens 2 extremely close to the calibration board. 5cm QR Codes need to be detected from a distance of 10cm). Note: Don't skip this testing step. You will need to accept the webcam permission dialogue that is launched when first attempting QR Code detection with the newly installed SpectatorView.HolographicCamera application. Once the HoloLens 2 is attached to the video camera rig, it will be extremely difficult/impossible to accept these dialogues without dismantling your rig. Attach your video camera to the PC capture card and ensure that the camera stream works. Attach your video camera by HDMI or SDI to the capture card hooked up to your PC. Turn on your video camera. Open the SpectatorView.Example.Unity project. Open the SpectatorViewCompositor Unity scene in the Unity Editor. Open the Compositor window in the Unity Editor. This can be found in the toolbar under 'Spectator View' -> 'Compositor'. Run the SpectatorViewCompositor scene in the Unity Editor. You should see the Camera Feed appear in the Compositor window if everything has been configured correctly. Attach your HoloLens 2 device to the video camera using the HoloLens 2 camera mount (Coming soon...) Camera Intrinsics Camera intrinsics quantify focal lengths, principal points and lens distortion information for your video camera. For video camera filming, camera intrinsics are used to calculate the Unity camera's projection matrix for the hologram feed. This then allows the hologram feed to be composited with the video camera feed. For more information on camera intrinsics, see here . Note: For best results, use a bright external light to illuminate your chessboard and calibration board. Set your lens's aperture to the smallest aperture (largest f-stop value) for which images still are exposed enough to see the marker pattern. Smaller apertures increase the depth of field and will allow for less focus blur when capturing images at different depths. Both during and after calibrating a video camera rig, you should avoid changing the video camera's lens zoom/focal length. Changing zoom/focal length will invalidate calibration data. Open the SpectatorView.Example.Unity project. Open the Calibration window in the Unity Editor. This can be found in the toolbar under 'Spectator View' -> 'Calibration'. Open the SpectatorView.IntrinsicsCalibration Unity scene. Update the Editor Intrinsics Calibration serialized fields in the Unity Inspector. You will need to update the Chessboard Width, Chessboard Height and Chess Square Size values to reflect the Chessboard print that you obtained during setup. Run the SpectatorView.IntrinsicsCalibration Unity scene in the Unity Editor. Note: EditorIntrinsicsCalibration does not currently delete obtained Chessboard images with each subsequent run of the SpectatorView.IntrinsicsCalibration Unity scene. If you are calibrating a new video camera or have changed the focal length of the video camera, you will want to manually delete the Calibration folder in your Documents folder prior to running this scene. Begin taking photos of the Chessboard with your video camera through the Unity Editor. To capture a photo Either press 'Take Photo' in the calibration window or select the 'Game' window and press 'Space' on your keyboard. For each obtained image, EditorIntrinsicsCalibration will attempt to detect the chessboard. If the chessboard is found, it will be displayed in the detected chessboard image on the screen. The 'Usable Chessboard Images' count in the Calibration window will also be incremented. Continue obtaining images until you have obtained a sufficient number of chessboard feature points. Each image where the chessboard is detected will result in (Chessboard Width - 1) x (Chessboard Height - 1) feature points. You can obtain better calibration results by obtaining more chessboard feature points at different locations. You also want to have an even distribution of chessboard feature points throughout the video camera frame. The distribution of chessboard feature points can be observed based on Chessboard Heatmap and Chessboard Corners images that are also shown in the Unity scene. Examples of Chessboard Heatmap and Chessboard Corners with even distribution are shown below. Chessboard Heatmap Chessboard Corners After obtaining enough Chessboard feature points, Press 'Calculate Camera Intrinsics' in the Calibration window or 'Enter' on your keyboard to calculate camera intrinsics. Note: Calculating camera intrinsics may take a while and take control of the UI thread for the Unity Editor. Locate the output CameraIntrinsics*.json file on your computer. This file, as well as the images used to calculate camera intrinsics should be located in a 'Calibration' folder within your 'Documents' folder. Camera Extrinsics Camera extrinsics are used to calculate the physical transform from your HoloLens 2 device to the video camera. When filming with the video camera, the HoloLens 2's position and orientation is provided to the Unity Editor. This position and orientation can then be transformed using the camera extrinsics to understand where the video camera is in the scene. The process for obtaining camera extrinsics is explained below. Open the SpectatorView.Example.Unity project. Open the Calibration window in the Unity Editor. This can be found in the toolbar under 'Spectator View' -> 'Calibration'. Open the SpectatorView.ExtrinsicsCalibration Unity scene. Update the Editor Extrinsics Calibration serialized fields in the Unity Inspector. You will need to set the Camera Intrinsics Path to the CameraIntrinsics*.json file that you created in the previous Camera Intrinsics steps. Run the SpectatorView.ExtrinsicsCalibration Unity scene in the Unity Editor. Note: EditorExtrinsicsCalibration does not currently delete Calibration board datasets with each subsequent run of the SpectatorView.ExtrinsicsCalibration Unity scene. You likely will get worse calibration results mixing old extrinsics datasets with new extrinsics datasets. Consider deleting HEADSET_DATA, DSLR_ARUCO and DSLR_ARUCO_DETECTED folders in the Calibration folder within your Documents folder before running SpectatorView.ExtrinsicsCalibration. Launch the SpectatorView.HolographicCamera app on your HoloLens 2 device through the device portal. Specify your device's IP address in the Calibration window and press connect. After connecting your device, press 'Request Marker Data' in the calibration window or press 'Space' on your keyboard when the Unity 'Game' window is in focus. This will kick off QR Code detection. Take your HoloLens 2 and video camera rig and and detect all of the QR Codes on your printed Calibration Board. This may require getting the HoloLens 2 device close to the QR Codes. To determine whether all of the QR Codes have been detected, connect to your device through the device portal. Then, view the Mixed Reality Capture stream until green and blue squares have been placed over the QR Code and ArUco markers on the Calibration Board. This may require placing the HoloLens 2 device super close to the Calibration Board. Note: QR Code detection requires that the QR Codes are larger than 5cm. If the QR Codes are smaller than 5cm in length, you will need to reprint a larger board. After detecting all of the markers, make sure the entire Calibration Board can be seen in the video camera stream. Then press 'Request Marker Data' or press the 'Space' key to obtain marker information from the HoloLens 2 device. The 'Usable marker datasets' count should be incremented. You can also see how many markers were detected in the last dataset relative to the minimum number of markers that are required for a dataset to be deemed usable. After obtaining multiple marker datasets and Calibration Board images, press 'Calculate Camera Extrinsics' or the 'Enter' key when the Game window is in focus to calculate the camera extrinsics. Look in the Calibration window to see whether or not the calculation succeeded. If the calculation did succeed, 'Global Extrinsics' and 'Global HoloLens' game objects will have been placed in your Unity scene. The difference in position and orientation of these prefabs should equate to the physical transform between your HoloLens device and the video camera. It will be used in filming to understand where your video camera is in the physical world relative to the HoloLens. Note: The physical transform you observe may be wildly off based on the quality of calibration data you obtained. If these values don't seem correct, you should go through the 'Testing Calibration' process below before uploading your calibration data to your HoloLens device. If your physical transforms look good, you can choose to upload your calibration file to the device by pressing 'Upload Calibration Data'. Note: Uploading calibration data to your device will overwrite any previously existing calibration data on the device. CalibrationData.json is stored in the Pictures Library on the HoloLens 2 device and can be manually managed through Device Portal's File Explorer. DO NOT press 'Upload Calibration Data' if you already have valid calibration data on your device and do not want to overwrite it. After uploading a CalibrationData.json file to your HoloLens 2 device's Picture Library, you have completed calibration and can begin filming. However, calibration can generate varying results. It's suggested to test your calibration to ensure it achieves the quality required for your filming needs. Multiple calibration attempts may be required to obtain adequate results. Testing Calibration It may take multiple attempts at calibration to obtain sufficient results for video camera filming. To assess different calibration results, you can use the 'Calibration Test' window provided in the Spectator View codebase. Instructions for using this window are as follows: Print the following QR code at a size greater than 10cm. Build and deploy the SpectatorView.HolographicCamera application to your HoloLens device. Open the SpectatorView.Example.Unity project. Open the Calibration Test window in the Unity Editor. This can be found in the toolbar under 'Spectator View' -> 'Calibration Test'. Open the SpectatorViewCompositor unity scene in the Unity Editor. Run the SpectatorViewCompositor scene in the Unity Editor. Connect to your HoloLens device using the 'Calibration Test' window. Locate a shared spatial coordinate using the 'QR Code\" localization strategy. Once you have located the shared spatial coordinate, press 'Start Recording'. Begin filming the printed QR Code. After obtaining some footage of the QR Code, press 'Stop Recording'. This should populate the 'Recording index file location'. Specify the 'Calibration file' that you would like to use for testing. Measure the physical length of your printed QR Code, and set the 'Marker size (m)' field to this value (Note: this value should be in meters). Press 'Play' in the 'Calibration Test' window. A cube will be placed in the scene on top of your printed QR Code. The accuracy of this placement when moving around your video camera allows for a subjective assessment of whether or nto the calibration will suffice for your needs. Uploading Calibration Data If you chose not to immediately upload your calibration data to your device or have tested multiple calibration data files, you can manually upload the one of your choosing by the following: Open the Device Portal for your HoloLens 2 device. Navigate to your HoloLens 2 Device's File explorer in the Device Portal. This can be found by going to 'System' -> 'File explorer'. Rename your chosen CalibrationData*.json file to CalibrationData.json. Upload this renamed CalibrationData.json file to the Pictures Library on your HoloLens device. This can be done by going to 'User Folders\\Pictures'. Then you can upload the file. Filming After you have calibrated your rig, you will be ready to film HoloLens experiences with your video camera. For more information on filming, see here ."
  },
  "doc/SpectatorView.Setup.html": {
    "href": "doc/SpectatorView.Setup.html",
    "title": "Spectator View Mobile Setup | MixedReality-SpectatorView Documentation",
    "keywords": "Spectator View Mobile Setup To setup spectator view with a video camera, see here . Software & Hardware Requirements Note: Spectator View does not currently support Unity's ARFoundation package . For Android and iOS experiences, Spectator View requires using ARCore and ARKit. HoloLens 2 & HoloLens Requirements Windows PC HoloLens 2 or HoloLens Visual Studio 2017 installed on the PC Windows 10 SDK (10.0.18362.0) Unity installed on the PC Android Requirements Windows PC Android Device that supports AR Core Android Studio Obtain ARCore v1.7.0 (Note: only v1.7.0 has been tested, use other versions at your own risk). This can be achieved by running the tools/Scripts/SetupRepository.bat script as an administrator or by manually copying assets content into a ARCore-Unity-SDK folder in the external directory. Unity installed on your development device with Android build support . This module can be included when first installing Unity, or you can use Unity Hub to add the module after installing. Note: ARCore does not share MixedReality-SpectatorView's MIT license. For more information on ARCore licensing, see here . iOS Requirements Note: ARKit contains some scripts that will generate build failures for HoloLens builds. You will only need to obtain the ARKit Unity Plugin described below on your mac device. Mac ARM64 iOS Device that supports AR Kit Unity installed on the Mac with iOS build support . This module can be included when first installing Unity, or you can use Unity Hub to add the module after installing. XCode installed on the Mac Obtain an apple developer license Obtain Unity's ARKit Plugin and place it within the external/ARKit-Unity-Plugin folder. Note: Unity's ARKit Plugin has two licenses, one of which is not a MIT license. For more information on ARKit licensing, see here . Preparing your project To use the Spectator View codebase, its suggested to clone and reference the MixedReality-SpectatorView repository through symbolic linked directories in your Unity project. Before beginning on the steps below, go through the repository setup process here . This will ensure that the Unity editor components referenced below exist in your project. Spatial Alignment Strategy Dependencies Spectator View requires multiple devices understanding a shared application origin in the physical world. In order to establish this shared application origin, you will need to choose and use a spatial alignment strategy. Different dependencies are needed for different strategies. For more information on spatial alignment strategies, see here . Not all spatial alignment strategies support all platforms. See the chart below to determine which strategy best addresses your intended user scenarios. Platform Support HoloLens 2 HoloLens 1 Android iOS Azure Spatial Anchors x x x x QR Code Detection x x x ArUco Marker Detection x x x Azure Spatial Anchors Setup an Azure Spatial Anchors account and obtain an Account ID and Primary Key . Obtain AzureSpatialAnchors v1.1.1 . This can be achieved by running the tools/Scripts/SetupRepository.bat script as an administrator or by manually copying assets content into the external/Azure-Spatial-Anchors-Samples folder. Add the SPATIALALIGNMENT_ASA preprocessor directive to your Universal Windows Platform Player Settings (This is located via Build Settings -> Player Settings -> Other Settings -> 'Scripting Defined Symbols') Add the SPATIALALIGNMENT_ASA preprocessor directive to your Android Player Settings (This is located via Build Settings -> Player Settings -> Other Settings -> 'Scripting Defined Symbols'). Be sure to pick the Android tab in the Player Settings. Note: If the Android Player Settings don't exist as an option, you may need to install the Android Build tools for Unity. For instructions on how to do this, see here . Add the SPATIALALIGNMENT_ASA preprocessor directive to your iOS player settings (This is located via Build Settings -> Player Settings -> Other Settings -> 'Scripting Defined Symbols'). Be sure to pick the iOS tab in the Player Settings. Note: If the iOS Player Settings don't exist as an option, you may need to install the iOS Build tools for Unity. For instructions on how to do this, see here . Create a SpectatorViewSettings prefab by calling 'Spectator View' -> 'Edit Settings' in the toolbar. Add a SpatialAnchorsCoordinateLocalizationInitializer to this SpectatorViewSettings prefab. Update the Account ID and Account Key to be the Account ID and Primary Key values that you obtained in step 1. Update the SpatialLocalizationInitializationSettings Prioritized Initializers list to reference the SpatialAnchorCoordinateLocalizationInitializer you created. Note: Use of an Account Id and Account Key can accelerate your development process. However, hardcoding these values into your application isn't a safe practice and should be avoided for enterprise deployed solutions. For your end application, its suggested to use an Access or Authentication token. More information on how to setup and use AAD tokens with ASA can be found here . Azure Spatial Anchors on iOS If you are building Azure Spatial Anchors on iOS, you will need to take some additional steps after generating your XCode project through Unity. After exporting an iOS version of your application in Unity, do the following: In the terminal, navigate to your xcode project folder. Run 'pod install --repo-update' in the terminal when in your xcode project folder. Open and compile your application using the xcode workspace . Do NOT use the xcode project . Note: Failing to take the above steps may result in errors such as 'Undefined symbols for architecture arm64' and 'framework not found Pods_Unity_iPhone' For more information on building ASA for iOS in Unity see here . QR Code Detection Download the QR APIs Nuget Package releases.zip folder and extract its contents into the external/MixedReality-QRCodePlugin folder. Build an x86 Release version of SpectatorView.WinRTExtensions.dll and include the associated dll's in your Unity project. Adding the plugins to your Unity project can be achieved by running the tools/Scripts/CopyPluginsToUnity.bat script. In the WSA Unity player settings, add the QRCODESTRACKER_BINARY_AVAILABLE preprocessor directive. (This is located via Build Settings -> Player Settings -> Other Settings -> 'Scripting Defined Symbols') ArUco Marker Detection Build an x86 Release version of SpectatorView.OpenCV.dll and SpectatorView.WinRTExtensions.dll (see instructions here ) and include the associated dll's in your Unity project. Add the plugins to your Unity project by running the tools/Scripts/CopyPluginsToUnity.bat script. This will add an empty SpectatorView.OpenCV.dll (and dependencies) for the ARM build flavor, which prevents HoloLens 2 build errors. Building & Deploying Before Building Obtain your HoloLens's ip address from its windows settings menu via Settings -> Network & Internet -> Wi-Fi -> Hardware Properties. Add any of the preprocessor directives or Unity packages described above that you intend to use to your clone of the SpectatorView codebase. Open the SpectatorView.HoloLens scene in your Unity project. In the Unity editor, call 'Spectator View -> Update All Asset Caches' (This will be located in the Unity editor toolbar) to prepare content for state synchronization. Add the Generated.StateSynchronization.AssetCaches folder to your project's repository to share across development devices. Note: Asset Caches need to be updated on one development machine and shared across development machines . Asset Caches aren't currently created in a deterministic manner and can't be recreated in new development environments. The easiest way to share this with a team is to commit changes to the Generated.StateSynchronization.AssetCaches folder that will appear in the Unity project's Assets directory. For more information on Asset Caches see SpectatorView.StateSynchronization . HoloLens 2 & HoloLens Make sure your Unity project contains the asset caches that were created in the 'Before building' steps. Open the project scene that you intend to use with SpectatorView. Add the SpectatorView prefab to the scene. Setup your scene to synchronize content. You can either have all content synchronized by checking 'Automatically Broadcast All Game Objects' in BroadcasterSettings located in your SpectatorViewSettings prefab. Or, you can manually add GameObjectHierarchyBroadcaster components to all parent game objects in the scene that you want synchronized. Press the 'HoloLens' button on the Platform Switcher attached to Spectator View in the Unity inspector (This should configure the correct build settings and app capabilities). Build and deploy the application to your HoloLens device. Android Make sure your Unity project contains the asset caches that were created in the 'Before building' steps. Make sure that you have a reference to ARCore v1.7.0 in your project. This can be achieved by running the tools/Scripts/SetupRepository.bat script as an administrator or by downloading and importing the package from ARCore v1.7.0 . Open the SpectatorView.Android Unity scene. Press the 'Android' button on the Platform Switcher attached to Spectator View in the Unity inspector (This should configure the correct build settings and app capabilities). Check 'ARCore Supported' under 'Build Settings -> Player Settings -> Android -> XR Settings' from the Unity editor toolbar. Export your project to Android Studio. Be sure to declare the SpectatorView.Android scene as the scene included. If SpectatorView.Android does not exist in your list of scenes to choose from in the build settings, open the scene in the Unity editor. Then reopen the build settings and press 'Add Open Scenes'. Update the AndroidManifest.xml in Android Studio to use the Microsoft.MixedReality.SpectatorView.Unity.ScreenRecorderActivity class compared to the UnityPlayerActivity as the application activity. Update the AndroidManifest.xml in Android Studio to contain android.permission.CAMERA , android.permission.INTERNET , android.permission.RECORD_AUDIO and android.permission.WRITE_EXTERNAL_STORAGE uses-permissions. Build and deploy the application through Android Studio to your desired device. If it is a new Android development device, you may need to enable developer options and debugging. For information on setting up your Android device for debugging, see here . iOS Note: Building iOS applications requires a mac. Make sure your Unity project contains the asset caches that were created in the 'Before building' steps. Asset caches can't be recreated in new development environments, so the asset caches created on the PC need to be checked in or copied over to your mac development environment. Import Unity's ARKit Plugin to your Unity project. To do this, download the source code from the provided link. You can then add the source code to the external/ARKit-Unity-Plugin folder. The tools/Scripts/AddDependencies.bat script should have added a symbolic link to this folder to your project when setting things up. Open the SpectatorView.iOS Unity scene. Press the 'iOS' button on the Platform Switcher attached to Spectator View in the Unity inspector (This should configure the correct build settings and app capabilities). Export the iOS project to a XCode solution. Be sure to include the SpectatorView.iOS scene. If SpectatorView.iOS scene does not exist in your list of scenes to choose from in the build settings, open the scene in the Unity editor. Then reopen the build settings and press 'Add Open Scenes'. Configure the signing certificate for your Unity generated project in XCode to reflect your developer account. Build and deploy the application through XCode to your desired device (See the below steps if using ASA). iOS with Azure Spatial Anchors In the terminal, navigate to your xcode project folder. Run 'pod install --repo-update' in the terminal when in your xcode project folder. Open and compile your application using the xcode workspace . Do NOT use the xcode project . Note: Failing to take the above steps may result in errors such as 'Undefined symbols for architecture arm64' and 'framework not found Pods_Unity_iPhone' For more information on building ASA for iOS in Unity see here . Example Scenes If you would like to try out an example before setting up your own application to work with spectator view, run tools/Scripts/SetupRepository.bat as an administrator. Then, open the samples/SpectatorView.Example.Unity project. You can then build and deploy the following scenes: HoloLens: SpectatorView.HoloLens Android: SpectatorView.Android iOS: SpectatorView.iOS Customizing UI Spectator View contains some ability for customizing UI. For more information, see here . Troubleshooting Issue: DirectoryNotFoundException: Could not find a part of the path \"*.asmdef\" Spectator view uses symbolic linked directories in its sample projects, which results in large file paths. A DirectoryNotFoundException can occur if these file paths become too long. To fix this, place your Unity project in a directory with a shorter name, such as c:\\proj. Issue: Android screen recording fails to begin based on PERMISSION_DENIED In some instances, contributors have experienced issues with android permissions after exporting their Unity project to Android Studio and declaring the ScreenRecordingActivity as their main activity in the AndroidManifest.xml. It's been observed that android:maxSdkVersion=18 arguments can appear in the exported solution for the WRITE_EXTERNAL_STORAGE and READ_EXTERNAL_STORAGE user-permissions declared in their AndroidManifest. Removing maxSdkVersion declarations has unblocked users and allowed screen recording to work. Issue: System.* types fail to resolve when first building a HoloLens visual studio solution generated from Unity When first opening a visual studio solution generated from Unity for the Spectator View codebase, the build may fail. Typically after this first failure, an Opening repositories step will run and output to the visual studio console. Reattempting the build after this step has ran typically results in the solution succeeding to compile."
  },
  "doc/SpectatorView.Debugging.html": {
    "href": "doc/SpectatorView.Debugging.html",
    "title": "Spectator View Debugging | MixedReality-SpectatorView Documentation",
    "keywords": "Spectator View Debugging Debug Logging The majority of the Spectator View related classes will have 'Debug Logging' flags that can be toggled on and off through the Unity inspector. Enabling these flags results in richer state information being output to log files as well as debug consoles. It's suggested to enable all of these flags when debugging Spectator View related issues. Most if not all of the prefabs provided in this project will have these flags enabled by default. Show Debug Visuals The SpatialCoordinateSystemManager has a 'Show Debug Visuals' flag. When enabled, debug visual game objects will be placed at each detected spatial coordinate. Viewing these markers across different devices can assist in understanding if transforms have been applied incorrectly to spectator cameras. It can also demonstrate how accurate different devices were when detecting spatial coordinates."
  },
  "README.html": {
    "href": "README.html",
    "title": "Spectator View | MixedReality-SpectatorView Documentation",
    "keywords": "Spectator View Spectator View is an augmented reality product that enables viewing HoloLens experiences from secondary devices. Spectator View has multiple configurations and supports a variety of scenarios from filming quick prototypes to producing keynote demos. Getting Started Obtaining the code Currently, the supported process for obtaining and consuming Spectator View code is by adding the repository as a submodule to your project Downloading source code from the releases tab is possible, but helper scripts and sample projects may break if you choose not to reference the codebase as a submodule. Steps for cloning and using the git repository are as follows: Download git Setup a repository for your project. For more information on how to setup a repository, see here . Open an administrator command window. Clone your project's repository. Change directories to that of your project's repository. Add the MixedReality-SpectatorView codebase as a submodule for your project by running git submodule add https://github.com/microsoft/MixedReality-SpectatorView.git sv Note: If you are anticipating contributing to the MixedReality-SpectatorView project, you should fork your own version of the repository and add it as a submodule instead of the Microsoft repository. Your forked repository url will look something like this: https://github.com/YourGitHubAliasHere/MixedReality-SpectatorView.git . Change directories to the MixedReality-SpectatorView submodule. Choose the appropriate branch that you would like to use for the MixedReality-SpectatorView submodule. By default, the submodule will be directed at master, which may not be the most stable branch for consumption. To change branches run the following commands: Change directories into the submodule. Run git fetch origin release/1.0.0-beta Run git checkout release/1.0.0-beta Run git branch to make sure you are using the release/1.0.0-beta branch After running these git commands, you will have a local copy of the MixedReality-SpectatorView codebase. Next, you will need to follow the instructions in Setup your local environment to obtain external dependencies. Setting up your local environment The MixedReality-SpectatorView repository uses Unity packages, git submodules and symbolic linked directories for obtaining and referencing external dependencies. Prior to opening any Unity projects, you will need to run a setup script. The setup script will configure your git repository to use clrf line endings and support symbolic linked directories. The setup script will obtain and update all git submodules declared in the MixedReality-SpectatorView repository. The setup script will fix any symbolic linked directories in the MixedReality-SpectatorView repository. Note: Not all submodules have the same MIT LICENSE as the MixedReality-SpectatorView repository. Submodules in this project currently include: MixedRealityToolkit-Unity , Azure-Spatial-Anchors-Samples and ARCore-Unity-SDK . You should view and accept the licenses in these projects before running the tools/Scripts/SetupRepository.bat script. Depending on what release you are using the correct setup script may vary. Choose the appropriate script below based on the git branch that you have checked out in your clone of the MixedReality-SpectatorView repository. Setting up the release/1.0.0-beta branch If you are using the release/1.0.0-beta branch, You will need to run the following command: Run 'tools/Scripts/ResetSamples.bat' as an administrator on a PC (On Mac or Linux, you can run 'sh /tools/scripts/ResetSamples.sh' ). These scripts are located within your MixedReality-SpectatorView submodule. Setting up the master branch If you are using the master branch, you will need to run the following command: Run 'tools/Scripts/SetupRepository.bat' as an administrator on your PC (On Mac or Linux, you can run 'sh /tools/scripts/SetupRepository.sh' ). These scripts are located within your MixedReality-SpectatorView submodule. Samples After going through the setup steps in 'Obtaining the code' and 'Setting up your local environment', sample projects will be configured for use in your clone of the MixedReality-SpectatorView repository. It's easy to get started by building off one of the samples or by inspecting them to understand project setup. For more information, see Samples . Adding references to your own project After obtaining a local clone of the MixedReality-SpectatorView repository and resolving its external dependencies (see above), the suggested mechanism for referencing the code is by adding symbolic linked directories to your Unity project's Assets folder. You can do this with the following: Note: Symbolic linked directories should be setup as relative paths. Using relative paths should allow directories to resolve correctly regardless of where you or your team members clone your project repository in their local file systems. The instructions below demonstrate setting up symbolic linked directories based on the following paths: Project repository directory: c:\\Your\\Unity\\Project Project Assets directory: c:\\Your\\Unity\\Project\\Assets MixedReality-SpectatorView submodule directory: c:\\Your\\Unity\\Project\\sv Using the release/1.0.0-beta branch Close any instances of Unity. Open an administrator command window. Run the following commands, updating the paths to reflect your local environment: cd c:\\Your\\Unity\\Project\\Assets mklink /D \"MixedReality-SpectatorView\" \"..\\sv\\src\\SpectatorView.Unity\\Assets\" mklink /D \"ARKit-Unity-Plugin\" \"..\\sv\\external\\ARKit-Unity-Plugin\" mklink /D \"AzureSpatialAnchorsPlugin\" \"..\\sv\\external\\Azure-Spatial-Anchors-Samples\\Unity\\Assets\\AzureSpatialAnchorsPlugin\" mklink /D \"GoogleARCore\" \"..\\sv\\external\\ARCore-Unity-SDK\\Assets\\GoogleARCore\" mklink /D \"MixedReality-QRCodePlugin\" \"..\\sv\\external\\MixedReality-QRCodePlugin\" mkdir AzureSpatialAnchors.Resources cd AzureSpatialAnchors.Resources mklink /D \"android-logos\" \"..\\sv\\external\\Azure-Spatial-Anchors-Samples\\Unity\\Assets\\android-logos\" mklink /D \"logos\" \"..\\sv\\external\\Azure-Spatial-Anchors-Samples\\Unity\\Assets\\logos\" Using the master branch Close any instances of Unity. Open an administrator command window. Run tools\\Scripts\\AddDependencies.bat \"Assets\" \"sv\" (These paths are the relative paths to your project Assets folder and your MixedReality-SpectatorView submodule from the root directory of your repository). This script is located within your MixedReality-SpectatorView submodule. Now, when you reopen your project in Unity, folders should appear in your project's Assets folder. Sharing the project After adding the MixedReality-SpectatorView repository as a submodule, you can commit the symbolic linked directories and submodule meta files to your repository to share with your team. If a team member wants to then use this repository they should do the following: Clone the project repository. Run tools\\Scripts\\FixSymbolicLinks.ps1 from the root directory of your project's repository. Run tools\\Scripts\\SetupRepository.ps1 in the MixedReality-SpectatorView submodule. Basic Unity Setup Below are quick instructions for adding Spectator View to your project: Ensure you have all of the [Software & Hardware](doc/SpectatorView.Setup.md##Software & Hardware Requirements) required for building and using Spectator View. Go through the [Getting Started](#Getting Started) steps above to obtain and reference the MixedReality-SpectatorView codebase in your project. Add the MixedReality.SpectatorView/SpectatorView/Prefabs/SpectatorView.prefab to the primary scene that will run on your HoloLens device. This prefab contains the bulk of Spectator View code for synchronizing and aligning holograms across multiple devices. Choose a [Spatial Alignment Strategy](src/SpectatorView.Unity/Assets/SpatialAlignment/README.md### Detailed Breakdown of Spatial Alignment Strategies) that will allow multiple devices to view holograms in the same location in the physical world. There are different mechanisms for achieving alignment, such as Azure Spatial Anchors and marker detector based approaches. Not all approaches work for all devices, so you will need to pick the strategy that best addresses your needs. Add the [dependencies](doc/SpectatorView.Setup.md## Spatial Alignment Strategy Dependencies) required for your Spatial Alignment Strategy to your Unity project. This may involve updating git submodules, adding symbolic linked directories, and manually downloading and extracting zip files. With the end of this step, you will have all of the needed code from external projects included in your Unity project. Update your Unity project and player settings based on the [requirements](doc/SpectatorView.Setup.md### Spatial Alignment Strategy Dependencies) of your Spatial Alignment Strategy. This often involves adding preprocessor directives to different platform player settings to enable code paths specific to your desired Spatial Alignment Strategy. Generate and check-in Asset Caches to your project repository. These Asset Caches act as GameObject registries and will allow different devices running your application to understand what Unity GameObjects are being created, destroyed and updated throughout the application life cycle. To generate these asset caches, run [Spectator View -> Update All Asset Caches](doc/SpectatorView.Setup.md#### Before Building) in the Unity Editor toolbar. Build & Deploy your primary scene to the HoloLens device. Open the example spectating scene appropriate for your mobile device type. This should either be SpectatorView.Android.unity or SpectatorView.iOS.unity . Build & Deploy your spectating scene onto your mobile device. Platform specific build instructions can be found [here for Android](doc/SpectatorView.Setup.md### Android) and [here for iOS](doc/SpectatorView.Setup.md### iOS). Detailed Unity Setup For more information on setting up a Spectator View project, see the following pages: Spectating with an Android or iOS device Spectating with a video camera Architecture For more information on Spectator View's architecture, see here . Debugging For more information on debugging Spectator View, see here Filing feedback The easiest way to file feedback is by opening an issue . When filing feedback, please include the following information (when applicable): Whether you're using a HoloLens or HoloLens 2 device Development PC Windows Version Unity Version Whether you are building with .Net, Mono or il2cpp in Unity Visual Studio Version Windows SDK Version iOS device type/iOS Version Mac OS Version Android device type/Android OS Version Android Studio Version In addition to opening issues, Spectator View contributors are active on Stack Overflow . Use the MRTK tag when asking Spectator View related questions. Contributing This project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit https://cla.microsoft.com . When you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA. This project has adopted the Microsoft Open Source Code of Conduct . For more information see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments."
  },
  "doc/SpectatorView.Architecture.html": {
    "href": "doc/SpectatorView.Architecture.html",
    "title": "Spectator View Architecture | MixedReality-SpectatorView Documentation",
    "keywords": "Spectator View Architecture SpectatorView is a multi-device experience that allows HoloLens applications to be viewed by additional devices at their own viewpoints. It offers functionality for unidirectional content synchronization (State Synchronization) and leverages spatial coordinates for scene alignment (Spatial Alignment). It can be used to enable a variety of different filming scenarios including prototype documentation and keynote demos. Supported scenarios Spectating with an Android or iOS device Spectating with a video camera rig Application Flow 1. Spectating with an Android or iOS device The mobile device begins tracking its location in the world relative to its local application origin using ARCore\\ARKit\\ARFoundation. The mobile device connects directly to a socket open on the HoloLens device. The mobile device and HoloLens device both locate a shared spatial coordinate relative to their local application origins. The mobile device applies a transform to its camera based on the location of this spatial coordinate in the two local application spaces. After applying this transform, the perceived application origin on the mobile device is located in the same physical position as the local application origin on the HoloLens device. The HoloLens begins sending scene information to the mobile device. The mobile device then updates its local application content to reflect what's being observed on the HoloLens device. The screen of the mobile device can then be recorded to film the HoloLens experience. 2. Spectating with a video camera rig A HoloLens is mounted to the video camera. Calibration is then performed to calculate camera intrinsics (Properties such as lens focal length and principal points that are needed for compositing holograms into the video camera feed) and camera extrinsics (The transform of the video camera to the mounted HoloLens). This data is stored on this HoloLens mounted to the video camera. The PC obtains a video camera stream through a capture card. The PC connects to sockets open on both the user HoloLens and video camera rig HoloLens through the unity editor. The PC obtains camera intrinsic and extrinsic information from the DSLR mounted HoloLens and updates its unity camera to reflect these values. The PC instructs both HoloLenses to locate a shared spatial coordinate . The PC listens to pose updates from the DSLR mounted HoloLens. Using the camera extrinsics, pose updates and original shared coordinate location, the PC updates its unity camera to have its local application origin reflect the user HoloLens's application origin. The user HoloLens begins sending scene information to the PC. The PC then updates its local application content to reflect what's being observed on the user's HoloLens device. The PC then composites this application content into the video camera stream. This composited content can then be output via the capture card. The composited content can then be recorded to images on the PC that can later be combined into a video. Spatial alignment For more information on spatial alignment, see here . State synchronization For more information on state synchronization, see here . Screen Recording For more information on compositing and recording, see here . Video Camera Recording For more information on recording with a video camera, see here . Customizing UI For more information on creating and customizing UI, see here ."
  },
  "api/Microsoft.MixedReality.SpectatorView.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.html",
    "title": "Namespace Microsoft.MixedReality.SpectatorView | MixedReality-SpectatorView Documentation",
    "keywords": "Namespace Microsoft.MixedReality.SpectatorView Classes AndroidRecordingService Class implementing IRecordingService for the Android platform ArUcoMarkerDetector Class implementing IMarkerDetector capable of detecting ArUco markers ArUcoMarkerDetectorSpatialLocalizer ArUcoMarkerVisual Controls displaying an ArUco marker on a Unity RawImage ArUcoMarkerVisualDetectorSpatialLocalizer ArUcoMarkerVisualSpatialLocalizer BroadcasterSettings Settings used by a StateSynchronizationBroadcaster CalculatedCameraCalibration A class containing camera intrinsic and extrinsic information produced through calibration. CalculatedCameraExtrinsics CalculatedCameraIntrinsics CalibrationData Used for loading/applying camera intrinsics and camera extrinsics obtained through Spectator View's default calibration process. CalibrationDataProvider Loads calibration data from the Pictures library on the device and transfers that data to the compositor upon connection. CameraPoseProvider Component that provides time-adjusted holographic poses to the compositor. CommandRegistry<TService> ComponentBroadcaster<TComponentBroadcasterService, TChangeFlags> Abstract class for sending component updates from the user device. ComponentBroadcasterDefinition Component which defines when and how to attach a ComponentBroadcaster to a GameObject. ComponentBroadcasters can be created unconditionally or due to certain requirements being present on the provided GameObject. ComponentBroadcasterDefinition<TComponentBroadcaster> Attaches a ComponentBroadcaster of type TComponentBroadcaster to a GameObject if and only if a required set of Component types are present on the GameObject. ComponentBroadcasterService<ServiceType, ObserverType> Abstract class for services that manage IComponentBroadcaster ComponentObserver Abstract class for updating components on the spectator device. ComponentObserver<TComponent> Abstract class for updating components on the spectator device. CompositionManager Manages compositing real-world video and holograms together and creating an output video texture with recorded audio. CompositorWorldAnchorLocalizationManager Component responsible for requesting localization of shared coordinates on devices connected to the compositor. Shared coordinates are persisted using the WorldAnchorSpatialLocalizer after they are resolved, and are restored upon initial connection. DebugVisualHelper Helper class for creating and placing multiple prefabs at different locations in the scene DeviceInfoBroadcaster DeviceInfoObserver DynamicGameObjectHierarchyBroadcaster<TComponentService> A ComponentBroadcaster that allows instantiating a custom child hierarchy for the remote DynamicGameObjectHierarchyObserver. The corresponding DynamicGameObjectHierarchyObserver is responsible for creating an initially-identical child hierarchy. Once both devices have created the same initial hierarchy, the hierarchies are bound together and state synchronization is initialized for all of the GameObjects within that hierarchy. DynamicGameObjectHierarchyBroadcaster<TComponentService>.ChangeType DynamicGameObjectHierarchyObserver<TComponentService> A ComponentObserver that allows instantiating a custom child hierarchy for the remote DynamicGameObjectHierarchyBroadcaster. The corresponding DynamicGameObjectHierarchyBroadcaster is responsible for creating an initially-identical child hierarchy. Once both devices have created the same initial hierarchy, the hierarchies are bound together and state synchronization is initialized for all of the GameObjects within that hierarchy. DynamicGameObjectHierarchyObserver<TComponentService>.TransformObserverInfo EditorExtrinsicsCalibration EditorIntrinsicsCalibration FieldHelper Helper class for validating that an object implements or extends a specific type. GameObjectHierarchyBroadcaster Indicates to the StateSynchronizationBroadcaster that the GameObject this is attached to and all of its descendants should be broadcast to connected StateSynchronizationObservers. HeadsetCalibration HeadsetCalibrationData Data that the HoloLens device sends to the editor during calibration. HeadsetCalibrationDataRequest Data that the editor sends to a HoloLens device during calibration HeadsetRequestHandler HolographicCameraBroadcaster Represents the network listener for the camera pose provider app. HolographicCameraObserver Component that connects to the HoloLens application on the holographic camera rig for synchronizing camera poses and receiving calibration data. HoloLensCanvasHelper Helper class for placing a Unity canvas relative to a HoloLens user IncomingMessage Helper class that wraps an incoming message iOSRecordingService Class implementing IRecordingService for the iOS platform Marker Helper class containing data related to detected markers MarkerDetectorCoordinateService A marker detection based implementation of ISpatialCoordinateService . MarkerDetectorLocalizationSettings MarkerDetectorSpatialLocalizer SpatialLocalizer that is based on a marker detector. MarkerVisualCanvasScaleFactorScraper Helper class for obtaining additional scaling information to apply to ArUco Marker Images MarkerVisualCoordinateService A variant of marker based ISpatialCoordinateService implementation. This one tracks coordinates displayed on the screen of current mobile device. The logic is that every time you start tracking a new coordinate is created and shown on the screen, after you stop tracking that coordinates location is no longer updated with the device. MarkerVisualDetectorLocalizationSettings MarkerVisualDetectorSpatialLocalizer MarkerVisualLocalizationInitializer MarkerVisualLocalizationSettings MarkerVisualSpatialLocalizer SpatialLocalizer that shows a marker MessageEvent MicrophoneInput Captures microphone input and plays that input back through an AudioSource. MobileNetworkConfigurationVisual MobileOverlayVisual Helper class responsible for facilitating visibility changes in mobile UI MobileOverlayVisualChild Base class that provides showing/hiding functionality for IMobileOverlayVisualChild MobileRecordingSettings MobileUIScaler Helper class that scales mobile UI to show at same physical size across devices NetworkConfigurationSettings NetworkExtensions Extension methods for writing structured CLR and Unity objects to BinaryWriter and reading those values from BinaryReader. NetworkManager<TService> PlatformSpecificGameObject Helper class for enabling/disabling platform specific GameObjects PlatformSwitcher MonoBehaviour associated with PlatformSwitcherEditor QRCodeMarkerDetector QR code detector that implements IMarkerDetector QRCodeMarkerDetectorSpatialLocalizer QRCodeMarkerVisual QRCodeMarkerVisualDetectorSpatialLocalizer QRCodeMarkerVisualSpatialLocalizer RecordingServiceVisual Singleton<T> MonoBehaviour base class used to ensure only one instance of the class exists in the application/scene. SocketEndpoint SocketEndpointConnectionDelta Wrapper class for announcing the current state of network connections Socketer Sends and receives packets over the network, using the chosen protocol. SocketerClient Simple socket client which uses a generic length-type-data protocol. Chunk format(everything in little-endian order) : uint32_t data_length; uint8_t data[data_length]; NOTE! The code assumes you are running on a little-endian system. SpatialAnchorsConfiguration Azure Spatial Anchors configuration. SpatialAnchorsCoordinateLocalizationInitializer SpatialAnchorsLocalizer This is the localization mechanism for enabling anchor exchange/localization through Azure Spatial Anchors. SpatialCoordinateSystemManager SpatialCoordinateSystemParticipant The SpectatorView helper class for managing a participant in the spatial coordinate system SpatialCoordinateTransformer Positions a transform representing a world origin such that a connected peer device's world origin (relative to a shared spatial coordinate) is used as the effective local world origin (as determined by the shared spatial coordinate). SpatialLocalizationInitializationSettings SpatialLocalizationInitializer SpatialLocalizer<TSpatialLocalizationSettings> Helper class to enable spatial localization between two entities on SpectatorView. SpectatorView Class that facilitates the Spectator View experience SpectatorViewOpenCVInterface Wrapper class for SpectatorView.OpenCV.dll built from the SpectatorView.Native.sln SpectatorViewPoseCache Caches poses with timestamps from a HoloLens and allows computing a synthesized pose from any timestamp. SpectatorViewPoseCache.PoseData SpectatorViewTimeSynchronizer Synchronizes time adjustments between the compositor and the HoloLens. StateSynchronizationBroadcaster This class observes changes and updates content on a user device. StateSynchronizationObserver This class observes changes and updates content on a spectator device. StateSynchronizationSceneManager Service that registers ComponentBroadcasterDefinitions used to create ComponentBroadcasters for components and to manage both broadcasting and observing components. TCPConnectionManager Helper class for setting up a TCP based network connection TCPConnectionManagerTest Helper class for testing socketer TCPConnectionManager TextureManager Manages the textures used for compositing holograms with video, and controls the actual composition of textures together. TransformBroadcaster A IComponentBroadcaster specifically for transforms. TransformBroadcasterService Service that manages TransformBroadcaster s TransformObserver WorldAnchorCoordinateService Represents an ISpatialCoordinateService that creates and stores coordinates based on WorldAnchors stored in a WorldAnchorStore on the device. WorldAnchorSpatialLocalizationSettings Settings for localizing using the WorldAnchorSpatialLocalizer WorldAnchorSpatialLocalizer An ISpatialLocalizer that can locate spatial coordinates based on WorldAnchors stored in the device's WorldAnchorStore. Structs AudioSourceProperties HeadsetData Struct that contains the world position and orientation of a HoloLens device. MarkerCorners Struct that contains world positions and orientations for marker corners. MarkerPair Struct that contains locations and orientations for QR Code and ArUco markers that have the same id. ShortID Short id used for state synchronization that can be created from a three letter string Interfaces IAssetCache Used to persist asset information ICalibrationData Provides an abstraction over setting up a holographic camera from a stereo-calibrated camera rig. ICommandRegistry IComponentBroadcaster Abstract class for sending component updates from the user device. IComponentBroadcasterService Manages component synchronization across different devices IComponentObserver Component that syncs local content based on changes to an IComponentBroadcaster IEditableSpatialLocalizationSettings IMarkerDetector Interface that should be implemented by any class that detects markers IMarkerVisual Interface that should be implemented by any class that displays markers for detection IMobileOverlayVisualChild Interface implemented by classes that show/hide based on spectator view UI visibility changes INetworkConfigurationVisual INetworkManager IPeerConnection IRecordingService An interface implemented by classes that perform screen recording IRecordingServiceVisual ISpatialLocalizationSession ISpatialLocalizationSettings ISpatialLocalizer Enums ComponentBroadcasterChangeType Types of state changes that may occur for an IComponentBroadcaster CompositionManager.AntiAliasingSamples CompositionManager.Depth FrameProviderDeviceType MarkerPositionBehavior Describes how a marker is expected to be moving while it's detected. RecordingServiceVisual.RecordingState Screen recording states Role SocketerClient.Protocol Underlying protocol to use. Each has advantages and disadvantages. SocketerClient.ProtocolDirection TransformBroadcasterChangeType Types of changes that occur for a TransformBroadcaster VideoRecordingFrameLayout WorldAnchorLocalizationMode Specifies how to create a shared coordinate based on a WorldAnchor. Delegates CommandHandler ConnectedEventHandler DisconnectedEventHandler HeadsetCalibrationDataUpdatedHandler Called when HeadsetCalibration has a new qr code/aruco marker payload MarkersUpdatedHandler Delegate called when markers have been detected by an IMarkerDetector OverlayVisibilityRequest Delegate called to toggle visibility for IMobileOverlayVisualChild ren."
  },
  "api/Microsoft.MixedReality.SpectatorView.WorldAnchorSpatialLocalizer.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.WorldAnchorSpatialLocalizer.html",
    "title": "Class WorldAnchorSpatialLocalizer | MixedReality-SpectatorView Documentation",
    "keywords": "Class WorldAnchorSpatialLocalizer An ISpatialLocalizer that can locate spatial coordinates based on WorldAnchors stored in the device's WorldAnchorStore. Inheritance Object SpatialLocalizer < WorldAnchorSpatialLocalizationSettings > WorldAnchorSpatialLocalizer Implements ISpatialLocalizer Inherited Members SpatialLocalizer<WorldAnchorSpatialLocalizationSettings>.lockObject SpatialLocalizer<WorldAnchorSpatialLocalizationSettings>.debugLogging SpatialLocalizer<WorldAnchorSpatialLocalizationSettings>.DebugLog(String) SpatialLocalizer<WorldAnchorSpatialLocalizationSettings>.OnDestroy() SpatialLocalizer<WorldAnchorSpatialLocalizationSettings>.CreateDefaultSettings() SpatialLocalizer<WorldAnchorSpatialLocalizationSettings>.ISpatialLocalizer.TryDeserializeSettings(BinaryReader, ISpatialLocalizationSettings) SpatialLocalizer<WorldAnchorSpatialLocalizationSettings>.ISpatialLocalizer.TryCreateLocalizationSession(IPeerConnection, ISpatialLocalizationSettings, ISpatialLocalizationSession) Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public class WorldAnchorSpatialLocalizer : SpatialLocalizer<WorldAnchorSpatialLocalizationSettings>, ISpatialLocalizer Fields Id Declaration public static readonly Guid Id Field Value Type Description Guid Properties DisplayName Declaration public override string DisplayName { get; } Property Value Type Description String Overrides Microsoft.MixedReality.SpectatorView.SpatialLocalizer<Microsoft.MixedReality.SpectatorView.WorldAnchorSpatialLocalizationSettings>.DisplayName IsSupported Declaration protected override bool IsSupported { get; } Property Value Type Description Boolean Overrides Microsoft.MixedReality.SpectatorView.SpatialLocalizer<Microsoft.MixedReality.SpectatorView.WorldAnchorSpatialLocalizationSettings>.IsSupported SpatialLocalizerId Declaration public override Guid SpatialLocalizerId { get; } Property Value Type Description Guid Overrides Microsoft.MixedReality.SpectatorView.SpatialLocalizer<Microsoft.MixedReality.SpectatorView.WorldAnchorSpatialLocalizationSettings>.SpatialLocalizerId Methods Start() Declaration protected override void Start() Overrides Microsoft.MixedReality.SpectatorView.SpatialLocalizer<Microsoft.MixedReality.SpectatorView.WorldAnchorSpatialLocalizationSettings>.Start() TryCreateLocalizationSession(IPeerConnection, WorldAnchorSpatialLocalizationSettings, out ISpatialLocalizationSession) Declaration public override bool TryCreateLocalizationSession(IPeerConnection peerConnection, WorldAnchorSpatialLocalizationSettings settings, out ISpatialLocalizationSession session) Parameters Type Name Description IPeerConnection peerConnection WorldAnchorSpatialLocalizationSettings settings ISpatialLocalizationSession session Returns Type Description Boolean Overrides Microsoft.MixedReality.SpectatorView.SpatialLocalizer<Microsoft.MixedReality.SpectatorView.WorldAnchorSpatialLocalizationSettings>.TryCreateLocalizationSession(Microsoft.MixedReality.SpectatorView.IPeerConnection, Microsoft.MixedReality.SpectatorView.WorldAnchorSpatialLocalizationSettings, Microsoft.MixedReality.SpectatorView.ISpatialLocalizationSession) TryDeserializeSettings(BinaryReader, out WorldAnchorSpatialLocalizationSettings) Declaration public override bool TryDeserializeSettings(BinaryReader reader, out WorldAnchorSpatialLocalizationSettings settings) Parameters Type Name Description BinaryReader reader WorldAnchorSpatialLocalizationSettings settings Returns Type Description Boolean Overrides Microsoft.MixedReality.SpectatorView.SpatialLocalizer<Microsoft.MixedReality.SpectatorView.WorldAnchorSpatialLocalizationSettings>.TryDeserializeSettings(BinaryReader, Microsoft.MixedReality.SpectatorView.WorldAnchorSpatialLocalizationSettings) Implements ISpatialLocalizer"
  },
  "api/Microsoft.MixedReality.SpectatorView.WorldAnchorSpatialLocalizationSettings.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.WorldAnchorSpatialLocalizationSettings.html",
    "title": "Class WorldAnchorSpatialLocalizationSettings | MixedReality-SpectatorView Documentation",
    "keywords": "Class WorldAnchorSpatialLocalizationSettings Settings for localizing using the WorldAnchorSpatialLocalizer Inheritance Object WorldAnchorSpatialLocalizationSettings Implements ISpatialLocalizationSettings Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public class WorldAnchorSpatialLocalizationSettings : ISpatialLocalizationSettings Properties AnchorId Specifies the ID of the anchor, used to persist and restore the anchor across sessions. Declaration public string AnchorId { get; set; } Property Value Type Description String AnchorPosition When using the CreateAnchorAtWorldTransform mode, specifies the world position at which the WorldAnchor should be created. Declaration public Vector3 AnchorPosition { get; set; } Property Value Type Description Vector3 AnchorRotation When using the CreateAnchorAtWorldTransform mode, specifies the world rotation at which the WorldAnchor should be created. Declaration public Quaternion AnchorRotation { get; set; } Property Value Type Description Quaternion Mode The mode used to create a spatial coordinate. Declaration public WorldAnchorLocalizationMode Mode { get; set; } Property Value Type Description WorldAnchorLocalizationMode Methods Serialize(BinaryWriter) Declaration public void Serialize(BinaryWriter writer) Parameters Type Name Description BinaryWriter writer TryDeserialize(BinaryReader, out WorldAnchorSpatialLocalizationSettings) Tries to deserialize settings from a stream. Declaration public static bool TryDeserialize(BinaryReader reader, out WorldAnchorSpatialLocalizationSettings settings) Parameters Type Name Description BinaryReader reader The reader to deserialize settings from. WorldAnchorSpatialLocalizationSettings settings The deserialized settings. Returns Type Description Boolean True if the settings were successfully deserialized, otherwise false. Implements ISpatialLocalizationSettings"
  },
  "api/Microsoft.MixedReality.SpectatorView.WorldAnchorLocalizationMode.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.WorldAnchorLocalizationMode.html",
    "title": "Enum WorldAnchorLocalizationMode | MixedReality-SpectatorView Documentation",
    "keywords": "Enum WorldAnchorLocalizationMode Specifies how to create a shared coordinate based on a WorldAnchor. Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public enum WorldAnchorLocalizationMode Fields Name Description CreateAnchorAtWorldTransform Specifies a request to create a new spatial coordinate at a specific position and rotation and to store that spatial coordinate using a WorldAnchor stored in the device's WorldAnchorStore. LocateExistingAnchor Specifies a request to create a spatial coordinate from a WorldAnchor stored in the device's WorldAnchorStore."
  },
  "api/Microsoft.MixedReality.SpectatorView.WorldAnchorCoordinateService.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.WorldAnchorCoordinateService.html",
    "title": "Class WorldAnchorCoordinateService | MixedReality-SpectatorView Documentation",
    "keywords": "Class WorldAnchorCoordinateService Represents an ISpatialCoordinateService that creates and stores coordinates based on WorldAnchors stored in a WorldAnchorStore on the device. Inheritance Object WorldAnchorCoordinateService Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public class WorldAnchorCoordinateService : SpatialCoordinateServiceUnityBase<string> Properties SupportsDiscovery Declaration protected override bool SupportsDiscovery { get; } Property Value Type Description Boolean Methods CreateCoordinateAsync(String, Vector3, Quaternion, CancellationToken) Declaration public Task<ISpatialCoordinate> CreateCoordinateAsync(string id, Vector3 worldPosition, Quaternion worldRotation, CancellationToken cancellationToken) Parameters Type Name Description String id Vector3 worldPosition Quaternion worldRotation CancellationToken cancellationToken Returns Type Description Task < ISpatialCoordinate > GetSharedCoordinateServiceAsync() Declaration public static Task<WorldAnchorCoordinateService> GetSharedCoordinateServiceAsync() Returns Type Description Task < WorldAnchorCoordinateService > InitializeKnownCoordinatesAsync() Declaration public Task InitializeKnownCoordinatesAsync() Returns Type Description Task OnDiscoverCoordinatesAsync(CancellationToken, String[]) Declaration protected override Task OnDiscoverCoordinatesAsync(CancellationToken cancellationToken, string[] idsToLocate = null) Parameters Type Name Description CancellationToken cancellationToken String [] idsToLocate Returns Type Description Task TryDeleteCoordinateAsync(String, CancellationToken) Declaration public override Task<bool> TryDeleteCoordinateAsync(string key, CancellationToken cancellationToken) Parameters Type Name Description String key CancellationToken cancellationToken Returns Type Description Task < Boolean > TryParse(String, out String) Declaration protected override bool TryParse(string id, out string result) Parameters Type Name Description String id String result Returns Type Description Boolean"
  },
  "api/Microsoft.MixedReality.SpectatorView.StateSynchronizationSceneManager.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.StateSynchronizationSceneManager.html",
    "title": "Class StateSynchronizationSceneManager | MixedReality-SpectatorView Documentation",
    "keywords": "Class StateSynchronizationSceneManager Service that registers ComponentBroadcasterDefinitions used to create ComponentBroadcasters for components and to manage both broadcasting and observing components. Inheritance Object Singleton < StateSynchronizationSceneManager > StateSynchronizationSceneManager Inherited Members Singleton<StateSynchronizationSceneManager>.IsInitialized Singleton<StateSynchronizationSceneManager>.OnDestroy() Singleton<StateSynchronizationSceneManager>.Instance Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public class StateSynchronizationSceneManager : Singleton<StateSynchronizationSceneManager> Fields CustomBroadcasterServicesPrefabName Declaration public const string CustomBroadcasterServicesPrefabName = \"CustomBroadcasterServices\" Field Value Type Description String DefaultStateSynchronizationPerformanceParametersPrefabName Declaration public const string DefaultStateSynchronizationPerformanceParametersPrefabName = \"DefaultStateSynchronizationPerformanceParameters\" Field Value Type Description String Methods Awake() Declaration protected override void Awake() Overrides Microsoft.MixedReality.SpectatorView.Singleton<Microsoft.MixedReality.SpectatorView.StateSynchronizationSceneManager>.Awake() RegisterService(IComponentBroadcasterService, ComponentBroadcasterDefinition) Registers an IComponentBroadcasterService along with a ComponentBroadcasterDefinition. This service and definition control how a particular type of Component is both broadcast and observed. Declaration public void RegisterService(IComponentBroadcasterService service, ComponentBroadcasterDefinition componentDefinition) Parameters Type Name Description IComponentBroadcasterService service The service which controls broadcasting and observing component changes. ComponentBroadcasterDefinition componentDefinition The definition controlling when a component should be broadcast. Send(IEnumerable<SocketEndpoint>, Byte[]) Sends a message to a collection of SocketEndpoints. Declaration public void Send(IEnumerable<SocketEndpoint> endpoints, byte[] message) Parameters Type Name Description IEnumerable < SocketEndpoint > endpoints The endpoints to send the message to. Byte [] message The message to send. WriteSynchronizeCommandHeader(BinaryWriter) Writes the header for a ComponentBroadcaster's synchronize command, used to send a component's state change from the broadcaster to the observer. Declaration public void WriteSynchronizeCommandHeader(BinaryWriter message) Parameters Type Name Description BinaryWriter message The message in which to write the header."
  },
  "api/Microsoft.MixedReality.SpectatorView.StateSynchronizationObserver.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.StateSynchronizationObserver.html",
    "title": "Class StateSynchronizationObserver | MixedReality-SpectatorView Documentation",
    "keywords": "Class StateSynchronizationObserver This class observes changes and updates content on a spectator device. Inheritance Object Singleton < StateSynchronizationObserver > CommandRegistry < StateSynchronizationObserver > NetworkManager < StateSynchronizationObserver > StateSynchronizationObserver Implements INetworkManager ICommandRegistry Inherited Members NetworkManager<StateSynchronizationObserver>.connectionManager NetworkManager<StateSynchronizationObserver>.ConnectedIPAddress NetworkManager<StateSynchronizationObserver>.IsConnected NetworkManager<StateSynchronizationObserver>.IsConnecting NetworkManager<StateSynchronizationObserver>.TimeSinceLastUpdate NetworkManager<StateSynchronizationObserver>.StartListening(Int32) NetworkManager<StateSynchronizationObserver>.ConnectTo(String) NetworkManager<StateSynchronizationObserver>.ConnectTo(String, Int32) NetworkManager<StateSynchronizationObserver>.Broadcast(Byte[]) NetworkManager<StateSynchronizationObserver>.Disconnect() NetworkManager<StateSynchronizationObserver>.Start() NetworkManager<StateSynchronizationObserver>.OnDestroy() NetworkManager<StateSynchronizationObserver>.OnDisconnected(SocketEndpoint) NetworkManager<StateSynchronizationObserver>.OnReceive(IncomingMessage) CommandRegistry<StateSynchronizationObserver>.Connected CommandRegistry<StateSynchronizationObserver>.Disconnected CommandRegistry<StateSynchronizationObserver>.NotifyConnected(SocketEndpoint) CommandRegistry<StateSynchronizationObserver>.NotifyDisconnected(SocketEndpoint) CommandRegistry<StateSynchronizationObserver>.NotifyCommand(SocketEndpoint, String, BinaryReader, Int32) CommandRegistry<StateSynchronizationObserver>.RegisterCommandHandler(String, CommandHandler) CommandRegistry<StateSynchronizationObserver>.UnregisterCommandHandler(String, CommandHandler) Singleton<StateSynchronizationObserver>.IsInitialized Singleton<StateSynchronizationObserver>.Instance Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public class StateSynchronizationObserver : NetworkManager<StateSynchronizationObserver>, INetworkManager, ICommandRegistry Fields CameraCommand Declaration public const string CameraCommand = \"Camera\" Field Value Type Description String debugLogging Check to enable debug logging. Declaration protected bool debugLogging Field Value Type Description Boolean PerfCommand Declaration public const string PerfCommand = \"Perf\" Field Value Type Description String port Port used for sending data. Declaration protected int port Field Value Type Description Int32 SyncCommand Declaration public const string SyncCommand = \"SYNC\" Field Value Type Description String Properties RemotePort Declaration protected override int RemotePort { get; } Property Value Type Description Int32 Overrides Microsoft.MixedReality.SpectatorView.NetworkManager<Microsoft.MixedReality.SpectatorView.StateSynchronizationObserver>.RemotePort Methods Awake() Declaration protected override void Awake() Overrides Microsoft.MixedReality.SpectatorView.NetworkManager<Microsoft.MixedReality.SpectatorView.StateSynchronizationObserver>.Awake() HandleCameraCommand(SocketEndpoint, String, BinaryReader, Int32) Declaration public void HandleCameraCommand(SocketEndpoint endpoint, string command, BinaryReader reader, int remainingDataSize) Parameters Type Name Description SocketEndpoint endpoint String command BinaryReader reader Int32 remainingDataSize HandlePerfCommand(SocketEndpoint, String, BinaryReader, Int32) Declaration public void HandlePerfCommand(SocketEndpoint endpoint, string command, BinaryReader reader, int remainingDataSize) Parameters Type Name Description SocketEndpoint endpoint String command BinaryReader reader Int32 remainingDataSize HandleSyncCommand(SocketEndpoint, String, BinaryReader, Int32) Declaration public void HandleSyncCommand(SocketEndpoint endpoint, string command, BinaryReader reader, int remainingDataSize) Parameters Type Name Description SocketEndpoint endpoint String command BinaryReader reader Int32 remainingDataSize OnConnected(SocketEndpoint) Declaration protected override void OnConnected(SocketEndpoint endpoint) Parameters Type Name Description SocketEndpoint endpoint Overrides Microsoft.MixedReality.SpectatorView.NetworkManager<Microsoft.MixedReality.SpectatorView.StateSynchronizationObserver>.OnConnected(Microsoft.MixedReality.SpectatorView.SocketEndpoint) Update() Declaration protected void Update() Implements INetworkManager ICommandRegistry"
  },
  "api/Microsoft.MixedReality.SpectatorView.StateSynchronizationBroadcaster.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.StateSynchronizationBroadcaster.html",
    "title": "Class StateSynchronizationBroadcaster | MixedReality-SpectatorView Documentation",
    "keywords": "Class StateSynchronizationBroadcaster This class observes changes and updates content on a user device. Inheritance Object Singleton < StateSynchronizationBroadcaster > CommandRegistry < StateSynchronizationBroadcaster > NetworkManager < StateSynchronizationBroadcaster > StateSynchronizationBroadcaster Implements INetworkManager ICommandRegistry Inherited Members NetworkManager<StateSynchronizationBroadcaster>.connectionManager NetworkManager<StateSynchronizationBroadcaster>.ConnectedIPAddress NetworkManager<StateSynchronizationBroadcaster>.IsConnected NetworkManager<StateSynchronizationBroadcaster>.IsConnecting NetworkManager<StateSynchronizationBroadcaster>.TimeSinceLastUpdate NetworkManager<StateSynchronizationBroadcaster>.StartListening(Int32) NetworkManager<StateSynchronizationBroadcaster>.ConnectTo(String) NetworkManager<StateSynchronizationBroadcaster>.ConnectTo(String, Int32) NetworkManager<StateSynchronizationBroadcaster>.Broadcast(Byte[]) NetworkManager<StateSynchronizationBroadcaster>.Disconnect() NetworkManager<StateSynchronizationBroadcaster>.OnReceive(IncomingMessage) CommandRegistry<StateSynchronizationBroadcaster>.Connected CommandRegistry<StateSynchronizationBroadcaster>.Disconnected CommandRegistry<StateSynchronizationBroadcaster>.NotifyConnected(SocketEndpoint) CommandRegistry<StateSynchronizationBroadcaster>.NotifyDisconnected(SocketEndpoint) CommandRegistry<StateSynchronizationBroadcaster>.NotifyCommand(SocketEndpoint, String, BinaryReader, Int32) CommandRegistry<StateSynchronizationBroadcaster>.RegisterCommandHandler(String, CommandHandler) CommandRegistry<StateSynchronizationBroadcaster>.UnregisterCommandHandler(String, CommandHandler) Singleton<StateSynchronizationBroadcaster>.IsInitialized Singleton<StateSynchronizationBroadcaster>.Instance Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public class StateSynchronizationBroadcaster : NetworkManager<StateSynchronizationBroadcaster>, INetworkManager, ICommandRegistry Fields debugLogging Check to enable debug logging. Declaration protected bool debugLogging Field Value Type Description Boolean Port Port used for sending data. Declaration public int Port Field Value Type Description Int32 Properties HasConnections True if network connections exist, otherwise false Declaration public bool HasConnections { get; } Property Value Type Description Boolean OutputBytesQueued Returns how many bytes have been queued to send to other devices Declaration public int OutputBytesQueued { get; } Property Value Type Description Int32 RemotePort Declaration protected override int RemotePort { get; } Property Value Type Description Int32 Overrides Microsoft.MixedReality.SpectatorView.NetworkManager<Microsoft.MixedReality.SpectatorView.StateSynchronizationBroadcaster>.RemotePort Methods Awake() Declaration protected override void Awake() Overrides Microsoft.MixedReality.SpectatorView.NetworkManager<Microsoft.MixedReality.SpectatorView.StateSynchronizationBroadcaster>.Awake() HandleSyncCommand(SocketEndpoint, String, BinaryReader, Int32) Declaration public void HandleSyncCommand(SocketEndpoint endpoint, string command, BinaryReader reader, int remainingDataSize) Parameters Type Name Description SocketEndpoint endpoint String command BinaryReader reader Int32 remainingDataSize OnConnected(SocketEndpoint) Declaration protected override void OnConnected(SocketEndpoint endpoint) Parameters Type Name Description SocketEndpoint endpoint Overrides Microsoft.MixedReality.SpectatorView.NetworkManager<Microsoft.MixedReality.SpectatorView.StateSynchronizationBroadcaster>.OnConnected(Microsoft.MixedReality.SpectatorView.SocketEndpoint) OnDestroy() Declaration protected override void OnDestroy() Overrides Microsoft.MixedReality.SpectatorView.NetworkManager<Microsoft.MixedReality.SpectatorView.StateSynchronizationBroadcaster>.OnDestroy() OnDisconnected(SocketEndpoint) Declaration protected override void OnDisconnected(SocketEndpoint endpoint) Parameters Type Name Description SocketEndpoint endpoint Overrides Microsoft.MixedReality.SpectatorView.NetworkManager<Microsoft.MixedReality.SpectatorView.StateSynchronizationBroadcaster>.OnDisconnected(Microsoft.MixedReality.SpectatorView.SocketEndpoint) OnFrameCompleted() Called after a frame is completed to send state data to socket end points. Declaration public void OnFrameCompleted() SetupNetworkConnectionManager() Declaration protected virtual void SetupNetworkConnectionManager() Start() Declaration protected override void Start() Overrides Microsoft.MixedReality.SpectatorView.NetworkManager<Microsoft.MixedReality.SpectatorView.StateSynchronizationBroadcaster>.Start() UpdateExtension() Extension method called on update Declaration protected virtual void UpdateExtension() Implements INetworkManager ICommandRegistry"
  },
  "api/Microsoft.MixedReality.SpectatorView.SpectatorViewTimeSynchronizer.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.SpectatorViewTimeSynchronizer.html",
    "title": "Class SpectatorViewTimeSynchronizer | MixedReality-SpectatorView Documentation",
    "keywords": "Class SpectatorViewTimeSynchronizer Synchronizes time adjustments between the compositor and the HoloLens. Inheritance Object SpectatorViewTimeSynchronizer Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public class SpectatorViewTimeSynchronizer Methods GetPoseTimeFromCameraTime(Single) Gets the timestamp of a HoloLens pose from a video camera time. Declaration public float GetPoseTimeFromCameraTime(float cameraTime) Parameters Type Name Description Single cameraTime The timestamp in the video camera timeline. Returns Type Description Single The timestamp of the HoloLens pose associated with the video, in the HoloLens timeline. GetUnityTimeFromCameraTime(Single) Gets the timestamp of a HoloLens pose from a video camera time. Declaration public float GetUnityTimeFromCameraTime(float cameraTime) Parameters Type Name Description Single cameraTime The timestamp in the video camera timeline. Returns Type Description Single The timestamp of the video frame in Unity's timeline. Reset() Resets the time synchronization for a new synchronization session. Declaration public void Reset() Update(Int32, Single, Int32, Single) Records a sample to update the time synchronizer. Declaration public void Update(int cameraFrame, float cameraTime, int poseIndex, float poseTime) Parameters Type Name Description Int32 cameraFrame The index of the current video frame. Single cameraTime The timestamp of the current video frame. Int32 poseIndex The index of the current HoloLens pose. Single poseTime The timestamp of the current HoloLens pose."
  },
  "api/Microsoft.MixedReality.SpectatorView.NetworkManager-1.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.NetworkManager-1.html",
    "title": "Class NetworkManager<TService> | MixedReality-SpectatorView Documentation",
    "keywords": "Class NetworkManager<TService> Inheritance Object Singleton <TService> CommandRegistry <TService> NetworkManager<TService> HolographicCameraBroadcaster HolographicCameraObserver StateSynchronizationBroadcaster StateSynchronizationObserver Implements INetworkManager ICommandRegistry Inherited Members CommandRegistry<TService>.Connected CommandRegistry<TService>.Disconnected CommandRegistry<TService>.NotifyConnected(SocketEndpoint) CommandRegistry<TService>.NotifyDisconnected(SocketEndpoint) CommandRegistry<TService>.NotifyCommand(SocketEndpoint, String, BinaryReader, Int32) CommandRegistry<TService>.RegisterCommandHandler(String, CommandHandler) CommandRegistry<TService>.UnregisterCommandHandler(String, CommandHandler) Singleton<TService>.IsInitialized Singleton<TService>.Instance Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public abstract class NetworkManager<TService> : CommandRegistry<TService>, INetworkManager, ICommandRegistry where TService : Singleton<TService> Type Parameters Name Description TService Fields connectionManager Declaration protected TCPConnectionManager connectionManager Field Value Type Description TCPConnectionManager Properties ConnectedIPAddress Gets the local IP address reported by the socket used to connect to the device. Declaration public string ConnectedIPAddress { get; } Property Value Type Description String IsConnected Gets whether or not a network connection to the device is established. Declaration public bool IsConnected { get; } Property Value Type Description Boolean IsConnecting Gets whether or not a network connection to the device is pending. Declaration public bool IsConnecting { get; } Property Value Type Description Boolean RemotePort Gets the port used to connect to the remote device. Declaration protected abstract int RemotePort { get; } Property Value Type Description Int32 TimeSinceLastUpdate Gets the time since this network manager last received an update. Declaration public TimeSpan TimeSinceLastUpdate { get; } Property Value Type Description TimeSpan Methods Awake() Declaration protected override void Awake() Overrides Microsoft.MixedReality.SpectatorView.Singleton<TService>.Awake() Broadcast(Byte[]) Sends data to other connected devices Declaration public void Broadcast(byte[] data) Parameters Type Name Description Byte [] data payload to send to other devices ConnectTo(String) Connect to a remote device on the default port for this network manager. Declaration public void ConnectTo(string remoteAddress) Parameters Type Name Description String remoteAddress ConnectTo(String, Int32) Connect to a remote device using the specified port. Declaration public void ConnectTo(string ipAddress, int port) Parameters Type Name Description String ipAddress Int32 port The port to use for communication. Disconnect() Disconnects the network connection to the holographic camera rig. Declaration public void Disconnect() OnConnected(SocketEndpoint) Declaration protected virtual void OnConnected(SocketEndpoint endpoint) Parameters Type Name Description SocketEndpoint endpoint OnDestroy() Declaration protected override void OnDestroy() Overrides Microsoft.MixedReality.SpectatorView.Singleton<TService>.OnDestroy() OnDisconnected(SocketEndpoint) Declaration protected virtual void OnDisconnected(SocketEndpoint endpoint) Parameters Type Name Description SocketEndpoint endpoint OnReceive(IncomingMessage) Declaration protected void OnReceive(IncomingMessage data) Parameters Type Name Description IncomingMessage data Start() Declaration protected virtual void Start() StartListening(Int32) Starts a listening socket on the given port. Declaration public void StartListening(int port) Parameters Type Name Description Int32 port The port to listen for new connections on. Implements INetworkManager ICommandRegistry"
  },
  "api/Microsoft.MixedReality.SpectatorView.NetworkExtensions.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.NetworkExtensions.html",
    "title": "Class NetworkExtensions | MixedReality-SpectatorView Documentation",
    "keywords": "Class NetworkExtensions Extension methods for writing structured CLR and Unity objects to BinaryWriter and reading those values from BinaryReader. Inheritance Object NetworkExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public static class NetworkExtensions Methods ReadArray<T>(BinaryReader, Func<BinaryReader, T>) Declaration public static T[] ReadArray<T>(this BinaryReader message, Func<BinaryReader, T> readElement) Parameters Type Name Description BinaryReader message Func < BinaryReader , T> readElement Returns Type Description T[] Type Parameters Name Description T ReadBoolean(BinaryReader) Declaration public static bool ReadBoolean(this BinaryReader message) Parameters Type Name Description BinaryReader message Returns Type Description Boolean ReadColor(BinaryReader) Declaration public static Color ReadColor(this BinaryReader message) Parameters Type Name Description BinaryReader message Returns Type Description Color ReadColor32(BinaryReader) Declaration public static Color32 ReadColor32(this BinaryReader message) Parameters Type Name Description BinaryReader message Returns Type Description Color32 ReadColorArray(BinaryReader) Declaration public static Color[] ReadColorArray(this BinaryReader message) Parameters Type Name Description BinaryReader message Returns Type Description Color [] ReadGuid(BinaryReader) Declaration public static Guid ReadGuid(this BinaryReader message) Parameters Type Name Description BinaryReader message Returns Type Description Guid ReadInt32Array(BinaryReader) Declaration public static int[] ReadInt32Array(this BinaryReader message) Parameters Type Name Description BinaryReader message Returns Type Description Int32 [] ReadMatrix4x4(BinaryReader) Declaration public static Matrix4x4 ReadMatrix4x4(this BinaryReader message) Parameters Type Name Description BinaryReader message Returns Type Description Matrix4x4 ReadQuaternion(BinaryReader) Declaration public static Quaternion ReadQuaternion(this BinaryReader message) Parameters Type Name Description BinaryReader message Returns Type Description Quaternion ReadShortID(BinaryReader) Declaration public static ShortID ReadShortID(this BinaryReader message) Parameters Type Name Description BinaryReader message Returns Type Description ShortID ReadVector2(BinaryReader) Declaration public static Vector2 ReadVector2(this BinaryReader message) Parameters Type Name Description BinaryReader message Returns Type Description Vector2 ReadVector2Array(BinaryReader) Declaration public static Vector2[] ReadVector2Array(this BinaryReader message) Parameters Type Name Description BinaryReader message Returns Type Description Vector2 [] ReadVector3(BinaryReader) Declaration public static Vector3 ReadVector3(this BinaryReader message) Parameters Type Name Description BinaryReader message Returns Type Description Vector3 ReadVector3Array(BinaryReader) Declaration public static Vector3[] ReadVector3Array(this BinaryReader message) Parameters Type Name Description BinaryReader message Returns Type Description Vector3 [] ReadVector4(BinaryReader) Declaration public static Vector4 ReadVector4(this BinaryReader message) Parameters Type Name Description BinaryReader message Returns Type Description Vector4 Write(BinaryWriter, Color) Declaration public static void Write(this BinaryWriter message, Color value) Parameters Type Name Description BinaryWriter message Color value Write(BinaryWriter, Color[]) Declaration public static void Write(this BinaryWriter message, Color[] array) Parameters Type Name Description BinaryWriter message Color [] array Write(BinaryWriter, Color32) Declaration public static void Write(this BinaryWriter message, Color32 value) Parameters Type Name Description BinaryWriter message Color32 value Write(BinaryWriter, Matrix4x4) Declaration public static void Write(this BinaryWriter message, Matrix4x4 value) Parameters Type Name Description BinaryWriter message Matrix4x4 value Write(BinaryWriter, Quaternion) Declaration public static void Write(this BinaryWriter message, Quaternion value) Parameters Type Name Description BinaryWriter message Quaternion value Write(BinaryWriter, Guid) Declaration public static void Write(this BinaryWriter message, Guid value) Parameters Type Name Description BinaryWriter message Guid value Write(BinaryWriter, Int32[]) Declaration public static void Write(this BinaryWriter message, int[] array) Parameters Type Name Description BinaryWriter message Int32 [] array Write(BinaryWriter, Vector2) Declaration public static void Write(this BinaryWriter message, Vector2 value) Parameters Type Name Description BinaryWriter message Vector2 value Write(BinaryWriter, Vector2[]) Declaration public static void Write(this BinaryWriter message, Vector2[] array) Parameters Type Name Description BinaryWriter message Vector2 [] array Write(BinaryWriter, Vector3) Declaration public static void Write(this BinaryWriter message, Vector3 value) Parameters Type Name Description BinaryWriter message Vector3 value Write(BinaryWriter, Vector3[]) Declaration public static void Write(this BinaryWriter message, Vector3[] array) Parameters Type Name Description BinaryWriter message Vector3 [] array Write(BinaryWriter, Vector4) Declaration public static void Write(this BinaryWriter message, Vector4 value) Parameters Type Name Description BinaryWriter message Vector4 value WriteArray<T>(BinaryWriter, T[], Action<BinaryWriter, T>) Declaration public static void WriteArray<T>(this BinaryWriter message, T[] array, Action<BinaryWriter, T> writeAction) Parameters Type Name Description BinaryWriter message T[] array Action < BinaryWriter , T> writeAction Type Parameters Name Description T"
  },
  "api/Microsoft.MixedReality.SpectatorView.NetworkConfigurationSettings.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.NetworkConfigurationSettings.html",
    "title": "Class NetworkConfigurationSettings | MixedReality-SpectatorView Documentation",
    "keywords": "Class NetworkConfigurationSettings Inheritance Object Singleton < NetworkConfigurationSettings > NetworkConfigurationSettings Inherited Members Singleton<NetworkConfigurationSettings>.IsInitialized Singleton<NetworkConfigurationSettings>.Awake() Singleton<NetworkConfigurationSettings>.OnDestroy() Singleton<NetworkConfigurationSettings>.Instance Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public class NetworkConfigurationSettings : Singleton<NetworkConfigurationSettings> Properties EnableMobileNetworkConfigurationVisual When true, a mobile network configuration visual is used to obtain the user IP Address. Declaration public bool EnableMobileNetworkConfigurationVisual { get; } Property Value Type Description Boolean OverrideMobileNetworkConfigurationVisualPrefab Prefab for creating a mobile network configuration visual. Declaration public GameObject OverrideMobileNetworkConfigurationVisualPrefab { get; } Property Value Type Description GameObject"
  },
  "api/Microsoft.MixedReality.SpectatorView.MobileUIScaler.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.MobileUIScaler.html",
    "title": "Class MobileUIScaler | MixedReality-SpectatorView Documentation",
    "keywords": "Class MobileUIScaler Helper class that scales mobile UI to show at same physical size across devices Inheritance Object MobileUIScaler Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public class MobileUIScaler : MonoBehaviour"
  },
  "api/Microsoft.MixedReality.SpectatorView.MarkerVisualLocalizationInitializer.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.MarkerVisualLocalizationInitializer.html",
    "title": "Class MarkerVisualLocalizationInitializer | MixedReality-SpectatorView Documentation",
    "keywords": "Class MarkerVisualLocalizationInitializer Inheritance Object SpatialLocalizationInitializer MarkerVisualLocalizationInitializer Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public class MarkerVisualLocalizationInitializer : SpatialLocalizationInitializer Properties PeerSpatialLocalizerId Declaration public override Guid PeerSpatialLocalizerId { get; } Property Value Type Description Guid Overrides SpatialLocalizationInitializer.PeerSpatialLocalizerId Methods RunLocalization(SpatialCoordinateSystemParticipant) Declaration public override void RunLocalization(SpatialCoordinateSystemParticipant participant) Parameters Type Name Description SpatialCoordinateSystemParticipant participant Overrides SpatialLocalizationInitializer.RunLocalization(SpatialCoordinateSystemParticipant)"
  },
  "api/Microsoft.MixedReality.SpectatorView.MarkerVisualDetectorSpatialLocalizer.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.MarkerVisualDetectorSpatialLocalizer.html",
    "title": "Class MarkerVisualDetectorSpatialLocalizer | MixedReality-SpectatorView Documentation",
    "keywords": "Class MarkerVisualDetectorSpatialLocalizer Inheritance Object SpatialLocalizer < MarkerVisualDetectorLocalizationSettings > MarkerVisualDetectorSpatialLocalizer ArUcoMarkerVisualDetectorSpatialLocalizer QRCodeMarkerVisualDetectorSpatialLocalizer Implements ISpatialLocalizer Inherited Members SpatialLocalizer<MarkerVisualDetectorLocalizationSettings>.SpatialLocalizerId SpatialLocalizer<MarkerVisualDetectorLocalizationSettings>.lockObject SpatialLocalizer<MarkerVisualDetectorLocalizationSettings>.debugLogging SpatialLocalizer<MarkerVisualDetectorLocalizationSettings>.DebugLog(String) SpatialLocalizer<MarkerVisualDetectorLocalizationSettings>.DisplayName SpatialLocalizer<MarkerVisualDetectorLocalizationSettings>.IsSupported SpatialLocalizer<MarkerVisualDetectorLocalizationSettings>.Start() SpatialLocalizer<MarkerVisualDetectorLocalizationSettings>.OnDestroy() SpatialLocalizer<MarkerVisualDetectorLocalizationSettings>.CreateDefaultSettings() SpatialLocalizer<MarkerVisualDetectorLocalizationSettings>.ISpatialLocalizer.TryDeserializeSettings(BinaryReader, ISpatialLocalizationSettings) SpatialLocalizer<MarkerVisualDetectorLocalizationSettings>.ISpatialLocalizer.TryCreateLocalizationSession(IPeerConnection, ISpatialLocalizationSettings, ISpatialLocalizationSession) Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public abstract class MarkerVisualDetectorSpatialLocalizer : SpatialLocalizer<MarkerVisualDetectorLocalizationSettings>, ISpatialLocalizer Fields MarkerDetector Declaration protected MonoBehaviour MarkerDetector Field Value Type Description MonoBehaviour Methods TryCreateLocalizationSession(IPeerConnection, MarkerVisualDetectorLocalizationSettings, out ISpatialLocalizationSession) Declaration public override bool TryCreateLocalizationSession(IPeerConnection peerConnection, MarkerVisualDetectorLocalizationSettings settings, out ISpatialLocalizationSession session) Parameters Type Name Description IPeerConnection peerConnection MarkerVisualDetectorLocalizationSettings settings ISpatialLocalizationSession session Returns Type Description Boolean Overrides Microsoft.MixedReality.SpectatorView.SpatialLocalizer<Microsoft.MixedReality.SpectatorView.MarkerVisualDetectorLocalizationSettings>.TryCreateLocalizationSession(Microsoft.MixedReality.SpectatorView.IPeerConnection, Microsoft.MixedReality.SpectatorView.MarkerVisualDetectorLocalizationSettings, Microsoft.MixedReality.SpectatorView.ISpatialLocalizationSession) TryDeserializeSettings(BinaryReader, out MarkerVisualDetectorLocalizationSettings) Declaration public override bool TryDeserializeSettings(BinaryReader reader, out MarkerVisualDetectorLocalizationSettings settings) Parameters Type Name Description BinaryReader reader MarkerVisualDetectorLocalizationSettings settings Returns Type Description Boolean Overrides Microsoft.MixedReality.SpectatorView.SpatialLocalizer<Microsoft.MixedReality.SpectatorView.MarkerVisualDetectorLocalizationSettings>.TryDeserializeSettings(BinaryReader, Microsoft.MixedReality.SpectatorView.MarkerVisualDetectorLocalizationSettings) Implements ISpatialLocalizer"
  },
  "api/Microsoft.MixedReality.SpectatorView.MarkerVisualDetectorLocalizationSettings.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.MarkerVisualDetectorLocalizationSettings.html",
    "title": "Class MarkerVisualDetectorLocalizationSettings | MixedReality-SpectatorView Documentation",
    "keywords": "Class MarkerVisualDetectorLocalizationSettings Inheritance Object MarkerVisualDetectorLocalizationSettings Implements ISpatialLocalizationSettings Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public class MarkerVisualDetectorLocalizationSettings : ISpatialLocalizationSettings Constructors MarkerVisualDetectorLocalizationSettings() Declaration public MarkerVisualDetectorLocalizationSettings() Methods Serialize(BinaryWriter) Declaration public void Serialize(BinaryWriter writer) Parameters Type Name Description BinaryWriter writer Implements ISpatialLocalizationSettings"
  },
  "api/Microsoft.MixedReality.SpectatorView.MarkerVisualCoordinateService.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.MarkerVisualCoordinateService.html",
    "title": "Class MarkerVisualCoordinateService | MixedReality-SpectatorView Documentation",
    "keywords": "Class MarkerVisualCoordinateService A variant of marker based ISpatialCoordinateService implementation. This one tracks coordinates displayed on the screen of current mobile device. The logic is that every time you start tracking a new coordinate is created and shown on the screen, after you stop tracking that coordinates location is no longer updated with the device. Inheritance Object MarkerVisualCoordinateService Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public class MarkerVisualCoordinateService : SpatialCoordinateServiceBase<int> Constructors MarkerVisualCoordinateService(IMarkerVisual, UnityEngine.Matrix4x4, UnityEngine.Transform, Boolean) Declaration public MarkerVisualCoordinateService(IMarkerVisual markerVisual, UnityEngine.Matrix4x4 cameraToMarker, UnityEngine.Transform cameraTransform, bool debugLogging = false) Parameters Type Name Description IMarkerVisual markerVisual UnityEngine.Matrix4x4 cameraToMarker UnityEngine.Transform cameraTransform Boolean debugLogging Methods OnDiscoverCoordinatesAsync(CancellationToken, Int32[]) Declaration protected override Task OnDiscoverCoordinatesAsync(CancellationToken cancellationToken, int[] idsToLocate) Parameters Type Name Description CancellationToken cancellationToken Int32 [] idsToLocate Returns Type Description Task OnManagedDispose() Declaration protected override void OnManagedDispose() TryParse(String, out Int32) Declaration protected override bool TryParse(string id, out int result) Parameters Type Name Description String id Int32 result Returns Type Description Boolean"
  },
  "api/Microsoft.MixedReality.SpectatorView.MarkerVisualCanvasScaleFactorScraper.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.MarkerVisualCanvasScaleFactorScraper.html",
    "title": "Class MarkerVisualCanvasScaleFactorScraper | MixedReality-SpectatorView Documentation",
    "keywords": "Class MarkerVisualCanvasScaleFactorScraper Helper class for obtaining additional scaling information to apply to ArUco Marker Images Inheritance Object MarkerVisualCanvasScaleFactorScraper Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public class MarkerVisualCanvasScaleFactorScraper : MonoBehaviour Methods Awake() Declaration protected void Awake()"
  },
  "api/Microsoft.MixedReality.SpectatorView.MarkersUpdatedHandler.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.MarkersUpdatedHandler.html",
    "title": "Delegate MarkersUpdatedHandler | MixedReality-SpectatorView Documentation",
    "keywords": "Delegate MarkersUpdatedHandler Delegate called when markers have been detected by an IMarkerDetector Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public delegate void MarkersUpdatedHandler(Dictionary<int, Marker> markers); Parameters Type Name Description Dictionary < Int32 , Marker > markers Dictionary of Marker s that have been detected"
  },
  "api/Microsoft.MixedReality.SpectatorView.MarkerPositionBehavior.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.MarkerPositionBehavior.html",
    "title": "Enum MarkerPositionBehavior | MixedReality-SpectatorView Documentation",
    "keywords": "Enum MarkerPositionBehavior Describes how a marker is expected to be moving while it's detected. Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public enum MarkerPositionBehavior Fields Name Description Moving The marker is expected to have some movement (for example, a handheld marker). Stationary The marker is expected to be completely stationary (for example, resting on a table)."
  },
  "api/Microsoft.MixedReality.SpectatorView.MarkerPair.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.MarkerPair.html",
    "title": "Struct MarkerPair | MixedReality-SpectatorView Documentation",
    "keywords": "Struct MarkerPair Struct that contains locations and orientations for QR Code and ArUco markers that have the same id. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax [Serializable] public struct MarkerPair Fields arucoMarkerCorners Declaration public MarkerCorners arucoMarkerCorners Field Value Type Description MarkerCorners id Declaration public int id Field Value Type Description Int32 qrCodeMarkerCorners Declaration public MarkerCorners qrCodeMarkerCorners Field Value Type Description MarkerCorners"
  },
  "api/Microsoft.MixedReality.SpectatorView.Marker.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.Marker.html",
    "title": "Class Marker | MixedReality-SpectatorView Documentation",
    "keywords": "Class Marker Helper class containing data related to detected markers Inheritance Object Marker Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax [Serializable] public class Marker Constructors Marker(Int32, Vector3, Quaternion) Contructor for the Marker class Declaration public Marker(int id, Vector3 position, Quaternion rotation) Parameters Type Name Description Int32 id Detected marker id Vector3 position Position of the detected marker relative to the application origin Quaternion rotation Rotation of the detected marker relative to the application origin Fields Id Id of the detected marker Declaration public int Id Field Value Type Description Int32 Position Position of the detected marker relative to the application origin Declaration public Vector3 Position Field Value Type Description Vector3 Rotation Rotation of the marker relative to the application origin. X-Axis is reported horizontal with the marker. Y-Axis positive direction is upward along the marker. Z-Axis positive direction is outward from the marker compared to into the marker. Declaration public Quaternion Rotation Field Value Type Description Quaternion Methods ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString()"
  },
  "api/Microsoft.MixedReality.SpectatorView.ISpatialLocalizer.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.ISpatialLocalizer.html",
    "title": "Interface ISpatialLocalizer | MixedReality-SpectatorView Documentation",
    "keywords": "Interface ISpatialLocalizer Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public interface ISpatialLocalizer Properties DisplayName Declaration string DisplayName { get; } Property Value Type Description String SpatialLocalizerId Declaration Guid SpatialLocalizerId { get; } Property Value Type Description Guid Methods CreateDefaultSettings() Declaration ISpatialLocalizationSettings CreateDefaultSettings() Returns Type Description ISpatialLocalizationSettings TryCreateLocalizationSession(IPeerConnection, ISpatialLocalizationSettings, out ISpatialLocalizationSession) Declaration bool TryCreateLocalizationSession(IPeerConnection peerConnection, ISpatialLocalizationSettings settings, out ISpatialLocalizationSession session) Parameters Type Name Description IPeerConnection peerConnection ISpatialLocalizationSettings settings ISpatialLocalizationSession session Returns Type Description Boolean TryDeserializeSettings(BinaryReader, out ISpatialLocalizationSettings) Declaration bool TryDeserializeSettings(BinaryReader reader, out ISpatialLocalizationSettings settings) Parameters Type Name Description BinaryReader reader ISpatialLocalizationSettings settings Returns Type Description Boolean"
  },
  "api/Microsoft.MixedReality.SpectatorView.ISpatialLocalizationSettings.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.ISpatialLocalizationSettings.html",
    "title": "Interface ISpatialLocalizationSettings | MixedReality-SpectatorView Documentation",
    "keywords": "Interface ISpatialLocalizationSettings Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public interface ISpatialLocalizationSettings Methods Serialize(BinaryWriter) Declaration void Serialize(BinaryWriter writer) Parameters Type Name Description BinaryWriter writer"
  },
  "api/Microsoft.MixedReality.SpectatorView.ISpatialLocalizationSession.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.ISpatialLocalizationSession.html",
    "title": "Interface ISpatialLocalizationSession | MixedReality-SpectatorView Documentation",
    "keywords": "Interface ISpatialLocalizationSession Inherited Members IDisposable.Dispose() Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public interface ISpatialLocalizationSession : IDisposable Methods LocalizeAsync(CancellationToken) Declaration Task<ISpatialCoordinate> LocalizeAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < ISpatialCoordinate > OnDataReceived(BinaryReader) Declaration void OnDataReceived(BinaryReader reader) Parameters Type Name Description BinaryReader reader"
  },
  "api/Microsoft.MixedReality.SpectatorView.INetworkManager.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.INetworkManager.html",
    "title": "Interface INetworkManager | MixedReality-SpectatorView Documentation",
    "keywords": "Interface INetworkManager Inherited Members ICommandRegistry.Connected ICommandRegistry.Disconnected ICommandRegistry.RegisterCommandHandler(String, CommandHandler) ICommandRegistry.UnregisterCommandHandler(String, CommandHandler) Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public interface INetworkManager : ICommandRegistry Properties ConnectedIPAddress Gets the local IP address reported by the socket used to connect to the device. Declaration string ConnectedIPAddress { get; } Property Value Type Description String IsConnected Gets whether or not a network connection to the device is established. Declaration bool IsConnected { get; } Property Value Type Description Boolean IsConnecting Gets whether or not a network connection to the device is pending. Declaration bool IsConnecting { get; } Property Value Type Description Boolean TimeSinceLastUpdate Gets the time since this network manager last received an update. Declaration TimeSpan TimeSinceLastUpdate { get; } Property Value Type Description TimeSpan Methods Broadcast(Byte[]) Send a packet of data to all connected devices. Declaration void Broadcast(byte[] data) Parameters Type Name Description Byte [] data The data to send to each connected device. ConnectTo(String) Connect to a remote device on the default port for this network manager. Declaration void ConnectTo(string targetIpString) Parameters Type Name Description String targetIpString The IP address of the device to connect to. ConnectTo(String, Int32) Connect to a remote device using the specified port. Declaration void ConnectTo(string targetIpString, int port) Parameters Type Name Description String targetIpString The IP address of the device to connect to. Int32 port The port to use for communication. Disconnect() Disconnects any active network connections to other devices. Declaration void Disconnect() StartListening(Int32) Starts a listening socket on the given port. Declaration void StartListening(int port) Parameters Type Name Description Int32 port The port to listen for new connections on."
  },
  "api/Microsoft.MixedReality.SpectatorView.INetworkConfigurationVisual.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.INetworkConfigurationVisual.html",
    "title": "Interface INetworkConfigurationVisual | MixedReality-SpectatorView Documentation",
    "keywords": "Interface INetworkConfigurationVisual Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public interface INetworkConfigurationVisual Methods Hide() Called to hide the network configuration visual. Declaration void Hide() Show() Called to show the network configuration visual. Declaration void Show() Events NetworkConfigurationUpdated Called when the associated network configuration has been updated. Declaration event Action<INetworkConfigurationVisual, string> NetworkConfigurationUpdated Event Type Type Description Action < INetworkConfigurationVisual , String >"
  },
  "api/Microsoft.MixedReality.SpectatorView.IncomingMessage.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.IncomingMessage.html",
    "title": "Class IncomingMessage | MixedReality-SpectatorView Documentation",
    "keywords": "Class IncomingMessage Helper class that wraps an incoming message Inheritance Object IncomingMessage Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public class IncomingMessage Constructors IncomingMessage(SocketEndpoint, Byte[], Int32) Declaration public IncomingMessage(SocketEndpoint endpoint, byte[] data, int size) Parameters Type Name Description SocketEndpoint endpoint Byte [] data Int32 size Properties Data The data provided in the message Declaration public byte[] Data { get; } Property Value Type Description Byte [] Endpoint The endpoint that the message was received from Declaration public SocketEndpoint Endpoint { get; } Property Value Type Description SocketEndpoint Size The size of the data provided in the message Declaration public int Size { get; } Property Value Type Description Int32"
  },
  "api/Microsoft.MixedReality.SpectatorView.IMobileOverlayVisualChild.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.IMobileOverlayVisualChild.html",
    "title": "Interface IMobileOverlayVisualChild | MixedReality-SpectatorView Documentation",
    "keywords": "Interface IMobileOverlayVisualChild Interface implemented by classes that show/hide based on spectator view UI visibility changes Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public interface IMobileOverlayVisualChild Methods Hide() Hide any associated UI/GameObjects Declaration void Hide() Show() Show any associated UI/GameObjects Declaration void Show() Events OverlayVisibilityRequest Event for requesting to show/hide spectator view UI Declaration event OverlayVisibilityRequest OverlayVisibilityRequest Event Type Type Description OverlayVisibilityRequest"
  },
  "api/Microsoft.MixedReality.SpectatorView.IComponentBroadcasterService.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.IComponentBroadcasterService.html",
    "title": "Interface IComponentBroadcasterService | MixedReality-SpectatorView Documentation",
    "keywords": "Interface IComponentBroadcasterService Manages component synchronization across different devices Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public interface IComponentBroadcasterService Methods Create(GameObject) Declaration void Create(GameObject mirror) Parameters Type Name Description GameObject mirror Destroy(GameObject) Declaration void Destroy(GameObject mirror) Parameters Type Name Description GameObject mirror GetID() Declaration ShortID GetID() Returns Type Description ShortID LerpRead(BinaryReader, GameObject, Single) Declaration void LerpRead(BinaryReader message, GameObject mirror, float lerpVal) Parameters Type Name Description BinaryReader message GameObject mirror Single lerpVal Read(SocketEndpoint, BinaryReader, GameObject) Declaration void Read(SocketEndpoint sendingEndpoint, BinaryReader message, GameObject mirror) Parameters Type Name Description SocketEndpoint sendingEndpoint BinaryReader message GameObject mirror WriteHeader(BinaryWriter, IComponentBroadcaster, ComponentBroadcasterChangeType) Declaration void WriteHeader(BinaryWriter message, IComponentBroadcaster component, ComponentBroadcasterChangeType changeType = ComponentBroadcasterChangeType.Updated) Parameters Type Name Description BinaryWriter message IComponentBroadcaster component ComponentBroadcasterChangeType changeType WriteHeader(BinaryWriter, TransformObserver, ComponentBroadcasterChangeType) Declaration void WriteHeader(BinaryWriter message, TransformObserver TransformObserver, ComponentBroadcasterChangeType changeType = ComponentBroadcasterChangeType.Updated) Parameters Type Name Description BinaryWriter message TransformObserver TransformObserver ComponentBroadcasterChangeType changeType"
  },
  "api/Microsoft.MixedReality.SpectatorView.IComponentBroadcaster.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.IComponentBroadcaster.html",
    "title": "Interface IComponentBroadcaster | MixedReality-SpectatorView Documentation",
    "keywords": "Interface IComponentBroadcaster Abstract class for sending component updates from the user device. Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public interface IComponentBroadcaster Properties ComponentBroadcasterService The associated component service. Declaration IComponentBroadcasterService ComponentBroadcasterService { get; } Property Value Type Description IComponentBroadcasterService TransformBroadcaster The components transform broadcaster Declaration TransformBroadcaster TransformBroadcaster { get; } Property Value Type Description TransformBroadcaster Methods OnFrameCompleted(SocketEndpointConnectionDelta) Call to signal the end of a frame. Declaration void OnFrameCompleted(SocketEndpointConnectionDelta connectionDelta) Parameters Type Name Description SocketEndpointConnectionDelta connectionDelta ProcessNewConnections(SocketEndpointConnectionDelta) Call to report the current state of network connections. Declaration void ProcessNewConnections(SocketEndpointConnectionDelta connectionDelta) Parameters Type Name Description SocketEndpointConnectionDelta connectionDelta ResetFrame() Call to reset the frame. Declaration void ResetFrame()"
  },
  "api/Microsoft.MixedReality.SpectatorView.ICommandRegistry.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.ICommandRegistry.html",
    "title": "Interface ICommandRegistry | MixedReality-SpectatorView Documentation",
    "keywords": "Interface ICommandRegistry Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public interface ICommandRegistry Methods RegisterCommandHandler(String, CommandHandler) Declaration void RegisterCommandHandler(string command, CommandHandler handler) Parameters Type Name Description String command CommandHandler handler UnregisterCommandHandler(String, CommandHandler) Declaration void UnregisterCommandHandler(string command, CommandHandler handler) Parameters Type Name Description String command CommandHandler handler Events Connected Declaration event ConnectedEventHandler Connected Event Type Type Description ConnectedEventHandler Disconnected Declaration event DisconnectedEventHandler Disconnected Event Type Type Description DisconnectedEventHandler"
  },
  "api/Microsoft.MixedReality.SpectatorView.ICalibrationData.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.ICalibrationData.html",
    "title": "Interface ICalibrationData | MixedReality-SpectatorView Documentation",
    "keywords": "Interface ICalibrationData Provides an abstraction over setting up a holographic camera from a stereo-calibrated camera rig. Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public interface ICalibrationData Methods SetUnityCameraExtrinstics(Transform) Sets up the extrinsic parameters of the holographic camera such that the holographic camera's position and rotation are correctly offset from the HoloLens providing poses for the camera rig. Declaration void SetUnityCameraExtrinstics(Transform cameraTransform) Parameters Type Name Description Transform cameraTransform The transform that contains the holographic camera. SetUnityCameraIntrinsics(Camera) Sets up the intrinsic parameters (such as a projection matrix or field of view) of the holographic camera to match the video camera. Declaration void SetUnityCameraIntrinsics(Camera camera) Parameters Type Name Description Camera camera The holographic camera to set the intrinsis of."
  },
  "api/Microsoft.MixedReality.SpectatorView.HeadsetRequestHandler.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.HeadsetRequestHandler.html",
    "title": "Class HeadsetRequestHandler | MixedReality-SpectatorView Documentation",
    "keywords": "Class HeadsetRequestHandler Inheritance Object HeadsetRequestHandler Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public class HeadsetRequestHandler : MonoBehaviour"
  },
  "api/Microsoft.MixedReality.SpectatorView.HeadsetData.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.HeadsetData.html",
    "title": "Struct HeadsetData | MixedReality-SpectatorView Documentation",
    "keywords": "Struct HeadsetData Struct that contains the world position and orientation of a HoloLens device. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax [Serializable] public struct HeadsetData Fields position Declaration public Vector3 position Field Value Type Description Vector3 rotation Declaration public Quaternion rotation Field Value Type Description Quaternion"
  },
  "api/Microsoft.MixedReality.SpectatorView.HeadsetCalibrationDataUpdatedHandler.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.HeadsetCalibrationDataUpdatedHandler.html",
    "title": "Delegate HeadsetCalibrationDataUpdatedHandler | MixedReality-SpectatorView Documentation",
    "keywords": "Delegate HeadsetCalibrationDataUpdatedHandler Called when HeadsetCalibration has a new qr code/aruco marker payload Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public delegate void HeadsetCalibrationDataUpdatedHandler(HeadsetCalibrationData data); Parameters Type Name Description HeadsetCalibrationData data byte data to send over the network"
  },
  "api/Microsoft.MixedReality.SpectatorView.HeadsetCalibrationDataRequest.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.HeadsetCalibrationDataRequest.html",
    "title": "Class HeadsetCalibrationDataRequest | MixedReality-SpectatorView Documentation",
    "keywords": "Class HeadsetCalibrationDataRequest Data that the editor sends to a HoloLens device during calibration Inheritance Object HeadsetCalibrationDataRequest Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax [Serializable] public class HeadsetCalibrationDataRequest Fields timestamp The editor application time when this request was created. Declaration public float timestamp Field Value Type Description Single Methods Serialize() Call to serialize class data into a byte array payload for sending over a network. Declaration public byte[] Serialize() Returns Type Description Byte [] byte array payload SerializeAndWrite(BinaryWriter) Call to serialize class data into a byte array that is then written to the provided writer. Declaration public void SerializeAndWrite(BinaryWriter writer) Parameters Type Name Description BinaryWriter writer binary writer where serialized data is written TryDeserialize(BinaryReader, out HeadsetCalibrationDataRequest) Call to read and deserialize a byte array paylod to create a headset calibration data request. Declaration public static bool TryDeserialize(BinaryReader reader, out HeadsetCalibrationDataRequest request) Parameters Type Name Description BinaryReader reader reader for obtaining the byte array to deserialize HeadsetCalibrationDataRequest request output headset calibration data request Returns Type Description Boolean Returns true if the payload was successfully converted to a headset calibration data request, otherwise false. TryDeserialize(Byte[], out HeadsetCalibrationDataRequest) Call to try and deserialize a byte array paylod to create a headset calibration data request. Declaration public static bool TryDeserialize(byte[] payload, out HeadsetCalibrationDataRequest request) Parameters Type Name Description Byte [] payload byte array to deserialize HeadsetCalibrationDataRequest request output headset calibration data request Returns Type Description Boolean Returns true if the payload was successfully converted to a headset calibration data request, otherwise false."
  },
  "api/Microsoft.MixedReality.SpectatorView.FieldHelper.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.FieldHelper.html",
    "title": "Class FieldHelper | MixedReality-SpectatorView Documentation",
    "keywords": "Class FieldHelper Helper class for validating that an object implements or extends a specific type. Inheritance Object FieldHelper Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public class FieldHelper Methods ValidateType<T>(Object) Used to assess whether an object implements or extends the type T Declaration public static bool ValidateType<T>(object obj) where T : class Parameters Type Name Description Object obj Object that should implement the provided type Returns Type Description Boolean Returns true if the object implements or extends the provided type, Throws if the object does not implement said type. Type Parameters Name Description T Type that the provided object should impelments or extends"
  },
  "api/Microsoft.MixedReality.SpectatorView.EditorIntrinsicsCalibration.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.EditorIntrinsicsCalibration.html",
    "title": "Class EditorIntrinsicsCalibration | MixedReality-SpectatorView Documentation",
    "keywords": "Class EditorIntrinsicsCalibration Inheritance Object EditorIntrinsicsCalibration Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public class EditorIntrinsicsCalibration : MonoBehaviour Fields chessboardHeight Chessboard height in squares. Declaration protected int chessboardHeight Field Value Type Description Int32 chessboardWidth Declaration protected int chessboardWidth Field Value Type Description Int32 chessSquareSize Physical size of a chessboard square (in meters). Declaration public float chessSquareSize Field Value Type Description Single cornersImage Image for displaying the detected corners image. Declaration protected RawImage cornersImage Field Value Type Description RawImage feedImage Declaration protected RawImage feedImage Field Value Type Description RawImage heatmapImage Image for displaying the detected corners heatmap image. Declaration protected RawImage heatmapImage Field Value Type Description RawImage lastProcessedImage Image for displaying the detected corners on the last processed dslr camera feed image. Declaration protected RawImage lastProcessedImage Field Value Type Description RawImage Properties Intrinsics The last calculated camera intrinsics. Declaration public CalculatedCameraIntrinsics Intrinsics { get; } Property Value Type Description CalculatedCameraIntrinsics IntrinsicsFileName The name of the file that contains the last calculated camera intrinsics. Declaration public string IntrinsicsFileName { get; } Property Value Type Description String ProcessedImageCount The number of usable images processed for camera intrinsics. Declaration public int ProcessedImageCount { get; } Property Value Type Description Int32"
  },
  "api/Microsoft.MixedReality.SpectatorView.EditorExtrinsicsCalibration.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.EditorExtrinsicsCalibration.html",
    "title": "Class EditorExtrinsicsCalibration | MixedReality-SpectatorView Documentation",
    "keywords": "Class EditorExtrinsicsCalibration Inheritance Object EditorExtrinsicsCalibration Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public class EditorExtrinsicsCalibration : MonoBehaviour Fields cameraIntrinsicsPath Declaration protected string cameraIntrinsicsPath Field Value Type Description String cameraVisualHelper Used to draw debug visuals for camera positions/orientations. Declaration protected DebugVisualHelper cameraVisualHelper Field Value Type Description DebugVisualHelper feedImage Declaration protected RawImage feedImage Field Value Type Description RawImage lastArUcoImage Image for displaying the last processed ArUco marker dataset. Declaration protected RawImage lastArUcoImage Field Value Type Description RawImage markerVisualHelper Used to draw debug visuals for detected aruco markers. Declaration protected DebugVisualHelper markerVisualHelper Field Value Type Description DebugVisualHelper MinimumNumberOfDetectedMarkers Declaration public int MinimumNumberOfDetectedMarkers Field Value Type Description Int32 Properties CalibrationFileName The file name for the found calibration data. Calibration data includes both camera intrinsics and extrinsics. Declaration public string CalibrationFileName { get; } Property Value Type Description String GlobalExtrinsics The output camera extrinsics calculated from all usable datasets. Declaration public CalculatedCameraExtrinsics GlobalExtrinsics { get; } Property Value Type Description CalculatedCameraExtrinsics GlobalExtrinsicsFileName The file name for the output camera extrinsics calculated from all usable datasets. Declaration public string GlobalExtrinsicsFileName { get; } Property Value Type Description String LastDetectedMarkersCount The number of markers detected in the last dataset. Declaration public int LastDetectedMarkersCount { get; } Property Value Type Description Int32 ProcessedDatasetCount The number of datasets that have been successfully processed.s Declaration public int ProcessedDatasetCount { get; } Property Value Type Description Int32 UploadResultMessage A message associated with the last attempt to upload calibration data to a connected HoloLens device. Declaration public string UploadResultMessage { get; } Property Value Type Description String UploadSucceeded A flag indicating whether the last attempt at uploading calibration data to a connected HoloLens device succeeded. Declaration public bool UploadSucceeded { get; } Property Value Type Description Boolean"
  },
  "api/Microsoft.MixedReality.SpectatorView.Editor.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.Editor.html",
    "title": "Namespace Microsoft.MixedReality.SpectatorView.Editor | MixedReality-SpectatorView Documentation",
    "keywords": "Namespace Microsoft.MixedReality.SpectatorView.Editor Classes CalibrationRecording CalibrationRecordingPose EditorWindowBase<TWindow> PlatformSwitcherEditor Defines functionality for switching platforms in the Unity editor StateSynchronizationMenuItems"
  },
  "api/Microsoft.MixedReality.SpatialAlignment.ISpatialCoordinate.html": {
    "href": "api/Microsoft.MixedReality.SpatialAlignment.ISpatialCoordinate.html",
    "title": "Interface ISpatialCoordinate | MixedReality-SpectatorView Documentation",
    "keywords": "Interface ISpatialCoordinate This represents a spatial coordinate that can then be used to convert position and rotation to and from this coordinate space. Namespace : Microsoft.MixedReality.SpatialAlignment Assembly : cs.temp.dll.dll Syntax public interface ISpatialCoordinate Properties Id Gets the Id representing this coordinate. Declaration string Id { get; } Property Value Type Description String State Gets the current state of the coordinate. Declaration LocatedState State { get; } Property Value Type Description LocatedState Methods CoordinateToWorldSpace(Quaternion) Converts coordinate space position to world space position. For example, applying this transform to Quaternion.identity would return the quaternion of the coordinate in the local application's world space. Declaration Quaternion CoordinateToWorldSpace(Quaternion quaternion) Parameters Type Name Description Quaternion quaternion Returns Type Description Quaternion CoordinateToWorldSpace(Vector3) Converts coordinate space position to world space position. For example, applying this transform to Vector3.zero would return the position of the coordinate in the local application's world space. Declaration Vector3 CoordinateToWorldSpace(Vector3 vector) Parameters Type Name Description Vector3 vector Returns Type Description Vector3 WorldToCoordinateSpace(Quaternion) Converts world space rotation to coordinate space rotation. For example, applying this transform to Quaternion.identity would return the quaternion of the local application's world space origin in the coordinate space. Declaration Quaternion WorldToCoordinateSpace(Quaternion quaternion) Parameters Type Name Description Quaternion quaternion Returns Type Description Quaternion WorldToCoordinateSpace(Vector3) Converts world space position to coordinate space position. For example, applying this transform to Vector3.zero would return the position of the local application's world space origin in the coordinate space. Declaration Vector3 WorldToCoordinateSpace(Vector3 vector) Parameters Type Name Description Vector3 vector Returns Type Description Vector3 Events StateChanged Occurs when the value of the State property has changed. Declaration event Action StateChanged Event Type Type Description Action"
  },
  "api/Microsoft.MixedReality.SpatialAlignment.Extensions.html": {
    "href": "api/Microsoft.MixedReality.SpatialAlignment.Extensions.html",
    "title": "Class Extensions | MixedReality-SpectatorView Documentation",
    "keywords": "Class Extensions Helper Unity side extensions to enable the core abstraction to be Unity agnostic. Inheritance Object Extensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.SpatialAlignment Assembly : cs.temp.dll.dll Syntax public static class Extensions Methods AsNumericsQuaternion(UQuaternion) Converts a UnityEngine.Quaternion to a System.Numerics.Quaternion. Declaration public static Quaternion AsNumericsQuaternion(this UQuaternion input) Parameters Type Name Description UQuaternion input Returns Type Description Quaternion AsNumericsVector(UVector3) Converts a UnityEngine.Vector3. to a System.Numerics.Vector3. Declaration public static Vector3 AsNumericsVector(this UVector3 input) Parameters Type Name Description UVector3 input Returns Type Description Vector3 AsTask(CancellationToken) A simple helper to enable \"awaiting\" a CancellationToken by creating a task wrapping it. Declaration public static Task AsTask(this CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken The CancellationToken to await. Returns Type Description Task The task that can be awaited. AsUnityQuaternion(Quaternion) Converts a System.Numerics.Quaternion to a UnityEngine.Quaternion. Declaration public static UQuaternion AsUnityQuaternion(this Quaternion input) Parameters Type Name Description Quaternion input Returns Type Description UQuaternion AsUnityVector(Vector3) Converts a System.Numerics.Vector3 to a UnityEngine.Vector3. Declaration public static UVector3 AsUnityVector(this Vector3 input) Parameters Type Name Description Vector3 input Returns Type Description UVector3 CoordinateToWorldSpace(ISpatialCoordinate, UQuaternion) Converst coordinate space position to world space position. Declaration public static UQuaternion CoordinateToWorldSpace(this ISpatialCoordinate coordinate, UQuaternion quaternion) Parameters Type Name Description ISpatialCoordinate coordinate UQuaternion quaternion Returns Type Description UQuaternion CoordinateToWorldSpace(ISpatialCoordinate, UVector3) Converst coordinate space position to world space position. Declaration public static UVector3 CoordinateToWorldSpace(this ISpatialCoordinate coordinate, UVector3 vector) Parameters Type Name Description ISpatialCoordinate coordinate UVector3 vector Returns Type Description UVector3 FireAndForget(Task) Gracefully allows a task to continue running without loosing any exceptions thrown or requireing to await it. Declaration public static void FireAndForget(this Task task) Parameters Type Name Description Task task The task that should be wrapped. FireAndForget<T>(Task<T>) Gracefully allows a task to continue running without loosing any exceptions thrown or requireing to await it. Declaration public static void FireAndForget<T>(this Task<T> task) Parameters Type Name Description Task <T> task The task that should be wrapped. Type Parameters Name Description T GetAwaiter(SynchronizationContext) Required extension method to enable awaiting on SynchronizationContext . Declaration public static Extensions.SynchronizationContextAwaiter GetAwaiter(this SynchronizationContext context) Parameters Type Name Description SynchronizationContext context Context to await (switch execution flow to). Returns Type Description Extensions.SynchronizationContextAwaiter Awaiter for the \"await\" keyword to work. IgnoreCancellation(Task) Prevents TaskCanceledException or OperationCanceledException from trickling up. Declaration public static Task IgnoreCancellation(this Task task) Parameters Type Name Description Task task The task to ignore exceptions for. Returns Type Description Task A wrapping task for the given task. IgnoreCancellation<T>(Task<T>, T) Prevents TaskCanceledException or OperationCanceledException from trickling up. Declaration public static Task<T> IgnoreCancellation<T>(this Task<T> task, T defaultCancellationReturn = null) Parameters Type Name Description Task <T> task The task to ignore exceptions for. T defaultCancellationReturn The default value to return in case the task is cancelled. Returns Type Description Task <T> A wrapping task for the given task. Type Parameters Name Description T The result type of the Task. TryCreateCoordinateAsync(ISpatialCoordinateService, UVector3, UQuaternion, CancellationToken) Attempts to create a new coordinate with this service. Declaration public static Task<ISpatialCoordinate> TryCreateCoordinateAsync(this ISpatialCoordinateService spatialCoordinateService, UVector3 vector, UQuaternion quaternion, CancellationToken cancellationToken) Parameters Type Name Description ISpatialCoordinateService spatialCoordinateService UVector3 vector UQuaternion quaternion CancellationToken cancellationToken Returns Type Description Task < ISpatialCoordinate > The coordinate if the coordinate was succesfully created, otherwise null. Unless(Task, CancellationToken) The task will be awaited until the cancellation token is triggered. (await task unless cancelled). Declaration public static Task Unless(this Task task, CancellationToken cancellationToken) Parameters Type Name Description Task task The task to await. CancellationToken cancellationToken The cancellation token to stop awaiting. Returns Type Description Task The task that can be awaited unless the cancellation token is triggered. Remarks This is different from cancelling the task. The use case is to enable a calling method bow out of the await that it can't cancel, but doesn't require completion/cancellation in order to cancel it's own execution. Unless<T>(Task<T>, CancellationToken) The task will be awaited until the cancellation token is triggered. (await task unless cancelled). Declaration public static Task<T> Unless<T>(this Task<T> task, CancellationToken cancellationToken) Parameters Type Name Description Task <T> task The task to await. CancellationToken cancellationToken The cancellation token to stop awaiting. Returns Type Description Task <T> The task that can be awaited unless the cancellation token is triggered. Type Parameters Name Description T Remarks This is different from cancelling the task. The use case is to enable a calling method bow out of the await that it can't cancel, but doesn't require completion/cancellation in order to cancel it's own execution. WorldToCoordinateSpace(ISpatialCoordinate, UQuaternion) Converst world space rotation to coordinate space rotation. Declaration public static UQuaternion WorldToCoordinateSpace(this ISpatialCoordinate coordinate, UQuaternion quaternion) Parameters Type Name Description ISpatialCoordinate coordinate UQuaternion quaternion Returns Type Description UQuaternion WorldToCoordinateSpace(ISpatialCoordinate, UVector3) Converst world space position to coordinate space position. Declaration public static UVector3 WorldToCoordinateSpace(this ISpatialCoordinate coordinate, UVector3 vector) Parameters Type Name Description ISpatialCoordinate coordinate UVector3 vector Returns Type Description UVector3"
  },
  "api/Microsoft.MixedReality.SpatialAlignment.Extensions.SynchronizationContextAwaiter.html": {
    "href": "api/Microsoft.MixedReality.SpatialAlignment.Extensions.SynchronizationContextAwaiter.html",
    "title": "Struct Extensions.SynchronizationContextAwaiter | MixedReality-SpectatorView Documentation",
    "keywords": "Struct Extensions.SynchronizationContextAwaiter Helper class to enable await on SynchronizationContext . This is useful if you want to switch execution flow of an async function to a different thread, like Unity game thread for example. Implements INotifyCompletion Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.SpatialAlignment Assembly : cs.temp.dll.dll Syntax public struct SynchronizationContextAwaiter : INotifyCompletion Constructors SynchronizationContextAwaiter(SynchronizationContext) Declaration public SynchronizationContextAwaiter(SynchronizationContext context) Parameters Type Name Description SynchronizationContext context Properties IsCompleted Declaration public bool IsCompleted { get; } Property Value Type Description Boolean Methods GetResult() Declaration public void GetResult() OnCompleted(Action) Declaration public void OnCompleted(Action continuation) Parameters Type Name Description Action continuation Implements INotifyCompletion"
  },
  "api/Microsoft.MixedReality.SpatialAlignment.DisposableBase.html": {
    "href": "api/Microsoft.MixedReality.SpatialAlignment.DisposableBase.html",
    "title": "Class DisposableBase | MixedReality-SpectatorView Documentation",
    "keywords": "Class DisposableBase This is a base class for common IDisposable implementation. Inheritance Object DisposableBase SpatialCoordinateServiceBase<TKey> Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.SpatialAlignment Assembly : cs.temp.dll.dll Syntax public class DisposableBase : IDisposable Remarks Follows https://docs.microsoft.com/en-us/dotnet/standard/garbage-collection/implementing-dispose Properties IsDisposed Is the current object disposed. Declaration public bool IsDisposed { get; } Property Value Type Description Boolean ObjectName The name of the current object. Declaration protected virtual string ObjectName { get; } Property Value Type Description String Methods Dispose() Dispose the current object. Declaration public void Dispose() Finalize() Declaration protected void Finalize() OnManagedDispose() Override this method to dispose of managed objects. Declaration protected virtual void OnManagedDispose() OnUnmanagedDispose() Override this method to dispose of unmanaged objects. Declaration protected virtual void OnUnmanagedDispose() ThrowIfDisposed() A helper method to throw if the current object is disposed. Declaration protected void ThrowIfDisposed() Implements System.IDisposable"
  },
  "api/Microsoft.MixedReality.PhotoCapture.StreamCompare.html": {
    "href": "api/Microsoft.MixedReality.PhotoCapture.StreamCompare.html",
    "title": "Enum StreamCompare | MixedReality-SpectatorView Documentation",
    "keywords": "Enum StreamCompare Used for comparisons in stream selection Namespace : Microsoft.MixedReality.PhotoCapture Assembly : cs.temp.dll.dll Syntax public enum StreamCompare Fields Name Description EqualTo Will select streams with the property equal to the passed in argument(s) GreaterThan Will select streams with the property greater than the passed in argument(s) LessThan Will select streams with the property less than the passed in argument(s)"
  },
  "api/Microsoft.MixedReality.PhotoCapture.OnFrameCapturedHandler.html": {
    "href": "api/Microsoft.MixedReality.PhotoCapture.OnFrameCapturedHandler.html",
    "title": "Delegate OnFrameCapturedHandler | MixedReality-SpectatorView Documentation",
    "keywords": "Delegate OnFrameCapturedHandler Handler delegate for capturing frames Namespace : Microsoft.MixedReality.PhotoCapture Assembly : cs.temp.dll.dll Syntax public delegate void OnFrameCapturedHandler(HoloLensCamera sender, CameraFrame frame); Parameters Type Name Description HoloLensCamera sender The camera object that captured the frame CameraFrame frame The captured frame"
  },
  "api/Microsoft.MixedReality.PhotoCapture.OnCameraInitializedHandler.html": {
    "href": "api/Microsoft.MixedReality.PhotoCapture.OnCameraInitializedHandler.html",
    "title": "Delegate OnCameraInitializedHandler | MixedReality-SpectatorView Documentation",
    "keywords": "Delegate OnCameraInitializedHandler Handler delegate for initialization complete callback. Namespace : Microsoft.MixedReality.PhotoCapture Assembly : cs.temp.dll.dll Syntax public delegate void OnCameraInitializedHandler(HoloLensCamera sender, bool initializeSuccessful); Parameters Type Name Description HoloLensCamera sender Boolean initializeSuccessful"
  },
  "api/Microsoft.MixedReality.PhotoCapture.CaptureMode.html": {
    "href": "api/Microsoft.MixedReality.PhotoCapture.CaptureMode.html",
    "title": "Enum CaptureMode | MixedReality-SpectatorView Documentation",
    "keywords": "Enum CaptureMode The mode to run the camera in Namespace : Microsoft.MixedReality.PhotoCapture Assembly : cs.temp.dll.dll Syntax public enum CaptureMode Fields Name Description Continuous All frames are streamed, uses standard video mode. Single Standard photo mode. SingleLowLatency Starts video stream and just grabs latest frame when call made to take photo."
  },
  "api/Microsoft.MixedReality.PhotoCapture.CameraState.html": {
    "href": "api/Microsoft.MixedReality.PhotoCapture.CameraState.html",
    "title": "Enum CameraState | MixedReality-SpectatorView Documentation",
    "keywords": "Enum CameraState Namespace : Microsoft.MixedReality.PhotoCapture Assembly : cs.temp.dll.dll Syntax public enum CameraState Fields Name Description CapturingContinuous CapturingSingle Initialized Initializing Ready Starting Stopping"
  },
  "api/Microsoft.MixedReality.PhotoCapture.CameraIntrinsics.html": {
    "href": "api/Microsoft.MixedReality.PhotoCapture.CameraIntrinsics.html",
    "title": "Class CameraIntrinsics | MixedReality-SpectatorView Documentation",
    "keywords": "Class CameraIntrinsics Contains information on camera intrinsic parameters. Note: This class wraps logic in Windows.Media.Devices.Core.CameraIntrinsics for use in Unity. Inheritance Object CameraIntrinsics Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.PhotoCapture Assembly : cs.temp.dll.dll Syntax [Serializable] public class CameraIntrinsics Constructors CameraIntrinsics() Declaration public CameraIntrinsics() CameraIntrinsics(Vector2, UInt32, UInt32, Vector2, Vector3, Vector2, Matrix4x4) CameraIntrinsics constructor Declaration public CameraIntrinsics(Vector2 focalLength, uint imageWidth, uint imageHeight, Vector2 principalPoint, Vector3 radialDistortion, Vector2 tangentialDistortion, Matrix4x4 undistortedProjectionTransform) Parameters Type Name Description Vector2 focalLength focal length for the camera UInt32 imageWidth image width in pixels UInt32 imageHeight image height in pixels Vector2 principalPoint principal point for the camera Vector3 radialDistortion radial distortion for the camera Vector2 tangentialDistortion tangential distortion for the camera Matrix4x4 undistortedProjectionTransform Undistorted projection transform for the camera Fields FocalLength Gets the focal length of the camera. Declaration public Vector2 FocalLength Field Value Type Description Vector2 ImageHeight Gets the image height of the camera, in pixels. Declaration public uint ImageHeight Field Value Type Description UInt32 ImageWidth Gets the image width of the camera, in pixels. Declaration public uint ImageWidth Field Value Type Description UInt32 PrincipalPoint Gets the principal point of the camera. Declaration public Vector2 PrincipalPoint Field Value Type Description Vector2 RadialDistortion Gets the radial distortion coefficient of the camera. Declaration public Vector3 RadialDistortion Field Value Type Description Vector3 TangentialDistortion Gets the tangential distortion coefficient of the camera. Declaration public Vector2 TangentialDistortion Field Value Type Description Vector2 UndistortedProjectionTransform Gets a matrix that transforms a 3D point to video frame pixel coordinates without compensating for the distortion model of the camera.The 2D point resulting from this transformation will not accurately map to the pixel coordinate in a video frame unless the app applies its own distortion compensation.This is useful for apps that choose to implement GPU-based distortion compensation instead of using UndistortPoint, which uses the CPU to compute the distortion compensation. Declaration public Matrix4x4 UndistortedProjectionTransform Field Value Type Description Matrix4x4 Methods ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString()"
  },
  "api/Microsoft.MixedReality.PhotoCapture.CameraExtrinsics.html": {
    "href": "api/Microsoft.MixedReality.PhotoCapture.CameraExtrinsics.html",
    "title": "Class CameraExtrinsics | MixedReality-SpectatorView Documentation",
    "keywords": "Class CameraExtrinsics Camera extrinsics helper class Inheritance Object CameraExtrinsics Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.PhotoCapture Assembly : cs.temp.dll.dll Syntax [Serializable] public class CameraExtrinsics Fields ViewFromWorld Camera's view from world matrix Declaration public Matrix4x4 ViewFromWorld Field Value Type Description Matrix4x4 Methods ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString()"
  },
  "api/Microsoft.MixedReality.SpectatorView.VideoRecordingFrameLayout.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.VideoRecordingFrameLayout.html",
    "title": "Enum VideoRecordingFrameLayout | MixedReality-SpectatorView Documentation",
    "keywords": "Enum VideoRecordingFrameLayout Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public enum VideoRecordingFrameLayout Fields Name Description Composite Quad"
  },
  "api/Microsoft.MixedReality.SpectatorView.TransformObserver.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.TransformObserver.html",
    "title": "Class TransformObserver | MixedReality-SpectatorView Documentation",
    "keywords": "Class TransformObserver Inheritance Object ComponentObserver ComponentObserver < Transform > TransformObserver Implements IComponentObserver Inherited Members ComponentObserver<Transform>.attachedComponent ComponentObserver<Transform>.ComponentType ComponentObserver<Transform>.Awake() ComponentObserver.OnDestroy() Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public class TransformObserver : ComponentObserver<Transform>, IComponentObserver Properties Id Unique id for the transform Declaration public short Id { get; set; } Property Value Type Description Int16 Methods LerpRead(BinaryReader, Single) Reads a network message and updates local state data using interpolation Declaration public void LerpRead(BinaryReader message, float lerpVal) Parameters Type Name Description BinaryReader message Received payload Single lerpVal interpolation value Read(SocketEndpoint, BinaryReader) Reads a network message and updates local state data Declaration public override void Read(SocketEndpoint sendingEndpoint, BinaryReader message) Parameters Type Name Description SocketEndpoint sendingEndpoint Sender endpoint BinaryReader message Received payload Overrides ComponentObserver.Read(SocketEndpoint, BinaryReader) Implements IComponentObserver"
  },
  "api/Microsoft.MixedReality.SpectatorView.TransformBroadcasterService.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.TransformBroadcasterService.html",
    "title": "Class TransformBroadcasterService | MixedReality-SpectatorView Documentation",
    "keywords": "Class TransformBroadcasterService Service that manages TransformBroadcaster s Inheritance Object Singleton < TransformBroadcasterService > ComponentBroadcasterService < TransformBroadcasterService , TransformObserver > TransformBroadcasterService Implements IComponentBroadcasterService Inherited Members ComponentBroadcasterService<TransformBroadcasterService, TransformObserver>.Create(GameObject) ComponentBroadcasterService<TransformBroadcasterService, TransformObserver>.Destroy(GameObject) ComponentBroadcasterService<TransformBroadcasterService, TransformObserver>.Read(SocketEndpoint, BinaryReader, GameObject) ComponentBroadcasterService<TransformBroadcasterService, TransformObserver>.LerpRead(BinaryReader, GameObject, Single) ComponentBroadcasterService<TransformBroadcasterService, TransformObserver>.WriteHeader(BinaryWriter, IComponentBroadcaster, ComponentBroadcasterChangeType) ComponentBroadcasterService<TransformBroadcasterService, TransformObserver>.WriteHeader(BinaryWriter, TransformObserver, ComponentBroadcasterChangeType) ComponentBroadcasterService<TransformBroadcasterService, TransformObserver>.GetID() Singleton<TransformBroadcasterService>.IsInitialized Singleton<TransformBroadcasterService>.Awake() Singleton<TransformBroadcasterService>.OnDestroy() Singleton<TransformBroadcasterService>.Instance Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public class TransformBroadcasterService : ComponentBroadcasterService<TransformBroadcasterService, TransformObserver>, IComponentBroadcasterService Methods Destroy(GameObject) Cleans up state synchronization logic for the provided game object Declaration public override void Destroy(GameObject mirror) Parameters Type Name Description GameObject mirror Overrides Microsoft.MixedReality.SpectatorView.ComponentBroadcasterService<Microsoft.MixedReality.SpectatorView.TransformBroadcasterService, Microsoft.MixedReality.SpectatorView.TransformObserver>.Destroy(GameObject) GetID() Declaration public override ShortID GetID() Returns Type Description ShortID Overrides Microsoft.MixedReality.SpectatorView.ComponentBroadcasterService<Microsoft.MixedReality.SpectatorView.TransformBroadcasterService, Microsoft.MixedReality.SpectatorView.TransformObserver>.GetID() LerpRead(BinaryReader, GameObject, Single) Provides a network message to the game objects transform observer for interpolation Declaration public override void LerpRead(BinaryReader message, GameObject mirror, float lerpVal) Parameters Type Name Description BinaryReader message network message GameObject mirror game object that has transform observer Single lerpVal interpolation value Overrides Microsoft.MixedReality.SpectatorView.ComponentBroadcasterService<Microsoft.MixedReality.SpectatorView.TransformBroadcasterService, Microsoft.MixedReality.SpectatorView.TransformObserver>.LerpRead(BinaryReader, GameObject, System.Single) Implements IComponentBroadcasterService"
  },
  "api/Microsoft.MixedReality.SpectatorView.TransformBroadcasterChangeType.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.TransformBroadcasterChangeType.html",
    "title": "Enum TransformBroadcasterChangeType | MixedReality-SpectatorView Documentation",
    "keywords": "Enum TransformBroadcasterChangeType Types of changes that occur for a TransformBroadcaster Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax [Flags] public enum TransformBroadcasterChangeType : byte Fields Name Description IsActive Layer Name Parent Position RectTransform Rotation Scale"
  },
  "api/Microsoft.MixedReality.SpectatorView.TransformBroadcaster.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.TransformBroadcaster.html",
    "title": "Class TransformBroadcaster | MixedReality-SpectatorView Documentation",
    "keywords": "Class TransformBroadcaster A IComponentBroadcaster specifically for transforms. Inheritance Object ComponentBroadcaster < TransformBroadcasterService , TransformBroadcasterChangeType > TransformBroadcaster Implements IComponentBroadcaster Inherited Members ComponentBroadcaster<TransformBroadcasterService, TransformBroadcasterChangeType>.transformBroadcaster ComponentBroadcaster<TransformBroadcasterService, TransformBroadcasterChangeType>.TransformBroadcaster ComponentBroadcaster<TransformBroadcasterService, TransformBroadcasterChangeType>.ComponentBroadcasterService ComponentBroadcaster<TransformBroadcasterService, TransformBroadcasterChangeType>.IComponentBroadcaster.ComponentBroadcasterService ComponentBroadcaster<TransformBroadcasterService, TransformBroadcasterChangeType>.Awake() ComponentBroadcaster<TransformBroadcasterService, TransformBroadcasterChangeType>.OnDestroy() ComponentBroadcaster<TransformBroadcasterService, TransformBroadcasterChangeType>.UpdateWhenDisabled ComponentBroadcaster<TransformBroadcasterService, TransformBroadcasterChangeType>.ResetFrame() ComponentBroadcaster<TransformBroadcasterService, TransformBroadcasterChangeType>.ShouldSendChanges(SocketEndpoint) ComponentBroadcaster<TransformBroadcasterService, TransformBroadcasterChangeType>.ProcessNewConnections(SocketEndpointConnectionDelta) ComponentBroadcaster<TransformBroadcasterService, TransformBroadcasterChangeType>.ProcessNewConnections(IEnumerable<SocketEndpoint>) ComponentBroadcaster<TransformBroadcasterService, TransformBroadcasterChangeType>.OnFrameCompleted(SocketEndpointConnectionDelta) ComponentBroadcaster<TransformBroadcasterService, TransformBroadcasterChangeType>.SendComponentCreation(IEnumerable<SocketEndpoint>) ComponentBroadcaster<TransformBroadcasterService, TransformBroadcasterChangeType>.OnInitialized() ComponentBroadcaster<TransformBroadcasterService, TransformBroadcasterChangeType>.ShouldUpdateFrame(SocketEndpoint) ComponentBroadcaster<TransformBroadcasterService, TransformBroadcasterChangeType>.BeginUpdatingFrame(SocketEndpointConnectionDelta) ComponentBroadcaster<TransformBroadcasterService, TransformBroadcasterChangeType>.EndUpdatingFrame() ComponentBroadcaster<TransformBroadcasterService, TransformBroadcasterChangeType>.SendCompleteChanges(IEnumerable<SocketEndpoint>) ComponentBroadcaster<TransformBroadcasterService, TransformBroadcasterChangeType>.CalculateDeltaChanges() ComponentBroadcaster<TransformBroadcasterService, TransformBroadcasterChangeType>.HasChanges(TransformBroadcasterChangeType) ComponentBroadcaster<TransformBroadcasterService, TransformBroadcasterChangeType>.SendDeltaChanges(IEnumerable<SocketEndpoint>, TransformBroadcasterChangeType) ComponentBroadcaster<TransformBroadcasterService, TransformBroadcasterChangeType>.RemoveDisconnectedEndpoints(IEnumerable<SocketEndpoint>) Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public class TransformBroadcaster : ComponentBroadcaster<TransformBroadcasterService, TransformBroadcasterChangeType>, IComponentBroadcaster Fields SpectatorViewChildrenHiddenTag Declaration public const string SpectatorViewChildrenHiddenTag = \"SpectatorViewChildrenHidden\" Field Value Type Description String SpectatorViewHiddenTag Declaration public const string SpectatorViewHiddenTag = \"SpectatorViewHidden\" Field Value Type Description String Properties BlockedConnections SocketEndpoint connections that are currently blocked Declaration public ISet<SocketEndpoint> BlockedConnections { get; } Property Value Type Description ISet < SocketEndpoint > CachedName Associated game object's name Declaration public string CachedName { get; } Property Value Type Description String Id Returns the unique id for the broadcasted transform Declaration public short Id { get; } Property Value Type Description Int16 Layer Associated game object's layer Declaration public int Layer { get; } Property Value Type Description Int32 NullTransformId Returns an id that can be used for initialization checks Declaration public static short NullTransformId { get; } Property Value Type Description Int16 ParentId Parent transform's id, returns NullTransformId if no parent transform exists Declaration public short ParentId { get; } Property Value Type Description Int16 SynchronizedIsActive Returns true if the associated game object is active in the scene, otherwise false Declaration public bool SynchronizedIsActive { get; } Property Value Type Description Boolean UpdateWhenDisabled Declaration protected override bool UpdateWhenDisabled { get; } Property Value Type Description Boolean Overrides Microsoft.MixedReality.SpectatorView.ComponentBroadcaster<Microsoft.MixedReality.SpectatorView.TransformBroadcasterService, Microsoft.MixedReality.SpectatorView.TransformBroadcasterChangeType>.UpdateWhenDisabled Methods Awake() Declaration protected override void Awake() Overrides Microsoft.MixedReality.SpectatorView.ComponentBroadcaster<Microsoft.MixedReality.SpectatorView.TransformBroadcasterService, Microsoft.MixedReality.SpectatorView.TransformBroadcasterChangeType>.Awake() BeginUpdatingFrame(SocketEndpointConnectionDelta) Declaration protected override void BeginUpdatingFrame(SocketEndpointConnectionDelta connectionDelta) Parameters Type Name Description SocketEndpointConnectionDelta connectionDelta Overrides Microsoft.MixedReality.SpectatorView.ComponentBroadcaster<Microsoft.MixedReality.SpectatorView.TransformBroadcasterService, Microsoft.MixedReality.SpectatorView.TransformBroadcasterChangeType>.BeginUpdatingFrame(Microsoft.MixedReality.SpectatorView.SocketEndpointConnectionDelta) CalculateDeltaChanges() Declaration protected override TransformBroadcasterChangeType CalculateDeltaChanges() Returns Type Description TransformBroadcasterChangeType Overrides Microsoft.MixedReality.SpectatorView.ComponentBroadcaster<Microsoft.MixedReality.SpectatorView.TransformBroadcasterService, Microsoft.MixedReality.SpectatorView.TransformBroadcasterChangeType>.CalculateDeltaChanges() EndUpdatingFrame() Declaration protected override void EndUpdatingFrame() Overrides Microsoft.MixedReality.SpectatorView.ComponentBroadcaster<Microsoft.MixedReality.SpectatorView.TransformBroadcasterService, Microsoft.MixedReality.SpectatorView.TransformBroadcasterChangeType>.EndUpdatingFrame() HasChanges(TransformBroadcasterChangeType) Declaration protected override bool HasChanges(TransformBroadcasterChangeType changeFlags) Parameters Type Name Description TransformBroadcasterChangeType changeFlags Returns Type Description Boolean Overrides Microsoft.MixedReality.SpectatorView.ComponentBroadcaster<Microsoft.MixedReality.SpectatorView.TransformBroadcasterService, Microsoft.MixedReality.SpectatorView.TransformBroadcasterChangeType>.HasChanges(Microsoft.MixedReality.SpectatorView.TransformBroadcasterChangeType) HasFlag(TransformBroadcasterChangeType, TransformBroadcasterChangeType) Returns true if the provided change type contains the specified flag, otherwise false. Declaration public static bool HasFlag(TransformBroadcasterChangeType changeType, TransformBroadcasterChangeType flag) Parameters Type Name Description TransformBroadcasterChangeType changeType Change type TransformBroadcasterChangeType flag flag to check for Returns Type Description Boolean Returns true if the provided change type contains the specified flag, otherwise false. OnDestroy() Declaration protected override void OnDestroy() Overrides Microsoft.MixedReality.SpectatorView.ComponentBroadcaster<Microsoft.MixedReality.SpectatorView.TransformBroadcasterService, Microsoft.MixedReality.SpectatorView.TransformBroadcasterChangeType>.OnDestroy() SendCompleteChanges(IEnumerable<SocketEndpoint>) Declaration protected override void SendCompleteChanges(IEnumerable<SocketEndpoint> endpoints) Parameters Type Name Description IEnumerable < SocketEndpoint > endpoints Overrides Microsoft.MixedReality.SpectatorView.ComponentBroadcaster<Microsoft.MixedReality.SpectatorView.TransformBroadcasterService, Microsoft.MixedReality.SpectatorView.TransformBroadcasterChangeType>.SendCompleteChanges(IEnumerable<Microsoft.MixedReality.SpectatorView.SocketEndpoint>) SendComponentCreation(IEnumerable<SocketEndpoint>) Declaration protected override void SendComponentCreation(IEnumerable<SocketEndpoint> newConnections) Parameters Type Name Description IEnumerable < SocketEndpoint > newConnections Overrides Microsoft.MixedReality.SpectatorView.ComponentBroadcaster<Microsoft.MixedReality.SpectatorView.TransformBroadcasterService, Microsoft.MixedReality.SpectatorView.TransformBroadcasterChangeType>.SendComponentCreation(IEnumerable<Microsoft.MixedReality.SpectatorView.SocketEndpoint>) SendDeltaChanges(IEnumerable<SocketEndpoint>, TransformBroadcasterChangeType) Declaration protected override void SendDeltaChanges(IEnumerable<SocketEndpoint> endpoints, TransformBroadcasterChangeType changeFlags) Parameters Type Name Description IEnumerable < SocketEndpoint > endpoints TransformBroadcasterChangeType changeFlags Overrides Microsoft.MixedReality.SpectatorView.ComponentBroadcaster<Microsoft.MixedReality.SpectatorView.TransformBroadcasterService, Microsoft.MixedReality.SpectatorView.TransformBroadcasterChangeType>.SendDeltaChanges(IEnumerable<Microsoft.MixedReality.SpectatorView.SocketEndpoint>, Microsoft.MixedReality.SpectatorView.TransformBroadcasterChangeType) ShouldSendTransformInHierarchy(SocketEndpoint) Returns true if the provided endpoint should receive a transform update, otherwise false Declaration public bool ShouldSendTransformInHierarchy(SocketEndpoint endpoint) Parameters Type Name Description SocketEndpoint endpoint network connection to potentially send transform update Returns Type Description Boolean True if the provided endpoint should receive a transform update, otherwise false ShouldUpdateFrame(SocketEndpoint) Declaration protected override bool ShouldUpdateFrame(SocketEndpoint endpoint) Parameters Type Name Description SocketEndpoint endpoint Returns Type Description Boolean Overrides Microsoft.MixedReality.SpectatorView.ComponentBroadcaster<Microsoft.MixedReality.SpectatorView.TransformBroadcasterService, Microsoft.MixedReality.SpectatorView.TransformBroadcasterChangeType>.ShouldUpdateFrame(Microsoft.MixedReality.SpectatorView.SocketEndpoint) WriteChildHierarchyTree(BinaryWriter) Writes child transforms hierarchy to network message Declaration public void WriteChildHierarchyTree(BinaryWriter message) Parameters Type Name Description BinaryWriter message Implements IComponentBroadcaster"
  },
  "api/Microsoft.MixedReality.SpectatorView.SpatialCoordinateSystemManager.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.SpatialCoordinateSystemManager.html",
    "title": "Class SpatialCoordinateSystemManager | MixedReality-SpectatorView Documentation",
    "keywords": "Class SpatialCoordinateSystemManager Inheritance Object Singleton < SpatialCoordinateSystemManager > SpatialCoordinateSystemManager Inherited Members Singleton<SpatialCoordinateSystemManager>.IsInitialized Singleton<SpatialCoordinateSystemManager>.Awake() Singleton<SpatialCoordinateSystemManager>.Instance Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public class SpatialCoordinateSystemManager : Singleton<SpatialCoordinateSystemManager> Fields debugVisual Game Object to render at spatial coordinate locations when showing debug visuals. Declaration public GameObject debugVisual Field Value Type Description GameObject debugVisualScale Debug visual scale. Declaration public float debugVisualScale Field Value Type Description Single showDebugVisuals Check to show debug visuals. Declaration public bool showDebugVisuals Field Value Type Description Boolean Properties Localizers Declaration public IReadOnlyCollection<ISpatialLocalizer> Localizers { get; } Property Value Type Description IReadOnlyCollection < ISpatialLocalizer > Methods LocalizeAsync(SocketEndpoint, Guid, ISpatialLocalizationSettings) Declaration public Task<bool> LocalizeAsync(SocketEndpoint socketEndpoint, Guid spatialLocalizerID, ISpatialLocalizationSettings settings) Parameters Type Name Description SocketEndpoint socketEndpoint Guid spatialLocalizerID ISpatialLocalizationSettings settings Returns Type Description Task < Boolean > OnDestroy() Declaration protected override void OnDestroy() Overrides Microsoft.MixedReality.SpectatorView.Singleton<Microsoft.MixedReality.SpectatorView.SpatialCoordinateSystemManager>.OnDestroy() RegisterNetworkManager(INetworkManager) Declaration public void RegisterNetworkManager(INetworkManager networkManager) Parameters Type Name Description INetworkManager networkManager RegisterSpatialLocalizer(ISpatialLocalizer) Declaration public void RegisterSpatialLocalizer(ISpatialLocalizer localizer) Parameters Type Name Description ISpatialLocalizer localizer RunRemoteLocalizationAsync(SocketEndpoint, Guid, ISpatialLocalizationSettings) Declaration public Task<bool> RunRemoteLocalizationAsync(SocketEndpoint socketEndpoint, Guid spatialLocalizerID, ISpatialLocalizationSettings settings) Parameters Type Name Description SocketEndpoint socketEndpoint Guid spatialLocalizerID ISpatialLocalizationSettings settings Returns Type Description Task < Boolean > TryGetSpatialCoordinateSystemParticipant(SocketEndpoint, out SpatialCoordinateSystemParticipant) Declaration public bool TryGetSpatialCoordinateSystemParticipant(SocketEndpoint connectedEndpoint, out SpatialCoordinateSystemParticipant participant) Parameters Type Name Description SocketEndpoint connectedEndpoint SpatialCoordinateSystemParticipant participant Returns Type Description Boolean UnregisterNetworkManager(INetworkManager) Declaration public void UnregisterNetworkManager(INetworkManager networkManager) Parameters Type Name Description INetworkManager networkManager UnregisterSpatialLocalizer(ISpatialLocalizer) Declaration public void UnregisterSpatialLocalizer(ISpatialLocalizer localizer) Parameters Type Name Description ISpatialLocalizer localizer Events ParticipantConnected Declaration public event Action<SpatialCoordinateSystemParticipant> ParticipantConnected Event Type Type Description Action < SpatialCoordinateSystemParticipant > ParticipantDisconnected Declaration public event Action<SpatialCoordinateSystemParticipant> ParticipantDisconnected Event Type Type Description Action < SpatialCoordinateSystemParticipant >"
  },
  "api/Microsoft.MixedReality.SpectatorView.SpatialAnchorsLocalizer.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.SpatialAnchorsLocalizer.html",
    "title": "Class SpatialAnchorsLocalizer | MixedReality-SpectatorView Documentation",
    "keywords": "Class SpatialAnchorsLocalizer This is the localization mechanism for enabling anchor exchange/localization through Azure Spatial Anchors. Inheritance Object SpatialLocalizer < SpatialAnchorsConfiguration > SpatialAnchorsLocalizer Implements ISpatialLocalizer Inherited Members SpatialLocalizer<SpatialAnchorsConfiguration>.lockObject SpatialLocalizer<SpatialAnchorsConfiguration>.debugLogging SpatialLocalizer<SpatialAnchorsConfiguration>.DebugLog(String) SpatialLocalizer<SpatialAnchorsConfiguration>.Start() SpatialLocalizer<SpatialAnchorsConfiguration>.OnDestroy() SpatialLocalizer<SpatialAnchorsConfiguration>.CreateDefaultSettings() SpatialLocalizer<SpatialAnchorsConfiguration>.ISpatialLocalizer.TryDeserializeSettings(BinaryReader, ISpatialLocalizationSettings) SpatialLocalizer<SpatialAnchorsConfiguration>.ISpatialLocalizer.TryCreateLocalizationSession(IPeerConnection, ISpatialLocalizationSettings, ISpatialLocalizationSession) Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public class SpatialAnchorsLocalizer : SpatialLocalizer<SpatialAnchorsConfiguration>, ISpatialLocalizer Properties DisplayName Declaration public override string DisplayName { get; } Property Value Type Description String Overrides Microsoft.MixedReality.SpectatorView.SpatialLocalizer<Microsoft.MixedReality.SpectatorView.SpatialAnchorsConfiguration>.DisplayName IsSupported Declaration protected override bool IsSupported { get; } Property Value Type Description Boolean Overrides Microsoft.MixedReality.SpectatorView.SpatialLocalizer<Microsoft.MixedReality.SpectatorView.SpatialAnchorsConfiguration>.IsSupported SpatialLocalizerId Declaration public override Guid SpatialLocalizerId { get; } Property Value Type Description Guid Overrides Microsoft.MixedReality.SpectatorView.SpatialLocalizer<Microsoft.MixedReality.SpectatorView.SpatialAnchorsConfiguration>.SpatialLocalizerId Methods TryCreateLocalizationSession(IPeerConnection, SpatialAnchorsConfiguration, out ISpatialLocalizationSession) Declaration public override bool TryCreateLocalizationSession(IPeerConnection peerConnection, SpatialAnchorsConfiguration settings, out ISpatialLocalizationSession session) Parameters Type Name Description IPeerConnection peerConnection SpatialAnchorsConfiguration settings ISpatialLocalizationSession session Returns Type Description Boolean Overrides Microsoft.MixedReality.SpectatorView.SpatialLocalizer<Microsoft.MixedReality.SpectatorView.SpatialAnchorsConfiguration>.TryCreateLocalizationSession(Microsoft.MixedReality.SpectatorView.IPeerConnection, Microsoft.MixedReality.SpectatorView.SpatialAnchorsConfiguration, Microsoft.MixedReality.SpectatorView.ISpatialLocalizationSession) TryDeserializeSettings(BinaryReader, out SpatialAnchorsConfiguration) Declaration public override bool TryDeserializeSettings(BinaryReader reader, out SpatialAnchorsConfiguration settings) Parameters Type Name Description BinaryReader reader SpatialAnchorsConfiguration settings Returns Type Description Boolean Overrides Microsoft.MixedReality.SpectatorView.SpatialLocalizer<Microsoft.MixedReality.SpectatorView.SpatialAnchorsConfiguration>.TryDeserializeSettings(BinaryReader, Microsoft.MixedReality.SpectatorView.SpatialAnchorsConfiguration) Implements ISpatialLocalizer"
  },
  "api/Microsoft.MixedReality.SpectatorView.SpatialAnchorsCoordinateLocalizationInitializer.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.SpatialAnchorsCoordinateLocalizationInitializer.html",
    "title": "Class SpatialAnchorsCoordinateLocalizationInitializer | MixedReality-SpectatorView Documentation",
    "keywords": "Class SpatialAnchorsCoordinateLocalizationInitializer Inheritance Object SpatialLocalizationInitializer SpatialAnchorsCoordinateLocalizationInitializer Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public class SpatialAnchorsCoordinateLocalizationInitializer : SpatialLocalizationInitializer Properties PeerSpatialLocalizerId Declaration public override Guid PeerSpatialLocalizerId { get; } Property Value Type Description Guid Overrides SpatialLocalizationInitializer.PeerSpatialLocalizerId Methods RunLocalization(SpatialCoordinateSystemParticipant) Declaration public override void RunLocalization(SpatialCoordinateSystemParticipant participant) Parameters Type Name Description SpatialCoordinateSystemParticipant participant Overrides SpatialLocalizationInitializer.RunLocalization(SpatialCoordinateSystemParticipant)"
  },
  "api/Microsoft.MixedReality.SpectatorView.ShortID.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.ShortID.html",
    "title": "Struct ShortID | MixedReality-SpectatorView Documentation",
    "keywords": "Struct ShortID Short id used for state synchronization that can be created from a three letter string Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public struct ShortID Constructors ShortID(String) Declaration public ShortID(string name) Parameters Type Name Description String name ShortID(UInt16) Declaration public ShortID(ushort value) Parameters Type Name Description UInt16 value Fields Empty Declaration public static readonly ShortID Empty Field Value Type Description ShortID Properties Value Declaration public ushort Value { get; } Property Value Type Description UInt16 Methods Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides ValueType.Equals(Object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode() ToString() Declaration public override string ToString() Returns Type Description String Overrides ValueType.ToString() Operators Equality(ShortID, ShortID) Declaration public static bool operator ==(ShortID first, ShortID second) Parameters Type Name Description ShortID first ShortID second Returns Type Description Boolean Inequality(ShortID, ShortID) Declaration public static bool operator !=(ShortID first, ShortID second) Parameters Type Name Description ShortID first ShortID second Returns Type Description Boolean"
  },
  "api/Microsoft.MixedReality.SpectatorView.Role.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.Role.html",
    "title": "Enum Role | MixedReality-SpectatorView Documentation",
    "keywords": "Enum Role Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public enum Role Fields Name Description Spectator User"
  },
  "api/Microsoft.MixedReality.SpectatorView.RecordingServiceVisual.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.RecordingServiceVisual.html",
    "title": "Class RecordingServiceVisual | MixedReality-SpectatorView Documentation",
    "keywords": "Class RecordingServiceVisual Inheritance Object RecordingServiceVisual Implements IRecordingServiceVisual IMobileOverlayVisualChild Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public class RecordingServiceVisual : MonoBehaviour, IRecordingServiceVisual, IMobileOverlayVisualChild Fields _buttonParent Game object that contains the record and preview buttons Declaration protected GameObject _buttonParent Field Value Type Description GameObject _countdownImage Image shown when counting down to start recording Declaration protected Image _countdownImage Field Value Type Description Image _countdownLength Length of time (in seconds) for countdown to start recording Declaration protected float _countdownLength Field Value Type Description Single _countdownText Text updated to contain current countdown value when starting recording Declaration protected Text _countdownText Field Value Type Description Text _previewButton Button used to view last recorded video Declaration protected Button _previewButton Field Value Type Description Button _recordButton Button that toggles starting/stopping recording Declaration protected Button _recordButton Field Value Type Description Button _startRecordingImage Image enabled on recording button when not recording Declaration protected Image _startRecordingImage Field Value Type Description Image _stopRecordingImage Image enabled on recording button when recording Declaration protected Image _stopRecordingImage Field Value Type Description Image Methods Hide() Hide any associated UI/GameObjects Declaration public void Hide() OnPreviewClick() Declaration public void OnPreviewClick() OnRecordClick() Declaration public void OnRecordClick() SetRecordingService(IRecordingService) Declaration public void SetRecordingService(IRecordingService recordingService) Parameters Type Name Description IRecordingService recordingService Show() Show any associated UI/GameObjects Declaration public void Show() Update() Declaration protected void Update() Events OverlayVisibilityRequest Event for requesting to show/hide spectator view UI Declaration public event OverlayVisibilityRequest OverlayVisibilityRequest Event Type Type Description OverlayVisibilityRequest Implements IRecordingServiceVisual IMobileOverlayVisualChild"
  },
  "api/Microsoft.MixedReality.SpectatorView.RecordingServiceVisual.RecordingState.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.RecordingServiceVisual.RecordingState.html",
    "title": "Enum RecordingServiceVisual.RecordingState | MixedReality-SpectatorView Documentation",
    "keywords": "Enum RecordingServiceVisual.RecordingState Screen recording states Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax protected enum RecordingState Fields Name Description Initializing Ready Recording"
  },
  "api/Microsoft.MixedReality.SpectatorView.QRCodeMarkerVisualSpatialLocalizer.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.QRCodeMarkerVisualSpatialLocalizer.html",
    "title": "Class QRCodeMarkerVisualSpatialLocalizer | MixedReality-SpectatorView Documentation",
    "keywords": "Class QRCodeMarkerVisualSpatialLocalizer Inheritance Object SpatialLocalizer < MarkerVisualLocalizationSettings > MarkerVisualSpatialLocalizer QRCodeMarkerVisualSpatialLocalizer Implements ISpatialLocalizer Inherited Members MarkerVisualSpatialLocalizer.MarkerVisualPrefab MarkerVisualSpatialLocalizer.markerVisual MarkerVisualSpatialLocalizer.TryCreateLocalizationSession(IPeerConnection, MarkerVisualLocalizationSettings, ISpatialLocalizationSession) MarkerVisualSpatialLocalizer.TryDeserializeSettings(BinaryReader, MarkerVisualLocalizationSettings) SpatialLocalizer<MarkerVisualLocalizationSettings>.lockObject SpatialLocalizer<MarkerVisualLocalizationSettings>.debugLogging SpatialLocalizer<MarkerVisualLocalizationSettings>.DebugLog(String) SpatialLocalizer<MarkerVisualLocalizationSettings>.Start() SpatialLocalizer<MarkerVisualLocalizationSettings>.OnDestroy() SpatialLocalizer<MarkerVisualLocalizationSettings>.CreateDefaultSettings() SpatialLocalizer<MarkerVisualLocalizationSettings>.ISpatialLocalizer.TryDeserializeSettings(BinaryReader, ISpatialLocalizationSettings) SpatialLocalizer<MarkerVisualLocalizationSettings>.ISpatialLocalizer.TryCreateLocalizationSession(IPeerConnection, ISpatialLocalizationSettings, ISpatialLocalizationSession) Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public class QRCodeMarkerVisualSpatialLocalizer : MarkerVisualSpatialLocalizer, ISpatialLocalizer Fields Id Declaration public static readonly Guid Id Field Value Type Description Guid Properties DetectorId Declaration public static Guid DetectorId { get; } Property Value Type Description Guid DisplayName Declaration public override string DisplayName { get; } Property Value Type Description String Overrides Microsoft.MixedReality.SpectatorView.SpatialLocalizer<Microsoft.MixedReality.SpectatorView.MarkerVisualLocalizationSettings>.DisplayName IsSupported Declaration protected override bool IsSupported { get; } Property Value Type Description Boolean Overrides Microsoft.MixedReality.SpectatorView.SpatialLocalizer<Microsoft.MixedReality.SpectatorView.MarkerVisualLocalizationSettings>.IsSupported MarkerVisualDetectorSpatialLocalizerId Declaration public override Guid MarkerVisualDetectorSpatialLocalizerId { get; } Property Value Type Description Guid Overrides MarkerVisualSpatialLocalizer.MarkerVisualDetectorSpatialLocalizerId SpatialLocalizerId Declaration public override Guid SpatialLocalizerId { get; } Property Value Type Description Guid Overrides Microsoft.MixedReality.SpectatorView.SpatialLocalizer<Microsoft.MixedReality.SpectatorView.MarkerVisualLocalizationSettings>.SpatialLocalizerId Implements ISpatialLocalizer"
  },
  "api/Microsoft.MixedReality.SpectatorView.MessageEvent.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.MessageEvent.html",
    "title": "Class MessageEvent | MixedReality-SpectatorView Documentation",
    "keywords": "Class MessageEvent Inheritance Object MessageEvent Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public class MessageEvent Fields Message The message, as bytes. Declaration public byte[] Message Field Value Type Description Byte [] SourceHost The host that this message came from. In some unusual situations, such as when crossing network boundaries using NAT, this value may not be reliable. An example is when one client is on corpnet wireless and the other is on corpnet wired. In these situations, it may be better to either use TCP (where you might not care who exactly a message is from, since a TCP Listener can send to all automatically), or to send your own IP (using GetLocalIPAddress) as a message and have the Lister create a new Sender to reply using that value. Declaration public string SourceHost Field Value Type Description String SourceId The ID of the client who sent the message Declaration public int SourceId Field Value Type Description Int32 Methods GetMessageString() The message, as a string. Declaration public string GetMessageString() Returns Type Description String"
  },
  "api/Microsoft.MixedReality.SpectatorView.MarkerVisualSpatialLocalizer.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.MarkerVisualSpatialLocalizer.html",
    "title": "Class MarkerVisualSpatialLocalizer | MixedReality-SpectatorView Documentation",
    "keywords": "Class MarkerVisualSpatialLocalizer SpatialLocalizer that shows a marker Inheritance Object SpatialLocalizer < MarkerVisualLocalizationSettings > MarkerVisualSpatialLocalizer ArUcoMarkerVisualSpatialLocalizer QRCodeMarkerVisualSpatialLocalizer Implements ISpatialLocalizer Inherited Members SpatialLocalizer<MarkerVisualLocalizationSettings>.SpatialLocalizerId SpatialLocalizer<MarkerVisualLocalizationSettings>.lockObject SpatialLocalizer<MarkerVisualLocalizationSettings>.debugLogging SpatialLocalizer<MarkerVisualLocalizationSettings>.DebugLog(String) SpatialLocalizer<MarkerVisualLocalizationSettings>.DisplayName SpatialLocalizer<MarkerVisualLocalizationSettings>.IsSupported SpatialLocalizer<MarkerVisualLocalizationSettings>.Start() SpatialLocalizer<MarkerVisualLocalizationSettings>.OnDestroy() SpatialLocalizer<MarkerVisualLocalizationSettings>.CreateDefaultSettings() SpatialLocalizer<MarkerVisualLocalizationSettings>.ISpatialLocalizer.TryDeserializeSettings(BinaryReader, ISpatialLocalizationSettings) SpatialLocalizer<MarkerVisualLocalizationSettings>.ISpatialLocalizer.TryCreateLocalizationSession(IPeerConnection, ISpatialLocalizationSettings, ISpatialLocalizationSession) Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public abstract class MarkerVisualSpatialLocalizer : SpatialLocalizer<MarkerVisualLocalizationSettings>, ISpatialLocalizer Fields markerVisual Declaration protected IMarkerVisual markerVisual Field Value Type Description IMarkerVisual MarkerVisualPrefab Declaration protected GameObject MarkerVisualPrefab Field Value Type Description GameObject Properties MarkerVisualDetectorSpatialLocalizerId Declaration public abstract Guid MarkerVisualDetectorSpatialLocalizerId { get; } Property Value Type Description Guid Methods TryCreateLocalizationSession(IPeerConnection, MarkerVisualLocalizationSettings, out ISpatialLocalizationSession) Declaration public override bool TryCreateLocalizationSession(IPeerConnection peerConnection, MarkerVisualLocalizationSettings settings, out ISpatialLocalizationSession session) Parameters Type Name Description IPeerConnection peerConnection MarkerVisualLocalizationSettings settings ISpatialLocalizationSession session Returns Type Description Boolean Overrides Microsoft.MixedReality.SpectatorView.SpatialLocalizer<Microsoft.MixedReality.SpectatorView.MarkerVisualLocalizationSettings>.TryCreateLocalizationSession(Microsoft.MixedReality.SpectatorView.IPeerConnection, Microsoft.MixedReality.SpectatorView.MarkerVisualLocalizationSettings, Microsoft.MixedReality.SpectatorView.ISpatialLocalizationSession) TryDeserializeSettings(BinaryReader, out MarkerVisualLocalizationSettings) Declaration public override bool TryDeserializeSettings(BinaryReader reader, out MarkerVisualLocalizationSettings settings) Parameters Type Name Description BinaryReader reader MarkerVisualLocalizationSettings settings Returns Type Description Boolean Overrides Microsoft.MixedReality.SpectatorView.SpatialLocalizer<Microsoft.MixedReality.SpectatorView.MarkerVisualLocalizationSettings>.TryDeserializeSettings(BinaryReader, Microsoft.MixedReality.SpectatorView.MarkerVisualLocalizationSettings) Implements ISpatialLocalizer"
  },
  "api/Microsoft.MixedReality.SpectatorView.MarkerVisualLocalizationSettings.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.MarkerVisualLocalizationSettings.html",
    "title": "Class MarkerVisualLocalizationSettings | MixedReality-SpectatorView Documentation",
    "keywords": "Class MarkerVisualLocalizationSettings Inheritance Object MarkerVisualLocalizationSettings Implements ISpatialLocalizationSettings Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public class MarkerVisualLocalizationSettings : ISpatialLocalizationSettings Constructors MarkerVisualLocalizationSettings() Declaration public MarkerVisualLocalizationSettings() Fields CoordinateAssignedHeader Declaration public const string CoordinateAssignedHeader = \"ASSIGNID\" Field Value Type Description String CoordinateFoundHeader Declaration public const string CoordinateFoundHeader = \"COORDFOUND\" Field Value Type Description String DiscoveryHeader Declaration public const string DiscoveryHeader = \"MVISUALDISC\" Field Value Type Description String Methods Serialize(BinaryWriter) Declaration public void Serialize(BinaryWriter writer) Parameters Type Name Description BinaryWriter writer Implements ISpatialLocalizationSettings"
  },
  "api/Microsoft.MixedReality.SpectatorView.MarkerDetectorSpatialLocalizer.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.MarkerDetectorSpatialLocalizer.html",
    "title": "Class MarkerDetectorSpatialLocalizer | MixedReality-SpectatorView Documentation",
    "keywords": "Class MarkerDetectorSpatialLocalizer SpatialLocalizer that is based on a marker detector. Inheritance Object SpatialLocalizer < MarkerDetectorLocalizationSettings > MarkerDetectorSpatialLocalizer ArUcoMarkerDetectorSpatialLocalizer QRCodeMarkerDetectorSpatialLocalizer Implements ISpatialLocalizer Inherited Members SpatialLocalizer<MarkerDetectorLocalizationSettings>.SpatialLocalizerId SpatialLocalizer<MarkerDetectorLocalizationSettings>.lockObject SpatialLocalizer<MarkerDetectorLocalizationSettings>.debugLogging SpatialLocalizer<MarkerDetectorLocalizationSettings>.DebugLog(String) SpatialLocalizer<MarkerDetectorLocalizationSettings>.DisplayName SpatialLocalizer<MarkerDetectorLocalizationSettings>.IsSupported SpatialLocalizer<MarkerDetectorLocalizationSettings>.Start() SpatialLocalizer<MarkerDetectorLocalizationSettings>.OnDestroy() SpatialLocalizer<MarkerDetectorLocalizationSettings>.CreateDefaultSettings() SpatialLocalizer<MarkerDetectorLocalizationSettings>.ISpatialLocalizer.TryDeserializeSettings(BinaryReader, ISpatialLocalizationSettings) SpatialLocalizer<MarkerDetectorLocalizationSettings>.ISpatialLocalizer.TryCreateLocalizationSession(IPeerConnection, ISpatialLocalizationSettings, ISpatialLocalizationSession) Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public abstract class MarkerDetectorSpatialLocalizer : SpatialLocalizer<MarkerDetectorLocalizationSettings>, ISpatialLocalizer Fields markerDetector Declaration protected IMarkerDetector markerDetector Field Value Type Description IMarkerDetector Methods TryCreateLocalizationSession(IPeerConnection, MarkerDetectorLocalizationSettings, out ISpatialLocalizationSession) Declaration public override bool TryCreateLocalizationSession(IPeerConnection peerConnection, MarkerDetectorLocalizationSettings settings, out ISpatialLocalizationSession session) Parameters Type Name Description IPeerConnection peerConnection MarkerDetectorLocalizationSettings settings ISpatialLocalizationSession session Returns Type Description Boolean Overrides Microsoft.MixedReality.SpectatorView.SpatialLocalizer<Microsoft.MixedReality.SpectatorView.MarkerDetectorLocalizationSettings>.TryCreateLocalizationSession(Microsoft.MixedReality.SpectatorView.IPeerConnection, Microsoft.MixedReality.SpectatorView.MarkerDetectorLocalizationSettings, Microsoft.MixedReality.SpectatorView.ISpatialLocalizationSession) TryDeserializeSettings(BinaryReader, out MarkerDetectorLocalizationSettings) Declaration public override bool TryDeserializeSettings(BinaryReader reader, out MarkerDetectorLocalizationSettings settings) Parameters Type Name Description BinaryReader reader MarkerDetectorLocalizationSettings settings Returns Type Description Boolean Overrides Microsoft.MixedReality.SpectatorView.SpatialLocalizer<Microsoft.MixedReality.SpectatorView.MarkerDetectorLocalizationSettings>.TryDeserializeSettings(BinaryReader, Microsoft.MixedReality.SpectatorView.MarkerDetectorLocalizationSettings) Implements ISpatialLocalizer"
  },
  "api/Microsoft.MixedReality.SpectatorView.MarkerDetectorLocalizationSettings.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.MarkerDetectorLocalizationSettings.html",
    "title": "Class MarkerDetectorLocalizationSettings | MixedReality-SpectatorView Documentation",
    "keywords": "Class MarkerDetectorLocalizationSettings Inheritance Object MarkerDetectorLocalizationSettings Implements ISpatialLocalizationSettings IEditableSpatialLocalizationSettings Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public class MarkerDetectorLocalizationSettings : ISpatialLocalizationSettings, IEditableSpatialLocalizationSettings Properties MarkerID Declaration public int MarkerID { get; set; } Property Value Type Description Int32 MarkerSize Declaration public float MarkerSize { get; set; } Property Value Type Description Single Methods Serialize(BinaryWriter) Declaration public void Serialize(BinaryWriter writer) Parameters Type Name Description BinaryWriter writer TryDeserialize(BinaryReader, out MarkerDetectorLocalizationSettings) Declaration public static bool TryDeserialize(BinaryReader reader, out MarkerDetectorLocalizationSettings settings) Parameters Type Name Description BinaryReader reader MarkerDetectorLocalizationSettings settings Returns Type Description Boolean Implements ISpatialLocalizationSettings IEditableSpatialLocalizationSettings"
  },
  "api/Microsoft.MixedReality.SpectatorView.MarkerDetectorCoordinateService.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.MarkerDetectorCoordinateService.html",
    "title": "Class MarkerDetectorCoordinateService | MixedReality-SpectatorView Documentation",
    "keywords": "Class MarkerDetectorCoordinateService A marker detection based implementation of ISpatialCoordinateService . Inheritance Object MarkerDetectorCoordinateService Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public class MarkerDetectorCoordinateService : SpatialCoordinateServiceBase<int> Constructors MarkerDetectorCoordinateService(IMarkerDetector, Boolean) Declaration public MarkerDetectorCoordinateService(IMarkerDetector markerDetector, bool debugLogging) Parameters Type Name Description IMarkerDetector markerDetector Boolean debugLogging Methods OnDiscoverCoordinatesAsync(CancellationToken, Int32[]) Declaration protected override Task OnDiscoverCoordinatesAsync(CancellationToken cancellationToken, int[] idsToLocate = null) Parameters Type Name Description CancellationToken cancellationToken Int32 [] idsToLocate Returns Type Description Task OnManagedDispose() Declaration protected override void OnManagedDispose() TryParse(String, out Int32) Declaration protected override bool TryParse(string id, out int result) Parameters Type Name Description String id Int32 result Returns Type Description Boolean"
  },
  "api/Microsoft.MixedReality.SpectatorView.MarkerCorners.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.MarkerCorners.html",
    "title": "Struct MarkerCorners | MixedReality-SpectatorView Documentation",
    "keywords": "Struct MarkerCorners Struct that contains world positions and orientations for marker corners. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax [Serializable] public struct MarkerCorners Fields bottomLeft Declaration public Vector3 bottomLeft Field Value Type Description Vector3 bottomRight Declaration public Vector3 bottomRight Field Value Type Description Vector3 orientation Declaration public Quaternion orientation Field Value Type Description Quaternion topLeft Declaration public Vector3 topLeft Field Value Type Description Vector3 topRight Declaration public Vector3 topRight Field Value Type Description Vector3"
  },
  "api/Microsoft.MixedReality.SpectatorView.IRecordingServiceVisual.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.IRecordingServiceVisual.html",
    "title": "Interface IRecordingServiceVisual | MixedReality-SpectatorView Documentation",
    "keywords": "Interface IRecordingServiceVisual Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public interface IRecordingServiceVisual Methods SetRecordingService(IRecordingService) Declaration void SetRecordingService(IRecordingService service) Parameters Type Name Description IRecordingService service"
  },
  "api/Microsoft.MixedReality.SpectatorView.IRecordingService.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.IRecordingService.html",
    "title": "Interface IRecordingService | MixedReality-SpectatorView Documentation",
    "keywords": "Interface IRecordingService An interface implemented by classes that perform screen recording Inherited Members IDisposable.Dispose() Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public interface IRecordingService : IDisposable Methods Initialize() Initializes the screen recording service Declaration void Initialize() IsInitialized() True if the screen recording service has completed initialization and is ready for use Declaration bool IsInitialized() Returns Type Description Boolean IsRecordingAvailable() True if a screen recording has been taken during the current application session Declaration bool IsRecordingAvailable() Returns Type Description Boolean ShowRecording() Shows the last captured screen recording from the current application session Declaration void ShowRecording() StartRecording() Starts screen recording Declaration bool StartRecording() Returns Type Description Boolean StopRecording() Stops screen recording Declaration void StopRecording()"
  },
  "api/Microsoft.MixedReality.SpectatorView.IPeerConnection.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.IPeerConnection.html",
    "title": "Interface IPeerConnection | MixedReality-SpectatorView Documentation",
    "keywords": "Interface IPeerConnection Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public interface IPeerConnection Methods SendData(Action<BinaryWriter>) Declaration void SendData(Action<BinaryWriter> writeCallback) Parameters Type Name Description Action < BinaryWriter > writeCallback"
  },
  "api/Microsoft.MixedReality.SpectatorView.iOSRecordingService.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.iOSRecordingService.html",
    "title": "Class iOSRecordingService | MixedReality-SpectatorView Documentation",
    "keywords": "Class iOSRecordingService Class implementing IRecordingService for the iOS platform Inheritance Object iOSRecordingService Implements IRecordingService IDisposable Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public class iOSRecordingService : MonoBehaviour, IRecordingService, IDisposable Methods Dispose() Declaration public void Dispose() Initialize() Initializes the screen recording service Declaration public void Initialize() IsInitialized() True if the screen recording service has completed initialization and is ready for use Declaration public bool IsInitialized() Returns Type Description Boolean IsRecordingAvailable() True if a screen recording has been taken during the current application session Declaration public bool IsRecordingAvailable() Returns Type Description Boolean ShowRecording() Shows the last captured screen recording from the current application session Declaration public void ShowRecording() StartRecording() Starts screen recording Declaration public bool StartRecording() Returns Type Description Boolean StopRecording() Stops screen recording Declaration public void StopRecording() Implements IRecordingService System.IDisposable"
  },
  "api/Microsoft.MixedReality.SpectatorView.IMarkerVisual.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.IMarkerVisual.html",
    "title": "Interface IMarkerVisual | MixedReality-SpectatorView Documentation",
    "keywords": "Interface IMarkerVisual Interface that should be implemented by any class that displays markers for detection Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public interface IMarkerVisual Methods HideMarker() Hides any shown markers Declaration void HideMarker() ShowMarker(Int32) Shows the specified marker Declaration void ShowMarker(int id) Parameters Type Name Description Int32 id Id of the marker to show TryGetMaxSupportedMarkerId(out Int32) Tries to obtain the maximum marker id supported by this marker visual. Declaration bool TryGetMaxSupportedMarkerId(out int markerId) Parameters Type Name Description Int32 markerId Returns Type Description Boolean Returns true if the maximum marker id can be found, otherwise false. TrySetMarkerSize(Single) Tries to set the physical size for displaying markers Declaration bool TrySetMarkerSize(float size) Parameters Type Name Description Single size The physical size (in meters) that markers should be when shown Returns Type Description Boolean Returns true if the marker can be set to the provided size, otherwise false. TrySetScaleFactor(Single) Tries to set an additional scale factors for the marker visual. Declaration bool TrySetScaleFactor(float scaleFactor) Parameters Type Name Description Single scaleFactor Additional scale factor to account for with the marker visual. Returns Type Description Boolean Returns true if the scale factor was updated."
  },
  "api/Microsoft.MixedReality.SpectatorView.IMarkerDetector.html": {
    "href": "api/Microsoft.MixedReality.SpectatorView.IMarkerDetector.html",
    "title": "Interface IMarkerDetector | MixedReality-SpectatorView Documentation",
    "keywords": "Interface IMarkerDetector Interface that should be implemented by any class that detects markers Namespace : Microsoft.MixedReality.SpectatorView Assembly : cs.temp.dll.dll Syntax public interface IMarkerDetector Properties MarkerPositionBehavior Determines how the marker is expected to be positioned during detection. Declaration MarkerPositionBehavior MarkerPositionBehavior { get; set; } Property Value Type Description MarkerPositionBehavior Methods SetMarkerSize(Single) Set the physical size for markers being detected Declaration void SetMarkerSize(float size) Parameters Type Name Description Single size The physical size (in meters) of markers being detected StartDetecting() Starts marker detection Declaration void StartDetecting() StopDetecting() Stops marker detection Declaration void StopDetecting() TryGetMarkerSize(Int32, out Single) Tries to obtain the physical size of a detected marker. Returns true if the marker size is known and was determined through detection; otherwise, returns false. Declaration bool TryGetMarkerSize(int markerId, out float size) Parameters Type Name Description Int32 markerId id of detected marker Single size The physical size (in meters) of the detected marker Returns Type Description Boolean True if the size was located Events MarkersUpdated Event called when any observed markers have been updated Declaration event MarkersUpdatedHandler MarkersUpdated Event Type Type Description MarkersUpdatedHandler"
  },
  "api/Microsoft.MixedReality.SpatialAlignment.LocatedState.html": {
    "href": "api/Microsoft.MixedReality.SpatialAlignment.LocatedState.html",
    "title": "Enum LocatedState | MixedReality-SpectatorView Documentation",
    "keywords": "Enum LocatedState Defines the potential states of alignment for a strategy. Namespace : Microsoft.MixedReality.SpatialAlignment Assembly : cs.temp.dll.dll Syntax public enum LocatedState Fields Name Description Error An error has occurred with the alignment strategy. Inhibited Alignment is temporarily inhibited (usually due to some form of tracking loss). Resolved Alignment has been resolved at least once but there is no active tracking. Tracking Alignment has been resolved at least once and there is active tracking. Unresolved Alignment has never been resolved in this session."
  },
  "api/Microsoft.MixedReality.PhotoCapture.html": {
    "href": "api/Microsoft.MixedReality.PhotoCapture.html",
    "title": "Namespace Microsoft.MixedReality.PhotoCapture | MixedReality-SpectatorView Documentation",
    "keywords": "Namespace Microsoft.MixedReality.PhotoCapture Classes CameraExtrinsics Camera extrinsics helper class CameraFrame Represents a camera frame, with all format, resolution, properties and pixel data. When finished using a frame, call Release to return to pool. CameraIntrinsics Contains information on camera intrinsic parameters. Note: This class wraps logic in Windows.Media.Devices.Core.CameraIntrinsics for use in Unity. HoloLensCamera Exposes functionality for all of HoloLens's cameras. StreamDescription Class containing data related to a stream description StreamSelector Class that helps with picking a specific stream type Structs CameraResolution Struct containing information related to a camera's resolution and framerate. Enums CameraState CameraType The type of camera CaptureMode The mode to run the camera in PixelFormat The pixel format of a frame StreamCompare Used for comparisons in stream selection Delegates OnCameraInitializedHandler Handler delegate for initialization complete callback. OnCameraStartedHandler Handler delegate for camera start complete callback. OnFrameCapturedHandler Handler delegate for capturing frames"
  },
  "api/Microsoft.MixedReality.PhotoCapture.StreamSelector.html": {
    "href": "api/Microsoft.MixedReality.PhotoCapture.StreamSelector.html",
    "title": "Class StreamSelector | MixedReality-SpectatorView Documentation",
    "keywords": "Class StreamSelector Class that helps with picking a specific stream type Inheritance Object StreamSelector Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.PhotoCapture Assembly : cs.temp.dll.dll Syntax public class StreamSelector Properties StreamDescriptions List containing stream descriptions Declaration public List<StreamDescription> StreamDescriptions { get; } Property Value Type Description List < StreamDescription > Methods AddStream(StreamDescription) Use this function to declare a new stream description Declaration public void AddStream(StreamDescription streamDescription) Parameters Type Name Description StreamDescription streamDescription Select(StreamCompare, Double) Select streams by framerate Declaration public StreamSelector Select(StreamCompare compare, double framerate) Parameters Type Name Description StreamCompare compare The comparison to use Double framerate The framerate to compare with Returns Type Description StreamSelector Select(StreamCompare, Int32, Int32) Select streams by resolution Declaration public StreamSelector Select(StreamCompare compare, int width, int height) Parameters Type Name Description StreamCompare compare The comparison to use Int32 width The width to compare with Int32 height The height to compare with Returns Type Description StreamSelector"
  },
  "api/Microsoft.MixedReality.PhotoCapture.StreamDescription.html": {
    "href": "api/Microsoft.MixedReality.PhotoCapture.StreamDescription.html",
    "title": "Class StreamDescription | MixedReality-SpectatorView Documentation",
    "keywords": "Class StreamDescription Class containing data related to a stream description Inheritance Object StreamDescription Implements IEquatable < StreamDescription > Inherited Members Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.PhotoCapture Assembly : cs.temp.dll.dll Syntax [Serializable] public class StreamDescription : IEquatable<StreamDescription> Fields CameraType Camera type Declaration public CameraType CameraType Field Value Type Description CameraType Resolution Resolution of the camera Declaration public CameraResolution Resolution Field Value Type Description CameraResolution SourceId Camera id Declaration public string SourceId Field Value Type Description String SourceName Camera source Declaration public string SourceName Field Value Type Description String Methods Equals(StreamDescription) Declaration public bool Equals(StreamDescription other) Parameters Type Name Description StreamDescription other Returns Type Description Boolean Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides Object.Equals(Object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides Object.GetHashCode() Operators Equality(StreamDescription, StreamDescription) Declaration public static bool operator ==(StreamDescription lhs, StreamDescription rhs) Parameters Type Name Description StreamDescription lhs StreamDescription rhs Returns Type Description Boolean Inequality(StreamDescription, StreamDescription) Declaration public static bool operator !=(StreamDescription lhs, StreamDescription rhs) Parameters Type Name Description StreamDescription lhs StreamDescription rhs Returns Type Description Boolean Implements System.IEquatable<T>"
  },
  "api/Microsoft.MixedReality.PhotoCapture.PixelFormat.html": {
    "href": "api/Microsoft.MixedReality.PhotoCapture.PixelFormat.html",
    "title": "Enum PixelFormat | MixedReality-SpectatorView Documentation",
    "keywords": "Enum PixelFormat The pixel format of a frame Namespace : Microsoft.MixedReality.PhotoCapture Assembly : cs.temp.dll.dll Syntax public enum PixelFormat Fields Name Description BGRA8 Invalid L16 L8 NV12 RGBA8 YUY2"
  },
  "api/Microsoft.MixedReality.PhotoCapture.OnCameraStartedHandler.html": {
    "href": "api/Microsoft.MixedReality.PhotoCapture.OnCameraStartedHandler.html",
    "title": "Delegate OnCameraStartedHandler | MixedReality-SpectatorView Documentation",
    "keywords": "Delegate OnCameraStartedHandler Handler delegate for camera start complete callback. Namespace : Microsoft.MixedReality.PhotoCapture Assembly : cs.temp.dll.dll Syntax public delegate void OnCameraStartedHandler(HoloLensCamera sender, bool startSuccessful); Parameters Type Name Description HoloLensCamera sender Boolean startSuccessful"
  },
  "api/Microsoft.MixedReality.PhotoCapture.CameraType.html": {
    "href": "api/Microsoft.MixedReality.PhotoCapture.CameraType.html",
    "title": "Enum CameraType | MixedReality-SpectatorView Documentation",
    "keywords": "Enum CameraType The type of camera Namespace : Microsoft.MixedReality.PhotoCapture Assembly : cs.temp.dll.dll Syntax public enum CameraType Fields Name Description Color Depth Infrared Invalid"
  }
}